# en resources
signature = "sIgNaTuRe"
###
# Note: any value for category **must** match one of the values for the
# enumeration "event.EventDescription.EventCategory" in enum.vmsg.
###
###
Event.category                                                    = "info"
Event.description                                                 = "<Event>"
Event.formatOnComputeResource                                     = ""
Event.formatOnDatacenter                                          = ""
Event.formatOnHost                                                = ""
Event.formatOnVm                                                  = ""
Event.fullFormat                                                  = "<internal>"
#args
#Event.key.label = ""
#Event.key.summary = ""
#Event.chainId.label = ""
#Event.chainId.summary = ""
Event.userName.label = "User name"
Event.userName.summary = "User name creating the event"
Event.datacenter.label = "Data center ID"
Event.datacenter.summary = "Event data center ID"
Event.datacenter.name.label = "Data center name"
Event.datacenter.name.summary = "Data center name"
Event.computeResource.summary = "Compute resource ID"
Event.computeResource.label = "Compute-resource ID for the event"
Event.computeResource.name.label = "Compute-resource name"
Event.computeResource.name.summary = "Name for the compute resource of the event"
Event.host.label = "Host ID"
Event.host.summary = "Host ID for the event"
Event.host.name.label = "Host name"
Event.host.name.summary = "Host name for the event"
Event.vm.label = "VM ID"
Event.vm.summary = "VM ID for the event"
Event.vm.name.label = "VM name"
Event.vm.name.summary = "VM name for the event"
Event.ds.label = "Datastore ID"
Event.ds.summary = "Datastore  ID for the event"
Event.ds.name.label = "Datastore name"
Event.ds.name.summary = "Datastore name for the event"
Event.net.label = "Network ID"
Event.net.summary = "Network ID for the event"
Event.net.name.label = "Network name"
Event.net.name.summary = "Network name for the event"
Event.dvs.label = "DVS ID"
Event.dvs.summary = "Distributed Virtual Switch ID for the event"
Event.dvs.name.label = "DVS name"
Event.dvs.name.summary = "DVS name for the event"
Event.fullFormattedMessage.label = "Full message"
Event.fullFormattedMessage.summary = "Event message"
Event.changeTag.label = "Change tag"
Event.changeTag.summary = "Change tag for the event"

###
EventEx.category                                                  = "info"
EventEx.description                                               = "<EventEx>"
EventEx.formatOnComputeResource                                   = ""
EventEx.formatOnDatacenter                                        = ""
EventEx.formatOnHost                                              = ""
EventEx.formatOnVm                                                = ""
EventEx.fullFormat                                                = "<internal>"
#args
EventEx.eventTypeId.label = "Event type ID"
EventEx.eventTypeId.summary = "Event type ID"
EventEx.severity.label = "Severity"
EventEx.severity.summary = "Event severity"
EventEx.message.label = "Message"
EventEx.message.summary = "additional message associated with the event"
EventEx.objectId.label = "Object ID"
EventEx.objectId.summary = "Object ID for the event"
EventEx.objectType.label = "Object type"
EventEx.objectType.summary = "Object for the event"

###
DatacenterEvent.category                                          = "info"
DatacenterEvent.description                                       = "<Datacenter Event>"
DatacenterEvent.formatOnComputeResource                           = ""
DatacenterEvent.formatOnDatacenter                                = ""
DatacenterEvent.formatOnHost                                      = ""
DatacenterEvent.formatOnVm                                        = ""
DatacenterEvent.fullFormat                                        = "<internal>"
###
MigrationEvent.category                                           = "info"
MigrationEvent.description                                        = "<Migration Event>"
MigrationEvent.formatOnComputeResource                            = ""
MigrationEvent.formatOnDatacenter                                 = ""
MigrationEvent.formatOnHost                                       = ""
MigrationEvent.formatOnVm                                         = ""
MigrationEvent.fullFormat                                         = "<internal>"
###
UpgradeEvent.category                                             = "info"
UpgradeEvent.description                                          = "<Upgrade Event>"
UpgradeEvent.formatOnComputeResource                              = ""
UpgradeEvent.formatOnDatacenter                                   = ""
UpgradeEvent.formatOnHost                                         = ""
UpgradeEvent.formatOnVm                                           = ""
UpgradeEvent.fullFormat                                           = "<internal>"
#args
UpgradeEvent.message.label = "Message"
UpgradeEvent.message.summary = "upgrade message"

###
HostEvent.category                                                = "info"
HostEvent.description                                             = "<Host Event>"
HostEvent.formatOnComputeResource                                 = ""
HostEvent.formatOnDatacenter                                      = ""
HostEvent.formatOnHost                                            = ""
HostEvent.formatOnVm                                              = ""
HostEvent.fullFormat                                              = "<internal>"
###
DatastoreEvent.category                                           = "info"
DatastoreEvent.description                                        = "<Datastore Event>"
DatastoreEvent.formatOnComputeResource                            = ""
DatastoreEvent.formatOnDatacenter                                 = ""
DatastoreEvent.formatOnHost                                       = ""
DatastoreEvent.formatOnVm                                         = ""
DatastoreEvent.fullFormat                                         = "<internal>"
#args
# (this duplicates the ".ds" argument of Event)
DatastoreEvent.datastore.label = "Datastore ID"
DatastoreEvent.datastore.summary = "Datastore ID"
DatastoreEvent.datastore.name.label = "Datastore name"
DatastoreEvent.datastore.name.summary = "Datastore name"

###
VmEvent.category                                                  = "info"
VmEvent.description                                               = "<VM Event>"
VmEvent.formatOnComputeResource                                   = ""
VmEvent.formatOnDatacenter                                        = ""
VmEvent.formatOnHost                                              = ""
VmEvent.formatOnVm                                                = ""
VmEvent.fullFormat                                                = "<internal>"
#args
VmEvent.template.label = "Template"
VmEvent.template.summary = "VM template"

###
AlarmEvent.category                                               = "info"
AlarmEvent.description                                            = "<Alarm Event>"
AlarmEvent.formatOnComputeResource                                = ""
AlarmEvent.formatOnDatacenter                                     = ""
AlarmEvent.formatOnHost                                           = ""
AlarmEvent.formatOnVm                                             = ""
AlarmEvent.fullFormat                                             = "<internal>"
#args
AlarmEvent.alarm.label = "Alarm ID"
AlarmEvent.alarm.summary = "Alarm ID"
AlarmEvent.alarm.name.label = "Alarm name"
AlarmEvent.alarm.name.summary = "Alarm name"

###
AuthorizationEvent.category                                       = "info"
AuthorizationEvent.description                                    = "<Authorization Event>"
AuthorizationEvent.formatOnComputeResource                        = ""
AuthorizationEvent.formatOnDatacenter                             = ""
AuthorizationEvent.formatOnHost                                   = ""
AuthorizationEvent.formatOnVm                                     = ""
AuthorizationEvent.fullFormat                                     = "<internal>"
###
ClusterEvent.category                                             = "info"
ClusterEvent.description                                          = "<Cluster Event>"
ClusterEvent.formatOnComputeResource                              = ""
ClusterEvent.formatOnDatacenter                                   = ""
ClusterEvent.formatOnHost                                         = ""
ClusterEvent.formatOnVm                                           = ""
ClusterEvent.fullFormat                                           = "<internal>"
###
PermissionEvent.category                                          = "info"
PermissionEvent.description                                       = "<Permission Event>"
PermissionEvent.formatOnComputeResource                           = ""
PermissionEvent.formatOnDatacenter                                = ""
PermissionEvent.formatOnHost                                      = ""
PermissionEvent.formatOnVm                                        = ""
PermissionEvent.fullFormat                                        = "<internal>"
#args
PermissionEvent.entity.label = "Entity ID"
PermissionEvent.entity.summary = "Entity ID"
PermissionEvent.entity.name.label = "Entity name"
PermissionEvent.entity.name.summary = "Entity name"
PermissionEvent.group.label = "Group"
PermissionEvent.group.summary = "Principal group"
PermissionEvent.principal.label = "Principal"
PermissionEvent.principal.summary = "Permission for principal"

###
RoleEvent.category                                                = "info"
RoleEvent.description                                             = "<Role Event>"
RoleEvent.formatOnComputeResource                                 = ""
RoleEvent.formatOnDatacenter                                      = ""
RoleEvent.formatOnHost                                            = ""
RoleEvent.formatOnVm                                              = ""
RoleEvent.fullFormat                                              = "<internal>"
#args
RoleEvent.role.name.label = "Role name"
RoleEvent.role.name.summary = "role name"
RoleEvent.role.roleId.label = "Role ID"
RoleEvent.role.roleId.summary = "role ID"

###
CustomFieldEvent.category                                         = "info"
CustomFieldEvent.description                                      = "<Custom Field Event>"
CustomFieldEvent.formatOnComputeResource                          = ""
CustomFieldEvent.formatOnDatacenter                               = ""
CustomFieldEvent.formatOnHost                                     = ""
CustomFieldEvent.formatOnVm                                       = ""
CustomFieldEvent.fullFormat                                       = "<internal>"
###
CustomFieldDefEvent.category                                      = "info"
CustomFieldDefEvent.description                                   = "<Custom Field Definition Event>"
CustomFieldDefEvent.formatOnComputeResource                       = ""
CustomFieldDefEvent.formatOnDatacenter                            = ""
CustomFieldDefEvent.formatOnHost                                  = ""
CustomFieldDefEvent.formatOnVm                                    = ""
CustomFieldDefEvent.fullFormat                                    = "<internal>"
#args
CustomFieldDefEvent.fieldKey.label = "Field key"
CustomFieldDefEvent.fieldKey.summary = "field key"
CustomFieldDefEvent.name.label = "Name"
CustomFieldDefEvent.name.summary = "field name"

###
TemplateUpgradeEvent.category                                     = "info"
TemplateUpgradeEvent.description                                  = "<Template Upgrade Event>"
TemplateUpgradeEvent.formatOnComputeResource                      = ""
TemplateUpgradeEvent.formatOnDatacenter                           = ""
TemplateUpgradeEvent.formatOnHost                                 = ""
TemplateUpgradeEvent.formatOnVm                                   = ""
TemplateUpgradeEvent.fullFormat                                   = "<internal>"
#args
TemplateUpgradeEvent.legacyTemplate.label = "Template"
TemplateUpgradeEvent.legacyTemplate.summary = "Template"

###
LicenseEvent.category                                             = "info"
LicenseEvent.description                                          = "<License Event>"
LicenseEvent.formatOnComputeResource                              = ""
LicenseEvent.formatOnDatacenter                                   = ""
LicenseEvent.formatOnHost                                         = ""
LicenseEvent.formatOnVm                                           = ""
LicenseEvent.fullFormat                                           = "<internal>"

###
LicenseDowngradedEvent.category                              = "warning"
LicenseDowngradedEvent.description                           = "License downgrade"
LicenseDowngradedEvent.formatOnComputeResource               = "License downgrade"
LicenseDowngradedEvent.formatOnDatacenter                    = "License downgrade"
LicenseDowngradedEvent.formatOnHost                          = "License downgrade"
LicenseDowngradedEvent.formatOnVm                            = ""
LicenseDowngradedEvent.fullFormat                            = "License downgrade: {licenseKey} removes the following features: {lostFeatures}"

###
ResourcePoolEvent.category                                        = "info"
ResourcePoolEvent.description                                     = "<Resource Pool Event>"
ResourcePoolEvent.formatOnComputeResource                         = ""
ResourcePoolEvent.formatOnDatacenter                              = ""
ResourcePoolEvent.formatOnHost                                    = ""
ResourcePoolEvent.formatOnVm                                      = ""
ResourcePoolEvent.fullFormat                                      = "<internal>"
#args
ResourcePoolEvent.resourcePool.label = "Resource pool ID"
ResourcePoolEvent.resourcePool.summary = "Resource pool  ID"
ResourcePoolEvent.resourcePool.name.label = "Resource pool name"
ResourcePoolEvent.resourcePool.name.summary = "Resource pool name"

###
HostDasEvent.category                                             = "info"
HostDasEvent.description                                          = "<Host HA Event>"
HostDasEvent.formatOnComputeResource                              = ""
HostDasEvent.formatOnDatacenter                                   = ""
HostDasEvent.formatOnHost                                         = ""
HostDasEvent.formatOnVm                                           = ""
HostDasEvent.fullFormat                                           = "<internal>"
###
ScheduledTaskEvent.category                                       = "info"
ScheduledTaskEvent.description                                    = "<Scheduled Task Event>"
ScheduledTaskEvent.formatOnComputeResource                        = ""
ScheduledTaskEvent.formatOnDatacenter                             = ""
ScheduledTaskEvent.formatOnHost                                   = ""
ScheduledTaskEvent.formatOnVm                                     = ""
ScheduledTaskEvent.fullFormat                                     = "<internal>"
#args
ScheduledTaskEvent.entity.label = "Entity ID"
ScheduledTaskEvent.entity.summary = "Entity ID for the task"
ScheduledTaskEvent.entity.name.label = "Entity name"
ScheduledTaskEvent.entity.name.summary = "Entity name for the task"
ScheduledTaskEvent.scheduledTask.label = "Scheduled task ID"
ScheduledTaskEvent.scheduledTask.summary = "Scheduled task ID"
ScheduledTaskEvent.scheduledTask.name.label = "Scheduled task name"
ScheduledTaskEvent.scheduledTask.name.summary = "Scheduled task "

###
SessionEvent.category                                             = "info"
SessionEvent.description                                          = "<Session Event>"
SessionEvent.formatOnComputeResource                              = ""
SessionEvent.formatOnDatacenter                                   = ""
SessionEvent.formatOnHost                                         = ""
SessionEvent.formatOnVm                                           = ""
SessionEvent.fullFormat                                           = "<internal>"
###
VmRelocateSpecEvent.category                                      = "info"
VmRelocateSpecEvent.description                                   = "<VM Relocate Spec Event>"
VmRelocateSpecEvent.formatOnComputeResource                       = "<internal>"
VmRelocateSpecEvent.formatOnDatacenter                            = "<internal>"
VmRelocateSpecEvent.formatOnHost                                  = "<internal>"
VmRelocateSpecEvent.formatOnVm                                    = "<internal>"
VmRelocateSpecEvent.fullFormat                                    = "<internal>"
###
VmCloneEvent.category                                             = "info"
VmCloneEvent.description                                          = "<VM Clone Event>"
VmCloneEvent.formatOnComputeResource                              = "<internal>"
VmCloneEvent.formatOnDatacenter                                   = "<internal>"
VmCloneEvent.formatOnHost                                         = "<internal>"
VmCloneEvent.formatOnVm                                           = "<internal>"
VmCloneEvent.fullFormat                                           = "<internal>"
###
ExtendedEvent.category                                            = "info"
ExtendedEvent.description                                         = "<ExtendedEvent>"
ExtendedEvent.formatOnComputeResource                             = ""
ExtendedEvent.formatOnDatacenter                                  = ""
ExtendedEvent.formatOnHost                                        = ""
ExtendedEvent.formatOnVm                                          = ""
ExtendedEvent.fullFormat                                          = "<internal>"
#args
ExtendedEvent.eventTypeId.label = "Event type ID"
ExtendedEvent.eventTypeId.summary = "Extended event ID"
ExtendedEvent.managedObject.label = "Event ID"
ExtendedEvent.managedObject.summary = "Object ID "
ExtendedEvent.managedObject.name.label = "Managed object name"
ExtendedEvent.managedObject.name.summary = "Object name"

###
HealthStatusChangedEvent.category                                 = "info"
HealthStatusChangedEvent.description                              = "Status change"
HealthStatusChangedEvent.formatOnComputeResource                  = ""
HealthStatusChangedEvent.formatOnDatacenter                       = ""
HealthStatusChangedEvent.formatOnHost                             = ""
HealthStatusChangedEvent.formatOnVm                               = ""
HealthStatusChangedEvent.fullFormat                               = "{componentName} status changed from {oldStatus} to {newStatus}"
#args
HealthStatusChangedEvent.componentId.label = "Component ID"
HealthStatusChangedEvent.componentId.summary = "Component ID"
HealthStatusChangedEvent.componentName.label = "Component name"
HealthStatusChangedEvent.componentName.summary = "Component name"
HealthStatusChangedEvent.newStatus.label = "New status"
HealthStatusChangedEvent.newStatus.summary = "Component - current status"
HealthStatusChangedEvent.oldStatus.label = "Previous status"
HealthStatusChangedEvent.oldStatus.summary = "Component - previous status"

###
HostInventoryUnreadableEvent.category                                 = "info"
HostInventoryUnreadableEvent.description                              = "Host Inventory Unreadable"
HostInventoryUnreadableEvent.formatOnComputeResource                  = ""
HostInventoryUnreadableEvent.formatOnDatacenter                       = ""
HostInventoryUnreadableEvent.formatOnHost                             = "The virtual machine inventory file is damaged or unreadable."
HostInventoryUnreadableEvent.formatOnVm                               = ""
HostInventoryUnreadableEvent.fullFormat                               = "The virtual machine inventory file on host {host.name} is damaged or unreadable."
###
###
CustomizationEvent.category                                       = "info"
CustomizationEvent.description                                    = "<Customization Event>"
CustomizationEvent.formatOnComputeResource                        = ""
CustomizationEvent.formatOnDatacenter                             = ""
CustomizationEvent.formatOnHost                                   = ""
CustomizationEvent.formatOnVm                                     = ""
CustomizationEvent.fullFormat                                     = "<internal>"
#args
CustomizationEvent.logLocation.label = "Log location"
CustomizationEvent.logLocation.summary = "log location"

###
MigrationWarningEvent.category                                    = "warning"
MigrationWarningEvent.description                                 = "Migration warning"
MigrationWarningEvent.formatOnComputeResource                     = "Migration of {vm.name}: {fault.msg}"
MigrationWarningEvent.formatOnDatacenter                          = "Migration of {vm.name} from {host.name}: {fault.msg}"
MigrationWarningEvent.formatOnHost                                = "Migration of {vm.name}: {fault.msg}"
MigrationWarningEvent.formatOnVm                                  = "Migration from {host.name}: {fault.msg}"
MigrationWarningEvent.fullFormat                                  = "Migration of {vm.name} from {host.name} in {datacenter.name}: {fault.msg}"
###
MigrationErrorEvent.category                                      = "error"
MigrationErrorEvent.description                                   = "Migration error"
MigrationErrorEvent.formatOnComputeResource                       = "Unable to migrate {vm.name}: {fault.msg}"
MigrationErrorEvent.formatOnDatacenter                            = "Unable to migrate {vm.name} from {host.name}: {fault.msg}"
MigrationErrorEvent.formatOnHost                                  = "Unable to migrate {vm.name}: {fault.msg}"
MigrationErrorEvent.formatOnVm                                    = "Unable to migrate from {host.name}: {fault.msg}"
MigrationErrorEvent.fullFormat                                    = "Unable to migrate {vm.name} from {host.name} in {datacenter.name}: {fault.msg}"
###
MigrationHostWarningEvent.category                                = "warning"
MigrationHostWarningEvent.description                             = "Migration host warning"
MigrationHostWarningEvent.formatOnComputeResource                 = "Migration of {vm.name} to {dstHost.name}: {fault.msg}"
MigrationHostWarningEvent.formatOnDatacenter                      = "Migration of {vm.name} from {host.name} to {dstHost.name}: {fault.msg}"
MigrationHostWarningEvent.formatOnHost                            = "Migration of {vm.name} to {dstHost.name}: {fault.msg}"
MigrationHostWarningEvent.formatOnVm                              = "Migration from {host.name} to {dstHost.name}: {fault.msg}"
MigrationHostWarningEvent.fullFormat                              = "Migration of {vm.name} from {host.name} to {dstHost.name} in {datacenter.name}: {fault.msg}"
#args
MigrationHostWarningEvent.dstHost.label = "Destination host ID"
MigrationHostWarningEvent.dstHost.summary = "Destination host ID"
MigrationHostWarningEvent.dstHost.name.label = "Destination host name"
MigrationHostWarningEvent.dstHost.name.summary = "Name of destination host"

###
MigrationHostErrorEvent.category                                  = "error"
MigrationHostErrorEvent.description                               = "Migration host error"
MigrationHostErrorEvent.formatOnComputeResource                   = "Unable to migrate {vm.name} to host {dstHost.name}: {fault.msg}"
MigrationHostErrorEvent.formatOnDatacenter                        = "Unable to migrate {vm.name} from {host.name} to {dstHost.name}: {fault.msg}"
MigrationHostErrorEvent.formatOnHost                              = "Unable to migrate {vm.name} to {dstHost.name}: {fault.msg}"
MigrationHostErrorEvent.formatOnVm                                = "Unable to migrate from {host.name} to {dstHost.name}: {fault.msg}"
MigrationHostErrorEvent.fullFormat                                = "Unable to migrate {vm.name} from {host.name} to {dstHost.name} in {datacenter.name}: {fault.msg}"
#args
MigrationHostErrorEvent.dstHost.label = "Destination host ID"
MigrationHostErrorEvent.dstHost.summary = "Destination host ID"
MigrationHostErrorEvent.dstHost.name.label = "Destination host name"
MigrationHostErrorEvent.dstHost.name.summary = "Destination host"

###
MigrationResourceWarningEvent.category                            = "warning"
MigrationResourceWarningEvent.description                         = "Migration resource warning"
MigrationResourceWarningEvent.formatOnComputeResource             = "Migration of {vm.name} to {dstHost.name} and resource pool {dstPool.name}: {fault.msg}"
MigrationResourceWarningEvent.formatOnDatacenter                  = "Migration of {vm.name} from {host.name} to {dstHost.name} and resource pool {dstPool.name}: {fault.msg}"
MigrationResourceWarningEvent.formatOnHost                        = "Migration of {vm.name} to {dstHost.name} and resource pool {dstPool.name}: {fault.msg}"
MigrationResourceWarningEvent.formatOnVm                          = "Migration from {host.name} to {dstHost.name} and resource pool {dstPool.name}: {fault.msg}"
MigrationResourceWarningEvent.fullFormat                          = "Migration of {vm.name} from {host.name} to {dstHost.name} and resource pool {dstPool.name} in {datacenter.name}: {fault.msg}"
#args
MigrationResourceWarningEvent.dstHost.label = "Destination host ID"
MigrationResourceWarningEvent.dstHost.summary = "Destination host ID"
MigrationResourceWarningEvent.dstHost.name.label = "Destination host name"
MigrationResourceWarningEvent.dstHost.name.summary = "Destination host"
MigrationResourceWarningEvent.dstPool.label = "Destination resource pool ID"
MigrationResourceWarningEvent.dstPool.summary = "Destination resource pool ID"
MigrationResourceWarningEvent.dstPool.name.label = "Destination resource pool name"
MigrationResourceWarningEvent.dstPool.name.summary = "Destination resource pool"

###
MigrationResourceErrorEvent.category                              = "error"
MigrationResourceErrorEvent.description                           = "Migration resource error"
MigrationResourceErrorEvent.formatOnComputeResource               = "Unable to migrate {vm.name} to {dstHost.name} and resource pool {dstPool.name}: {fault.msg}"
MigrationResourceErrorEvent.formatOnDatacenter                    = "Unable to migrate {vm.name} from {host.name} to {dstHost.name} and resource pool {dstPool.name}: {fault.msg}"
MigrationResourceErrorEvent.formatOnHost                          = "Unable to migrate {vm.name} to {dstHost.name} and resource pool {dstPool.name}: {fault.msg}"
MigrationResourceErrorEvent.formatOnVm                            = "Unable to migrate from {host.name} to {dstHost.name} and resource pool {dstPool.name}: {fault.msg}"
MigrationResourceErrorEvent.fullFormat                            = "Cannot migrate {vm.name} from {host.name} to {dstHost.name} and resource pool {dstPool.name} in {datacenter.name}: {fault.msg}"
#args
MigrationResourceErrorEvent.dstHost.label = "Destination host ID"
MigrationResourceErrorEvent.dstHost.summary = "Destination host ID"
MigrationResourceErrorEvent.dstHost.name.label = "Destination host name"
MigrationResourceErrorEvent.dstHost.name.summary = "Destination host"
MigrationResourceErrorEvent.dstPool.label = "Destination resource pool ID"
MigrationResourceErrorEvent.dstPool.summary = "Destination resource pool ID"
MigrationResourceErrorEvent.dstPool.name.label = "Destination resource pool name"
MigrationResourceErrorEvent.dstPool.name.summary = "Destination resource pool"

###
GeneralEvent.category                                             = "info"
GeneralEvent.description                                          = "General event"
GeneralEvent.formatOnComputeResource                              = ""
GeneralEvent.formatOnDatacenter                                   = ""
GeneralEvent.formatOnHost                                         = ""
GeneralEvent.formatOnVm                                           = ""
GeneralEvent.fullFormat                                           = "General event: {message}"
#args
GeneralEvent.message.label = "Destination resource pool name"
GeneralEvent.message.summary = "Additional message for the event"

###
AlarmCreatedEvent.category                                        = "info"
AlarmCreatedEvent.description                                     = "Alarm created"
AlarmCreatedEvent.formatOnComputeResource                         = "Created alarm '{alarm.name}' on {entity.name}"
AlarmCreatedEvent.formatOnDatacenter                              = "Created alarm '{alarm.name}' on {entity.name}"
AlarmCreatedEvent.formatOnHost                                    = "Created alarm '{alarm.name}' on {entity.name}"
AlarmCreatedEvent.formatOnVm                                      = "Created alarm '{alarm.name}'"
AlarmCreatedEvent.fullFormat                                      = "Created alarm '{alarm.name}' on {entity.name}"
#args
AlarmCreatedEvent.entity.label = "Entity ID"
AlarmCreatedEvent.entity.summary = "Alarm entity ID"
AlarmCreatedEvent.entity.name.label = "Entity name"
AlarmCreatedEvent.entity.name.summary = "Name of the alarm entity"

###
AlarmEmailCompletedEvent.category                                 = "info"
AlarmEmailCompletedEvent.description                              = "Alarm email sent"
AlarmEmailCompletedEvent.formatOnComputeResource                  = "Alarm '{alarm.name}' on {entity.name} sent email to {to}"
AlarmEmailCompletedEvent.formatOnDatacenter                       = "Alarm '{alarm.name}' on {entity.name} sent email to {to}"
AlarmEmailCompletedEvent.formatOnHost                             = "Alarm '{alarm.name}' on {entity.name} sent email to {to}"
AlarmEmailCompletedEvent.formatOnVm                               = "Alarm '{alarm.name}' sent email to {to}"
AlarmEmailCompletedEvent.fullFormat                               = "Alarm '{alarm.name}' on {entity.name} sent email to {to}"
#args
AlarmEmailCompletedEvent.entity.label = "Changed entity ID"
AlarmEmailCompletedEvent.entity.summary = "Changed entity ID for the alarm"
AlarmEmailCompletedEvent.entity.name.label = "Changed entity name"
AlarmEmailCompletedEvent.entity.name.summary = "Name of the changed entity for the alarm"
AlarmEmailCompletedEvent.to.label = "To address"
AlarmEmailCompletedEvent.to.summary = "To address"

###
AlarmEmailFailedEvent.category                                    = "error"
AlarmEmailFailedEvent.description                                 = "Cannot send alarm email"
AlarmEmailFailedEvent.formatOnComputeResource                     = "Alarm '{alarm.name}' on {entity.name} cannot send email to {to}"
AlarmEmailFailedEvent.formatOnDatacenter                          = "Alarm '{alarm.name}' on {entity.name} cannot send email to {to}"
AlarmEmailFailedEvent.formatOnHost                                = "Alarm '{alarm.name}' on {entity.name} cannot send email to {to}"
AlarmEmailFailedEvent.formatOnVm                                  = "Alarm '{alarm.name}' cannot send email to {to}"
AlarmEmailFailedEvent.fullFormat                                  = "Alarm '{alarm.name}' on {entity.name} cannot send email to {to}"
#args
AlarmEmailFailedEvent.entity.label = "Changed entity ID"
AlarmEmailFailedEvent.entity.summary = "Changed entity ID for the alarm"
AlarmEmailFailedEvent.entity.name.label = "Changed entity name"
AlarmEmailFailedEvent.entity.name.summary = "Name of the changed entity for the alarm"
AlarmEmailFailedEvent.to.label = "To address"
AlarmEmailFailedEvent.to.summary = "To address"

###
AlarmReconfiguredEvent.category                                   = "info"
AlarmReconfiguredEvent.description                                = "Alarm reconfigured"
AlarmReconfiguredEvent.formatOnComputeResource                    = "Reconfigured alarm '{alarm.name}' on {entity.name}"
AlarmReconfiguredEvent.formatOnDatacenter                         = "Reconfigured alarm '{alarm.name}' on {entity.name}"
AlarmReconfiguredEvent.formatOnHost                               = "Reconfigured alarm '{alarm.name}' on {entity.name}"
AlarmReconfiguredEvent.formatOnVm                                 = "Reconfigured alarm '{alarm.name}'"
AlarmReconfiguredEvent.fullFormat                                 = "Reconfigured alarm '{alarm.name}' on {entity.name}"
#args
AlarmReconfiguredEvent.entity.label = "Changed entity ID"
AlarmReconfiguredEvent.entity.summary = "Changed entity ID for the alarm"
AlarmReconfiguredEvent.entity.name.label = "Changed entity name"
AlarmReconfiguredEvent.entity.name.summary = "Name of the changed entity for the alarm"

###
AlarmRemovedEvent.category                                        = "info"
AlarmRemovedEvent.description                                     = "Alarm removed"
AlarmRemovedEvent.formatOnComputeResource                         = "Removed alarm '{alarm.name}' on {entity.name}"
AlarmRemovedEvent.formatOnDatacenter                              = "Removed alarm '{alarm.name}' on {entity.name}"
AlarmRemovedEvent.formatOnHost                                    = "Removed alarm '{alarm.name}' on {entity.name}"
AlarmRemovedEvent.formatOnVm                                      = "Removed alarm '{alarm.name}'"
AlarmRemovedEvent.fullFormat                                      = "Removed alarm '{alarm.name}' on {entity.name}"
#args
AlarmRemovedEvent.entity.label = "Changed entity ID"
AlarmRemovedEvent.entity.summary = "Changed entity ID for the alarm"
AlarmRemovedEvent.entity.name.label = "Changed entity name"
AlarmRemovedEvent.entity.name.summary = "Name of the changed entity for the alarm"

###
AlarmScriptCompleteEvent.category                                 = "info"
AlarmScriptCompleteEvent.description                              = "Alarm script completed"
AlarmScriptCompleteEvent.formatOnComputeResource                  = "Alarm '{alarm.name}' on {entity.name} ran script {script}"
AlarmScriptCompleteEvent.formatOnDatacenter                       = "Alarm '{alarm.name}' on {entity.name} ran script {script}"
AlarmScriptCompleteEvent.formatOnHost                             = "Alarm '{alarm.name}' on {entity.name} ran script {script}"
AlarmScriptCompleteEvent.formatOnVm                               = "Alarm '{alarm.name}' ran script {script}"
AlarmScriptCompleteEvent.fullFormat                               = "Alarm '{alarm.name}' on {entity.name} ran script {script}"
#args
AlarmScriptCompleteEvent.entity.label = "Changed entity ID"
AlarmScriptCompleteEvent.entity.summary = "Changed entity ID for the alarm"
AlarmScriptCompleteEvent.entity.name.label = "Changed entity name"
AlarmScriptCompleteEvent.entity.name.summary = "Name of the changed entity for the alarm"
AlarmScriptCompleteEvent.script.label = "Script"
AlarmScriptCompleteEvent.script.summary = "Completed script"

###
AlarmScriptFailedEvent.category                                   = "error"
AlarmScriptFailedEvent.description                                = "Alarm script not completed"
AlarmScriptFailedEvent.formatOnComputeResource                    = "Alarm '{alarm.name}' on {entity.name} did not complete script: {reason.msg}"
AlarmScriptFailedEvent.formatOnDatacenter                         = "Alarm '{alarm.name}' on {entity.name} did not complete script: {reason.msg}"
AlarmScriptFailedEvent.formatOnHost                               = "Alarm '{alarm.name}' on {entity.name} did not complete script: {reason.msg}"
AlarmScriptFailedEvent.formatOnVm                                 = "Alarm '{alarm.name}' did not complete script: {reason.msg}"
AlarmScriptFailedEvent.fullFormat                                 = "Alarm '{alarm.name}' on {entity.name} did not complete script: {reason.msg}"
#args
AlarmScriptFailedEvent.entity.label = "Changed entity ID"
AlarmScriptFailedEvent.entity.summary = "Changed entity ID for the alarm"
AlarmScriptFailedEvent.entity.name.label = "Changed entity name"
AlarmScriptFailedEvent.entity.name.summary = "Name of the changed entity for the alarm"
AlarmScriptFailedEvent.script.label = "Script"
AlarmScriptFailedEvent.script.summary = "Script not completed"

###
AlarmSnmpCompletedEvent.category                                  = "info"
AlarmSnmpCompletedEvent.description                               = "Alarm SNMP trap sent"
AlarmSnmpCompletedEvent.formatOnComputeResource                   = "Alarm '{alarm.name}' on entity {entity.name} send SNMP trap"
AlarmSnmpCompletedEvent.formatOnDatacenter                        = "Alarm '{alarm.name}' on entity {entity.name} send SNMP trap"
AlarmSnmpCompletedEvent.formatOnHost                              = "Alarm '{alarm.name}' on entity {entity.name} send SNMP trap"
AlarmSnmpCompletedEvent.formatOnVm                                = "Alarm '{alarm.name}' on send SNMP trap"
AlarmSnmpCompletedEvent.fullFormat                                = "Alarm '{alarm.name}' on entity {entity.name} send SNMP trap"
#args
AlarmSnmpCompletedEvent.entity.label = "Changed entity ID"
AlarmSnmpCompletedEvent.entity.summary = "Changed entity ID for the alarm"
AlarmSnmpCompletedEvent.entity.name.label = "Changed entity name"
AlarmSnmpCompletedEvent.entity.name.summary = "Name of the changed entity for the alarm"

###
AlarmSnmpFailedEvent.category                                     = "error"
AlarmSnmpFailedEvent.description                                  = "Alarm SNMP trap not sent"
AlarmSnmpFailedEvent.formatOnComputeResource                      = "Alarm '{alarm.name}' on entity {entity.name} did not send SNMP trap: {reason.msg}"
AlarmSnmpFailedEvent.formatOnDatacenter                           = "Alarm '{alarm.name}' on entity {entity.name} did not send SNMP trap: {reason.msg}"
AlarmSnmpFailedEvent.formatOnHost                                 = "Alarm '{alarm.name}' on entity {entity.name} did not send SNMP trap: {reason.msg}"
AlarmSnmpFailedEvent.formatOnVm                                   = "Alarm '{alarm.name}' did not send SNMP trap: {reason.msg}"
AlarmSnmpFailedEvent.fullFormat                                   = "Alarm '{alarm.name}' on entity {entity.name} did not send SNMP trap: {reason.msg}"
#args
AlarmSnmpFailedEvent.entity.label = "Changed entity ID"
AlarmSnmpFailedEvent.entity.summary = "Changed entity ID for the alarm"
AlarmSnmpFailedEvent.entity.name.label = "Changed entity name"
AlarmSnmpFailedEvent.entity.name.summary = "Name of the changed entity for the alarm"

###
AlarmStatusChangedEvent.category                                  = "info"
AlarmStatusChangedEvent.description                               = "Alarm status changed"
AlarmStatusChangedEvent.formatOnComputeResource                   = "Alarm '{alarm.name}' on {entity.name} changed from {from.@enum.ManagedEntity.Status} to {to.@enum.ManagedEntity.Status}"
AlarmStatusChangedEvent.formatOnDatacenter                        = "Alarm '{alarm.name}' on {entity.name} changed from {from.@enum.ManagedEntity.Status} to {to.@enum.ManagedEntity.Status}"
AlarmStatusChangedEvent.formatOnHost                              = "Alarm '{alarm.name}' on {entity.name} changed from {from.@enum.ManagedEntity.Status} to {to.@enum.ManagedEntity.Status}"
AlarmStatusChangedEvent.formatOnVm                                = "Alarm '{alarm.name}' changed from {from.@enum.ManagedEntity.Status} to {to.@enum.ManagedEntity.Status}"
AlarmStatusChangedEvent.fullFormat                                = "Alarm '{alarm.name}' on {entity.name} changed from {from.@enum.ManagedEntity.Status} to {to.@enum.ManagedEntity.Status}"
#args
AlarmStatusChangedEvent.entity.label = "Changed entity ID"
AlarmStatusChangedEvent.entity.summary = "Changed entity ID for the alarm"
AlarmStatusChangedEvent.entity.name.label = "Changed entity name"
AlarmStatusChangedEvent.entity.name.summary = "Name of the changed entity for the alarm"
AlarmStatusChangedEvent.source.label = "Source entity ID"
AlarmStatusChangedEvent.source.summary = "Registered entity ID for the alarm"
AlarmStatusChangedEvent.source.name.label = "Source entity name"
AlarmStatusChangedEvent.source.name.summary = "Name of the registered entity for the alarm"
AlarmStatusChangedEvent.from.label = "Previous status"
AlarmStatusChangedEvent.from.summary = "Previous status"
AlarmStatusChangedEvent.to.label = "New status"
AlarmStatusChangedEvent.to.summary = "New status"

###
BadUsernameSessionEvent.category                                  = "error"
BadUsernameSessionEvent.description                               = "Invalid user name"
BadUsernameSessionEvent.formatOnComputeResource                   = ""
BadUsernameSessionEvent.formatOnDatacenter                        = ""
BadUsernameSessionEvent.formatOnHost                              = ""
BadUsernameSessionEvent.formatOnVm                                = ""
BadUsernameSessionEvent.fullFormat                                = "Cannot login {userName}@{ipAddress}"
#args
BadUsernameSessionEvent.ipAddress.label = "IP address"
BadUsernameSessionEvent.ipAddress.summary = "IP address of the login attempt"

###
DatastoreDuplicatedEvent.category                                 = "error"
DatastoreDuplicatedEvent.description                              = "Datastore duplicated"
DatastoreDuplicatedEvent.formatOnComputeResource                  = "Multiple datastores named {datastore} detected on host {host.name}"
DatastoreDuplicatedEvent.formatOnDatacenter                       = "Multiple datastores named {datastore} detected on host {host.name}"
DatastoreDuplicatedEvent.formatOnHost                             = "Multiple datastores named {datastore} detected"
DatastoreDuplicatedEvent.formatOnVm                               = ""
DatastoreDuplicatedEvent.fullFormat                               = "Multiple datastores named {datastore} detected on host {host.name} in {datacenter.name}"
###
ErrorUpgradeEvent.category                                        = "error"
ErrorUpgradeEvent.description                                     = "Upgrade error"
ErrorUpgradeEvent.formatOnComputeResource                         = ""
ErrorUpgradeEvent.formatOnDatacenter                              = ""
ErrorUpgradeEvent.formatOnHost                                    = ""
ErrorUpgradeEvent.formatOnVm                                      = ""
ErrorUpgradeEvent.fullFormat                                      = "{message}"
###
GeneralHostErrorEvent.category                                    = "error"
GeneralHostErrorEvent.description                                 = "Host error"
GeneralHostErrorEvent.formatOnComputeResource                     = "Error detected on {host.name}: {message}"
GeneralHostErrorEvent.formatOnDatacenter                          = "Error detected on {host.name}: {message}"
GeneralHostErrorEvent.formatOnHost                                = "{message}"
GeneralHostErrorEvent.formatOnVm                                  = ""
GeneralHostErrorEvent.fullFormat                                  = "Error detected on {host.name} in {datacenter.name}: {message}"
###
GeneralHostInfoEvent.category                                     = "info"
GeneralHostInfoEvent.description                                  = "Host information"
GeneralHostInfoEvent.formatOnComputeResource                      = "Issue detected on {host.name}: {message}"
GeneralHostInfoEvent.formatOnDatacenter                           = "Issue detected on {host.name}: {message}"
GeneralHostInfoEvent.formatOnHost                                 = "{message}"
GeneralHostInfoEvent.formatOnVm                                   = ""
GeneralHostInfoEvent.fullFormat                                   = "Issue detected on {host.name} in {datacenter.name}: {message}"
###                                                               
GeneralHostWarningEvent.category                                  = "warning"
GeneralHostWarningEvent.description                               = "Host warning"
GeneralHostWarningEvent.formatOnComputeResource                   = "Issue detected on {host.name}: {message}"
GeneralHostWarningEvent.formatOnDatacenter                        = "Issue detected on {host.name}: {message}"
GeneralHostWarningEvent.formatOnHost                              = "{message}"
GeneralHostWarningEvent.formatOnVm                                = ""
GeneralHostWarningEvent.fullFormat                                = "Issue detected on {host.name} in {datacenter.name}: {message}"
###
GeneralUserEvent.category                                         = "user"
GeneralUserEvent.description                                      = "User event"
GeneralUserEvent.formatOnComputeResource                          = ""
GeneralUserEvent.formatOnDatacenter                               = ""
GeneralUserEvent.formatOnHost                                     = ""
GeneralUserEvent.formatOnVm                                       = ""
GeneralUserEvent.fullFormat                                       = "User logged event: {message}"
#args
GeneralUserEvent.entity.label = "Entity ID"
GeneralUserEvent.entity.summary = "Entity ID for the event"
GeneralUserEvent.entity.name.label = "Entity name"
GeneralUserEvent.entity.name.summary = "Entity name for the event"

###
GeneralVmErrorEvent.category                                      = "error"
GeneralVmErrorEvent.description                                   = "VM error"
GeneralVmErrorEvent.formatOnComputeResource                       = "Error detected for {vm.name} on {host.name} in {datacenter.name}: {message}"
GeneralVmErrorEvent.formatOnDatacenter                            = "Error detected for {vm.name} on {host.name} in {datacenter.name}: {message}"
GeneralVmErrorEvent.formatOnHost                                  = "Error detected for {vm.name}: {message}"
GeneralVmErrorEvent.formatOnVm                                    = "{message} on {host.name}"
GeneralVmErrorEvent.fullFormat                                    = "Error detected for {vm.name} on {host.name} in {datacenter.name}: {message}"
###
GeneralVmInfoEvent.category                                       = "info"
GeneralVmInfoEvent.description                                    = "VM information"
GeneralVmInfoEvent.formatOnComputeResource                        = "Issue detected for {vm.name} on {host.name} in {datacenter.name}: {message}"
GeneralVmInfoEvent.formatOnDatacenter                             = "Issue detected for {vm.name} on {host.name} in {datacenter.name}: {message}"
GeneralVmInfoEvent.formatOnHost                                   = "Issue detected for {vm.name}: {message}"
GeneralVmInfoEvent.formatOnVm                                     = "{message} on {host.name}"
GeneralVmInfoEvent.fullFormat                                     = "Issue detected for {vm.name} on {host.name} in {datacenter.name}: {message}"
###
GeneralVmWarningEvent.category                                    = "warning"
GeneralVmWarningEvent.description                                 = "VM warning"
GeneralVmWarningEvent.formatOnComputeResource                     = "Issue detected for {vm.name} on {host.name} in {datacenter.name}: {message}"
GeneralVmWarningEvent.formatOnDatacenter                          = "Issue detected for {vm.name} on {host.name} in {datacenter.name}: {message}"
GeneralVmWarningEvent.formatOnHost                                = "Issue detected for {vm.name}: {message}"
GeneralVmWarningEvent.formatOnVm                                  = "{message} on {host.name}"
GeneralVmWarningEvent.fullFormat                                  = "Issue detected for {vm.name} on {host.name} in {datacenter.name}: {message}"
###
HostCnxFailedAccountFailedEvent.category                          = "error"
HostCnxFailedAccountFailedEvent.description                       = "Cannot connect host and configure management account"
HostCnxFailedAccountFailedEvent.formatOnComputeResource           = "Cannot connect {host.name}: cannot configure management account"
HostCnxFailedAccountFailedEvent.formatOnDatacenter                = "Cannot connect {host.name}: cannot configure management account"
HostCnxFailedAccountFailedEvent.formatOnHost                      = "Cannot connect: cannot configure management account"
HostCnxFailedAccountFailedEvent.formatOnVm                        = ""
HostCnxFailedAccountFailedEvent.fullFormat                        = "Cannot connect {host.name} in {datacenter.name}: cannot configure management account"
###
HostCnxFailedAlreadyManagedEvent.category                         = "error"
HostCnxFailedAlreadyManagedEvent.description                      = "Cannot connect host - already managed"
HostCnxFailedAlreadyManagedEvent.formatOnComputeResource          = "Cannot connect {host.name}: already managed by {serverName}"
HostCnxFailedAlreadyManagedEvent.formatOnDatacenter               = "Cannot connect {host.name}: already managed by {serverName}"
HostCnxFailedAlreadyManagedEvent.formatOnHost                     = "Cannot connect: already managed by {serverName}"
HostCnxFailedAlreadyManagedEvent.formatOnVm                       = ""
HostCnxFailedAlreadyManagedEvent.fullFormat                       = "Cannot connect {host.name} in {datacenter.name}: already managed by {serverName}"
#args
HostCnxFailedAlreadyManagedEvent.serverName.label = "Server name"
HostCnxFailedAlreadyManagedEvent.serverName.summary = "Name of the currently managing server"

###
HostCnxFailedBadCcagentEvent.category                             = "error"
HostCnxFailedBadCcagentEvent.description                          = "Cannot connect host -  incorrect Ccagent"
HostCnxFailedBadCcagentEvent.formatOnComputeResource              = "Cannot connect {host.name} : server agent is not responding"
HostCnxFailedBadCcagentEvent.formatOnDatacenter                   = "Cannot connect {host.name} : server agent is not responding"
HostCnxFailedBadCcagentEvent.formatOnHost                         = "Cannot connect: server agent is not responding"
HostCnxFailedBadCcagentEvent.formatOnVm                           = ""
HostCnxFailedBadCcagentEvent.fullFormat                           = "Cannot connect host {host.name} in {datacenter.name} : server agent is not responding"
###
HostCnxFailedBadUsernameEvent.category                            = "error"
HostCnxFailedBadUsernameEvent.description                         = "Cannot connect host - incorrect user name"
HostCnxFailedBadUsernameEvent.formatOnComputeResource             = "Cannot connect {host.name}: incorrect user name or password"
HostCnxFailedBadUsernameEvent.formatOnDatacenter                  = "Cannot connect {host.name}: incorrect user name or password"
HostCnxFailedBadUsernameEvent.formatOnHost                        = "Cannot connect: incorrect user name or password"
HostCnxFailedBadUsernameEvent.formatOnVm                          = ""
HostCnxFailedBadUsernameEvent.fullFormat                          = "Cannot connect {host.name} in {datacenter.name}: incorrect user name or password"
###
HostCnxFailedBadVersionEvent.category                             = "error"
HostCnxFailedBadVersionEvent.description                          = "Cannot connect host - incompatible version"     
HostCnxFailedBadVersionEvent.formatOnComputeResource              = "Cannot connect {host.name}: incompatible version"
HostCnxFailedBadVersionEvent.formatOnDatacenter                   = "Cannot connect {host.name}: incompatible version"
HostCnxFailedBadVersionEvent.formatOnHost                         = "Cannot connect: incompatible version"
HostCnxFailedBadVersionEvent.formatOnVm                           = ""
HostCnxFailedBadVersionEvent.fullFormat                           = "Cannot connect {host.name} in {datacenter.name}: incompatible version"
###
HostCnxFailedCcagentUpgradeEvent.category                         = "error"
HostCnxFailedCcagentUpgradeEvent.description                      = "Cannot connect host - Ccagent upgrade"
HostCnxFailedCcagentUpgradeEvent.formatOnComputeResource          = "Cannot connect host {host.name}: did not install or upgrade vCenter agent service"
HostCnxFailedCcagentUpgradeEvent.formatOnDatacenter               = "Cannot connect host {host.name}: did not install or upgrade vCenter agent service"
HostCnxFailedCcagentUpgradeEvent.formatOnHost                     = "Cannot connect: did not install or upgrade vCenter agent service"
HostCnxFailedCcagentUpgradeEvent.formatOnVm                       = ""
HostCnxFailedCcagentUpgradeEvent.fullFormat                       = "Cannot connect host {host.name} in {datacenter.name}. Did not install or upgrade vCenter agent service."
###
HostCnxFailedEvent.category                                       = "error"
HostCnxFailedEvent.description                                    = "Cannot connect host"
HostCnxFailedEvent.formatOnComputeResource                        = "Cannot connect host {host.name}: error connecting to host"
HostCnxFailedEvent.formatOnDatacenter                             = "Cannot connect host {host.name}: error connecting to host"
HostCnxFailedEvent.formatOnHost                                   = "Cannot connect: error connecting to host"
HostCnxFailedEvent.formatOnVm                                     = ""
HostCnxFailedEvent.fullFormat                                     = "Cannot connect {host.name} in {datacenter.name}: error connecting to host"
###
HostCnxFailedNetworkErrorEvent.category                           = "error"
HostCnxFailedNetworkErrorEvent.description                        = "Cannot connect host - network error"
HostCnxFailedNetworkErrorEvent.formatOnComputeResource            = "Cannot connect {host.name}: network error"
HostCnxFailedNetworkErrorEvent.formatOnDatacenter                 = "Cannot connect {host.name}: network error"
HostCnxFailedNetworkErrorEvent.formatOnHost                       = "Cannot connect: network error"
HostCnxFailedNetworkErrorEvent.formatOnVm                         = ""
HostCnxFailedNetworkErrorEvent.fullFormat                         = "Cannot connect {host.name} in {datacenter.name}: network error"
###
HostCnxFailedNoAccessEvent.category                               = "error"
HostCnxFailedNoAccessEvent.description                            = "Cannot connect host - no access"
HostCnxFailedNoAccessEvent.formatOnComputeResource                = "Cannot connect {host.name}: account has insufficient privileges"
HostCnxFailedNoAccessEvent.formatOnDatacenter                     = "Cannot connect {host.name}: account has insufficient privileges"
HostCnxFailedNoAccessEvent.formatOnHost                           = "Cannot connect: account has insufficient privileges"
HostCnxFailedNoAccessEvent.formatOnVm                             = ""
HostCnxFailedNoAccessEvent.fullFormat                             = "Cannot connect host {host.name} in {datacenter.name}: account has insufficient privileges"
###
HostCnxFailedNoConnectionEvent.category                           = "error"
HostCnxFailedNoConnectionEvent.description                        = "Cannot connect host - no connection"
HostCnxFailedNoConnectionEvent.formatOnComputeResource            = "Cannot connect {host.name}"
HostCnxFailedNoConnectionEvent.formatOnDatacenter                 = "Cannot connect {host.name}"
HostCnxFailedNoConnectionEvent.formatOnHost                       = "Cannot connect to host"
HostCnxFailedNoConnectionEvent.formatOnVm                         = ""
HostCnxFailedNoConnectionEvent.fullFormat                         = "Cannot connect host {host.name} in {datacenter.name}"
###
HostCnxFailedNoLicenseEvent.category                              = "error"
HostCnxFailedNoLicenseEvent.description                           = "Cannot connect host - no license"
HostCnxFailedNoLicenseEvent.formatOnComputeResource               = "Cannot connect {host.name}: not enough CPU licenses"
HostCnxFailedNoLicenseEvent.formatOnDatacenter                    = "Cannot connect {host.name}: not enough CPU licenses"
HostCnxFailedNoLicenseEvent.formatOnHost                          = "Cannot connect: not enough CPU licenses"
HostCnxFailedNoLicenseEvent.formatOnVm                            = ""
HostCnxFailedNoLicenseEvent.fullFormat                            = "Cannot connect {host.name} in {datacenter.name}: not enough CPU licenses"
###
HostCnxFailedNotFoundEvent.category                               = "error"
HostCnxFailedNotFoundEvent.description                            = "Cannot connect host - host not found"
HostCnxFailedNotFoundEvent.formatOnComputeResource                = "Cannot connect {host.name}: incorrect host name"
HostCnxFailedNotFoundEvent.formatOnDatacenter                     = "Cannot connect {host.name}: incorrect host name"
HostCnxFailedNotFoundEvent.formatOnHost                           = "Cannot connect: incorrect host name"
HostCnxFailedNotFoundEvent.formatOnVm                             = ""
HostCnxFailedNotFoundEvent.fullFormat                             = "Cannot connect {host.name} in {datacenter.name}: incorrect host name"
###
HostCnxFailedTimeoutEvent.category                                = "error"
HostCnxFailedTimeoutEvent.description                             = "Cannot connect host - time-out"
HostCnxFailedTimeoutEvent.formatOnComputeResource                 = "Cannot connect {host.name}: time-out waiting for host response"
HostCnxFailedTimeoutEvent.formatOnDatacenter                      = "Cannot connect {host.name}: time-out waiting for host response"
HostCnxFailedTimeoutEvent.formatOnHost                            = "Cannot connect: time-out waiting for host response"
HostCnxFailedTimeoutEvent.formatOnVm                              = ""
HostCnxFailedTimeoutEvent.fullFormat                              = "Cannot connect {host.name} in {datacenter.name}: time-out waiting for host response"
###
HostConnectedEvent.category                                       = "info"
HostConnectedEvent.description                                    = "Host connected"
HostConnectedEvent.formatOnComputeResource                        = "Connected to {host.name}"
HostConnectedEvent.formatOnDatacenter                             = "Connected to {host.name}"
HostConnectedEvent.formatOnHost                                   = "Established a connection"
HostConnectedEvent.formatOnVm                                     = ""
HostConnectedEvent.fullFormat                                     = "Connected to {host.name} in {datacenter.name}"
###
HostConnectionLostEvent.category                                  = "error"
HostConnectionLostEvent.description                               = "Host connection lost"
HostConnectionLostEvent.formatOnComputeResource                   = "Host {host.name} is not responding"
HostConnectionLostEvent.formatOnDatacenter                        = "Host {host.name} is not responding"
HostConnectionLostEvent.formatOnHost                              = "Host is not responding"
HostConnectionLostEvent.formatOnVm                                = ""
HostConnectionLostEvent.fullFormat                                = "Host {host.name} in {datacenter.name} is not responding"
###
#args
HostDisconnectedEvent.reason.label = "Reason"
HostDisconnectedEvent.reason.summary = "Reason for disconnection"
HostDisconnectedEvent.category                                    = "info"
HostDisconnectedEvent.description                                 = "Host disconnected"
HostDisconnectedEvent.formatOnComputeResource                     = "Disconnected from {host.name}. Reason: {reason.@enum.HostDisconnectedEvent.ReasonCode}"
HostDisconnectedEvent.formatOnDatacenter                          = "Disconnected from {host.name}. Reason: {reason.@enum.HostDisconnectedEvent.ReasonCode}"
HostDisconnectedEvent.formatOnHost                                = "Disconnected from host. Reason: {reason.@enum.HostDisconnectedEvent.ReasonCode}"
HostDisconnectedEvent.formatOnVm                                  = ""
HostDisconnectedEvent.fullFormat                                  = "Disconnected from {host.name} in {datacenter.name}. Reason: {reason.@enum.HostDisconnectedEvent.ReasonCode}"
###
HostSyncFailedEvent.category                  = "error"
HostSyncFailedEvent.description               = "Cannot synchronize host"
HostSyncFailedEvent.formatOnComputeResource   = "Cannot synchronize host {host.name}. {reason.msg}"
HostSyncFailedEvent.formatOnDatacenter        = "Cannot synchronize host {host.name}. {reason.msg}"
HostSyncFailedEvent.formatOnHost              = "Cannot synchronize host {host.name}. {reason.msg}"
HostSyncFailedEvent.formatOnVm                = ""
HostSyncFailedEvent.fullFormat                = "Cannot synchronize host {host.name}. {reason.msg}"
###
HostReconnectionFailedEvent.category                              = "error"
HostReconnectionFailedEvent.description                           = "Cannot reconnect host"
HostReconnectionFailedEvent.formatOnComputeResource               = "Cannot reconnect to {host.name}"
HostReconnectionFailedEvent.formatOnDatacenter                    = "Cannot reconnect to {host.name}"
HostReconnectionFailedEvent.formatOnHost                          = "Cannot reconnect"
HostReconnectionFailedEvent.formatOnVm                            = ""
HostReconnectionFailedEvent.fullFormat                            = "Cannot reconnect to {host.name} in {datacenter.name}"
###
HostRemovedEvent.category                                         = "info"
HostRemovedEvent.description                                      = "Host removed"
HostRemovedEvent.formatOnComputeResource                          = "Removed host {host.name}"
HostRemovedEvent.formatOnDatacenter                               = "Removed host {host.name}"
HostRemovedEvent.formatOnHost                                     = "Removed from inventory"
HostRemovedEvent.formatOnVm                                       = ""
HostRemovedEvent.fullFormat                                       = "Removed host {host.name} in {datacenter.name}"
###
HostShutdownEvent.category                                        = "info"
HostShutdownEvent.description                                     = "Host shut down"
HostShutdownEvent.formatOnComputeResource                         = "Shut down of {host.name}: {reason}"
HostShutdownEvent.formatOnDatacenter                              = "Shut down of {host.name}: {reason}"
HostShutdownEvent.formatOnHost                                    = "Shut down of host: {reason}"
HostShutdownEvent.formatOnVm                                      = ""
HostShutdownEvent.fullFormat                                      = "Shut down of {host.name} in {datacenter.name}: {reason}"
#args
HostShutdownEvent.reason.label = "Reason"
HostShutdownEvent.reason.summary = "Reason for the shut down"

###
InfoUpgradeEvent.category                                         = "info"
InfoUpgradeEvent.description                                      = "Information upgrade"
InfoUpgradeEvent.formatOnComputeResource                          = ""
InfoUpgradeEvent.formatOnDatacenter                               = ""
InfoUpgradeEvent.formatOnHost                                     = ""
InfoUpgradeEvent.formatOnVm                                       = ""
InfoUpgradeEvent.fullFormat                                       = "{message}"
###
NoAccessUserEvent.category                                        = "error"
NoAccessUserEvent.description                                     = "No access for user"
NoAccessUserEvent.formatOnComputeResource                         = ""
NoAccessUserEvent.formatOnDatacenter                              = ""
NoAccessUserEvent.formatOnHost                                    = ""
NoAccessUserEvent.formatOnVm                                      = ""
NoAccessUserEvent.fullFormat                                      = "Cannot login user {userName}@{ipAddress}: no permission"
#args
NoAccessUserEvent.ipAddress.label = "IP address"
NoAccessUserEvent.ipAddress.summary = "IP address of the login attempt"

###
ScheduledTaskCompletedEvent.category                              = "info"
ScheduledTaskCompletedEvent.description                           = "Scheduled task completed"
ScheduledTaskCompletedEvent.formatOnComputeResource               = "Task {scheduledTask.name} on {entity.name} completed successfully"
ScheduledTaskCompletedEvent.formatOnDatacenter                    = "Task {scheduledTask.name} on {entity.name} completed successfully"
ScheduledTaskCompletedEvent.formatOnHost                          = "Task {scheduledTask.name} on {entity.name} completed successfully"
ScheduledTaskCompletedEvent.formatOnVm                            = "Task {scheduledTask.name} completed successfully"
ScheduledTaskCompletedEvent.fullFormat                            = "Task {scheduledTask.name} on {entity.name} in {datacenter.name} completed successfully"
##
ScheduledTaskCreatedEvent.category                                = "info"
ScheduledTaskCreatedEvent.description                             = "Scheduled task created"
ScheduledTaskCreatedEvent.formatOnComputeResource                 = "Created task {scheduledTask.name} on {entity.name}"
ScheduledTaskCreatedEvent.formatOnDatacenter                      = "Created task {scheduledTask.name} on {entity.name}"
ScheduledTaskCreatedEvent.formatOnHost                            = "Created task {scheduledTask.name} on {entity.name}"
ScheduledTaskCreatedEvent.formatOnVm                              = "Created task {scheduledTask.name}"
ScheduledTaskCreatedEvent.fullFormat                              = "Created task {scheduledTask.name} on {entity.name} in {datacenter.name}"
###
ScheduledTaskEmailCompletedEvent.category                         = "info"
ScheduledTaskEmailCompletedEvent.description                      = "Sent scheduled task email"
ScheduledTaskEmailCompletedEvent.formatOnComputeResource          = "Task {scheduledTask.name} on {entity.name} sent email to {to}"
ScheduledTaskEmailCompletedEvent.formatOnDatacenter               = "Task {scheduledTask.name} on {entity.name} sent email to {to}"
ScheduledTaskEmailCompletedEvent.formatOnHost                     = "Task {scheduledTask.name} on {entity.name} sent email to {to}"
ScheduledTaskEmailCompletedEvent.formatOnVm                       = "Task {scheduledTask.name} on {entity.name} sent email to {to}"
ScheduledTaskEmailCompletedEvent.fullFormat                       = "Task {scheduledTask.name} on {entity.name} in {datacenter.name} sent email to {to}"
#args
ScheduledTaskEmailCompletedEvent.to.label = "To"
ScheduledTaskEmailCompletedEvent.to.summary = "To address"

###
ScheduledTaskEmailFailedEvent.category                            = "error"
ScheduledTaskEmailFailedEvent.description                         = "Scheduled task email not sent"
ScheduledTaskEmailFailedEvent.formatOnComputeResource             = "Task {scheduledTask.name} on {entity.name} cannot send email to {to}: {reason.msg}"
ScheduledTaskEmailFailedEvent.formatOnDatacenter                  = "Task {scheduledTask.name} on {entity.name} cannot send email to {to}: {reason.msg}"
ScheduledTaskEmailFailedEvent.formatOnHost                        = "Task {scheduledTask.name} on {entity.name} cannot send email to {to}: {reason.msg}"
ScheduledTaskEmailFailedEvent.formatOnVm                          = "Task {scheduledTask.name} cannot send email to {to}: {reason.msg}"
ScheduledTaskEmailFailedEvent.fullFormat                          = "Task {scheduledTask.name} on {entity.name} in {datacenter.name} cannot send email to {to}: {reason.msg}"
#args
ScheduledTaskEmailFailedEvent.to.label = "To"
ScheduledTaskEmailFailedEvent.to.summary = "To address"

###
ScheduledTaskFailedEvent.category                                 = "error"
ScheduledTaskFailedEvent.description                              = "Cannot complete scheduled task"
ScheduledTaskFailedEvent.formatOnComputeResource                  = "Task {scheduledTask.name} on {entity.name} cannot be completed: {reason.msg}"
ScheduledTaskFailedEvent.formatOnDatacenter                       = "Task {scheduledTask.name} on {entity.name} cannot be completed: {reason.msg}"
ScheduledTaskFailedEvent.formatOnHost                             = "Task {scheduledTask.name} on {entity.name} cannot be completed: {reason.msg}"
ScheduledTaskFailedEvent.formatOnVm                               = "Task {scheduledTask.name} cannot be completed: {reason.msg}"
ScheduledTaskFailedEvent.fullFormat                               = "Task {scheduledTask.name} on {entity.name} in {datacenter.name} cannot be completed: {reason.msg}"
###
ScheduledTaskReconfiguredEvent.category                           = "info"
ScheduledTaskReconfiguredEvent.description                        = "Scheduled task reconfigured"
ScheduledTaskReconfiguredEvent.formatOnComputeResource            = "Reconfigured task {scheduledTask.name} on {entity.name}"
ScheduledTaskReconfiguredEvent.formatOnDatacenter                 = "Reconfigured task {scheduledTask.name} on {entity.name}"
ScheduledTaskReconfiguredEvent.formatOnHost                       = "Reconfigured task {scheduledTask.name} on {entity.name}"
ScheduledTaskReconfiguredEvent.formatOnVm                         = "Reconfigured task {scheduledTask.name}"
ScheduledTaskReconfiguredEvent.fullFormat                         = "Reconfigured task {scheduledTask.name} on {entity.name} in {datacenter.name}"
###
ScheduledTaskRemovedEvent.category                                = "info"
ScheduledTaskRemovedEvent.description                             = "Scheduled task removed"
ScheduledTaskRemovedEvent.formatOnComputeResource                 = "Removed task {scheduledTask.name} on {entity.name}"
ScheduledTaskRemovedEvent.formatOnDatacenter                      = "Removed task {scheduledTask.name} on {entity.name}"
ScheduledTaskRemovedEvent.formatOnHost                            = "Removed task {scheduledTask.name} on {entity.name}"
ScheduledTaskRemovedEvent.formatOnVm                              = "Removed task {scheduledTask.name}"
ScheduledTaskRemovedEvent.fullFormat                              = "Removed task {scheduledTask.name} on {entity.name} in {datacenter.name}"
###
ScheduledTaskStartedEvent.category                                = "info"
ScheduledTaskStartedEvent.description                             = "Scheduled task started"
ScheduledTaskStartedEvent.formatOnComputeResource                 = "Running task {scheduledTask.name} on {entity.name}"
ScheduledTaskStartedEvent.formatOnDatacenter                      = "Running task {scheduledTask.name} on {entity.name}"
ScheduledTaskStartedEvent.formatOnHost                            = "Running task {scheduledTask.name} on {entity.name}"
ScheduledTaskStartedEvent.formatOnVm                              = "Running task {scheduledTask.name}"
ScheduledTaskStartedEvent.fullFormat                              = "Running task {scheduledTask.name} on {entity.name} in {datacenter.name}"
###
ServerStartedSessionEvent.category                                = "info"
ServerStartedSessionEvent.description                             = "Server started session"
ServerStartedSessionEvent.formatOnComputeResource                 = ""
ServerStartedSessionEvent.formatOnDatacenter                      = ""
ServerStartedSessionEvent.formatOnHost                            = ""
ServerStartedSessionEvent.formatOnVm                              = ""
ServerStartedSessionEvent.fullFormat                              = "vCenter started"
###
UserLoginSessionEvent.category                                    = "info"
UserLoginSessionEvent.description                                 = "User login"
UserLoginSessionEvent.formatOnComputeResource                     = ""
UserLoginSessionEvent.formatOnDatacenter                          = ""
UserLoginSessionEvent.formatOnHost                                = ""
UserLoginSessionEvent.formatOnVm                                  = ""
UserLoginSessionEvent.fullFormat                                  = "User {userName}@{ipAddress} logged in"
#args
UserLoginSessionEvent.ipAddress.label = "IP address"
UserLoginSessionEvent.ipAddress.summary = "IP address of the new session"
UserLoginSessionEvent.locale.label = "locale"
UserLoginSessionEvent.locale.summary = "locale code of the new session"
UserLoginSessionEvent.sessionId.label = "session ID"
UserLoginSessionEvent.sessionId.summary = "session ID of the new session"

###
UserLogoutSessionEvent.category                                   = "info"
UserLogoutSessionEvent.description                                = "User logout"
UserLogoutSessionEvent.formatOnComputeResource                    = ""
UserLogoutSessionEvent.formatOnDatacenter                         = ""
UserLogoutSessionEvent.formatOnHost                               = ""
UserLogoutSessionEvent.formatOnVm                                 = ""
UserLogoutSessionEvent.fullFormat                                 = "User {userName} logged out"
###
UserUpgradeEvent.category                                         = "user"
UserUpgradeEvent.description                                      = "User upgrade"
UserUpgradeEvent.formatOnComputeResource                          = ""
UserUpgradeEvent.formatOnDatacenter                               = ""
UserUpgradeEvent.formatOnHost                                     = ""
UserUpgradeEvent.formatOnVm                                       = ""
UserUpgradeEvent.fullFormat                                       = "{message}"
###
VmAcquiredMksTicketEvent.category				  = "info"
VmAcquiredMksTicketEvent.description                              = "VM acquired MKS ticket"
VmAcquiredMksTicketEvent.formatOnComputeResource                  = "Remote console to {vm.name} on {host.name} has been opened"
VmAcquiredMksTicketEvent.formatOnDatacenter                       = "Remote console to {vm.name} on {host.name} has been opened"
VmAcquiredMksTicketEvent.formatOnHost                             = "Remote console to {vm.name} has been opened"
VmAcquiredMksTicketEvent.formatOnVm                               = "Remote console has been opened for this virtual machine on {host.name}"
VmAcquiredMksTicketEvent.fullFormat                               = "Remote console to {vm.name} on  {host.name} in {datacenter.name} has been opened"
###
VmAutoRenameEvent.category                                        = "info"
VmAutoRenameEvent.description                                     = "VM auto rename"
VmAutoRenameEvent.formatOnComputeResource                         = "Invalid name for {vm.name} on {host.name}. Renamed from {oldName} to {newName}"
VmAutoRenameEvent.formatOnDatacenter                              = "Invalid name for {vm.name} on {host.name}. Renamed from {oldName} to {newName}"
VmAutoRenameEvent.formatOnHost                                    = "Invalid name for {vm.name}. Renamed from {oldName} to {newName}"
VmAutoRenameEvent.formatOnVm                                      = "Conflicting or invalid virtual machine name detected. Renamed from {oldName} to {newName}"
VmAutoRenameEvent.fullFormat                                      = "Invalid name for {vm.name} on {host.name} in {datacenter.name}. Renamed from {oldName} to {newName}"
#args
VmAutoRenameEvent.newName.label = "new name"
VmAutoRenameEvent.newName.summary = "new name"
VmAutoRenameEvent.oldName.label = "Previous name"
VmAutoRenameEvent.oldName.summary = "Previous name"

###
VmBeingClonedEvent.category                                       = "info"
VmBeingClonedEvent.description                                    = "VM being cloned"
VmBeingClonedEvent.formatOnComputeResource                        = "Cloning {vm.name} on {host.name} to {destName} on {destHost.name}"
VmBeingClonedEvent.formatOnDatacenter                             = "Cloning {vm.name} on {host.name} to {destName} on {destHost.name}"
VmBeingClonedEvent.formatOnHost                                   = "Cloning {vm.name} to {destName} on {destHost.name}"
VmBeingClonedEvent.formatOnVm                                     = "Being cloned to {destName} on {destHost.name}"
VmBeingClonedEvent.fullFormat                                     = "Cloning {vm.name} on host {host.name} in {datacenter.name} to {destName} on host {destHost.name}"
#args
VmBeingClonedEvent.destFolder.label = "Destination folder ID"
VmBeingClonedEvent.destFolder.summary = "Destination folder ID"
VmBeingClonedEvent.destFolder.name.label = "Destination folder name"
VmBeingClonedEvent.destFolder.name.summary = "Destination folder ID"
VmBeingClonedEvent.destHost.label = "Destination host ID"
VmBeingClonedEvent.destHost.summary = "Destination folder ID"
VmBeingClonedEvent.destHost.name.label = "Destination host name"
VmBeingClonedEvent.destHost.name.summary = "Name of destination host"
VmBeingClonedEvent.destName.label = "Cloned VM name"
VmBeingClonedEvent.destName.summary = "Name of cloned VM"

###
VmBeingCreatedEvent.category                                      = "info"
VmBeingCreatedEvent.description                                   = "Creating VM"
VmBeingCreatedEvent.formatOnComputeResource                       = "Creating {vm.name} on host {host.name}"
VmBeingCreatedEvent.formatOnDatacenter                            = "Creating {vm.name} on host {host.name}"
VmBeingCreatedEvent.formatOnHost                                  = "Creating {vm.name}"
VmBeingCreatedEvent.formatOnVm                                    = "Creating VM on host {host.name}"
VmBeingCreatedEvent.fullFormat                                    = "Creating {vm.name} on host {host.name} in {datacenter.name}"
#args
VmBeingCreatedEvent.configSpec.alternateGuestName.label = "Alternate guest OS name"
VmBeingCreatedEvent.configSpec.alternateGuestName.summary = "Alternate guest OS name"
VmBeingCreatedEvent.configSpec.annotation.label = "Annotation"
VmBeingCreatedEvent.configSpec.annotation.summary = "Annotation"
VmBeingCreatedEvent.configSpec.vAppConfigRemoved.label = "vApp configuration removed"
VmBeingCreatedEvent.configSpec.vAppConfigRemoved.summary = "Should vApp configuration be removed?"
VmBeingCreatedEvent.configSpec.changeTrackingEnabled.label = "Change tracking enabled"
VmBeingCreatedEvent.configSpec.changeTrackingEnabled.summary = "Is change tracking enabled?"
VmBeingCreatedEvent.configSpec.changeVersion.label = "Change version"
VmBeingCreatedEvent.configSpec.changeVersion.summary = "Change version"
VmBeingCreatedEvent.configSpec.cpuHotAddEnabled.label = "CPU hot add enabled"
VmBeingCreatedEvent.configSpec.cpuHotAddEnabled.summary = "Is CPU hot add enabled?"
VmBeingCreatedEvent.configSpec.cpuHotRemoveEnabled.label = "CPU hot remove enabled"
VmBeingCreatedEvent.configSpec.cpuHotRemoveEnabled.summary = "Is CPU hot remove enabled?"
VmBeingCreatedEvent.configSpec.guestId.label = "Guest ID"
VmBeingCreatedEvent.configSpec.guestId.summary = "Guest ID"
VmBeingCreatedEvent.configSpec.instanceUuid.label = "Instance UUID"
VmBeingCreatedEvent.configSpec.instanceUuid.summary = "Instance UUID"
VmBeingCreatedEvent.configSpec.locationId.label = "Location ID"
VmBeingCreatedEvent.configSpec.locationId.summary = "Location ID"
VmBeingCreatedEvent.configSpec.memoryHotAddEnabled.label = "Memory hot add enabled"
VmBeingCreatedEvent.configSpec.memoryHotAddEnabled.summary = "Is memory hot add enabled?"
VmBeingCreatedEvent.configSpec.memoryMB.label = "Memory size"
VmBeingCreatedEvent.configSpec.memoryMB.summary = "Memory in megabytes"
VmBeingCreatedEvent.configSpec.name.label = "Name"
VmBeingCreatedEvent.configSpec.name.summary = "VM name"
VmBeingCreatedEvent.configSpec.npivDesiredNodeWwns.label = "Desired NPIV node WWNs"
VmBeingCreatedEvent.configSpec.npivDesiredNodeWwns.summary = "Desired NPIV node WWNs"
VmBeingCreatedEvent.configSpec.npivDesiredPortWwns.label = "Desired NPIV node WWNs"
VmBeingCreatedEvent.configSpec.npivDesiredPortWwns.summary = "Desired NPIV node WWNs"
VmBeingCreatedEvent.configSpec.npivOnNonRdmDisks.label = "NPIV on non-RDM disks"
VmBeingCreatedEvent.configSpec.npivOnNonRdmDisks.summary = "NPIV on non-RDM disks?"
VmBeingCreatedEvent.configSpec.npivTemporaryDisabled.label = "NPIV temporarily disabled"
VmBeingCreatedEvent.configSpec.npivTemporaryDisabled.summary = "NPIV temporarily disabled"
VmBeingCreatedEvent.configSpec.npivWorldWideNameOp.label = "NPIV WorldWideName operation"
VmBeingCreatedEvent.configSpec.npivWorldWideNameOp.summary = "Is NPIV WorldWideName operation?"
VmBeingCreatedEvent.configSpec.npivWorldWideNameType.label = "NPIV WorldWideName type"
VmBeingCreatedEvent.configSpec.npivWorldWideNameType.summary = "NPIV WorldWideName type"
VmBeingCreatedEvent.configSpec.numCPUs.label = "Number of CPUs"
VmBeingCreatedEvent.configSpec.numCPUs.summary = "Number of CPUs"
VmBeingCreatedEvent.configSpec.preserveSwapOnPowerOff.label = "Preserve swap on power Off"
VmBeingCreatedEvent.configSpec.preserveSwapOnPowerOff.summary = "Preserve swap on power Off"
VmBeingCreatedEvent.configSpec.swapDirectory.label = "Swap directory"
VmBeingCreatedEvent.configSpec.swapDirectory.summary = "Swap directory"
VmBeingCreatedEvent.configSpec.swapPlacement.label = "Swap placement"
VmBeingCreatedEvent.configSpec.swapPlacement.summary = "Swap placement"
VmBeingCreatedEvent.configSpec.uuid.label = "UUID"
VmBeingCreatedEvent.configSpec.uuid.summary = "UUID of VM"
VmBeingCreatedEvent.configSpec.vAssertsEnabled.label = "vAsserts enabled"
VmBeingCreatedEvent.configSpec.vAssertsEnabled.summary = "vAsserts enabled"
VmBeingCreatedEvent.configSpec.version.label = "Version"
VmBeingCreatedEvent.configSpec.version.summary = "Version"

###
VmBeingDeployedEvent.category                                     = "info"
VmBeingDeployedEvent.description                                  = "Deploying VM"
VmBeingDeployedEvent.formatOnComputeResource                      = "Deploying {vm.name} on host {host.name} from template {srcTemplate.name}"
VmBeingDeployedEvent.formatOnDatacenter                           = "Deploying {vm.name} on host {host.name} from template {srcTemplate.name}"
VmBeingDeployedEvent.formatOnHost                                 = "Deploying {vm.name} from template {srcTemplate.name}"
VmBeingDeployedEvent.formatOnVm                                   = "Deploying VM on host {host.name} from template {srcTemplate.name}"
VmBeingDeployedEvent.fullFormat                                   = "Deploying {vm.name} on host {host.name} in {datacenter.name} from template {srcTemplate.name}"
#args
VmBeingDeployedEvent.srcTemplate.label = "Source template ID"
VmBeingDeployedEvent.srcTemplate.summary = "Source template ID"
VmBeingDeployedEvent.srcTemplate.name.label = "Source template name"
VmBeingDeployedEvent.srcTemplate.name.summary = "Name of source template"

###
VmBeingHotMigratedEvent.category                                  = "info"
VmBeingHotMigratedEvent.description                               = "VM is hot migrating"
VmBeingHotMigratedEvent.formatOnComputeResource                   = "Migrating {vm.name} from {host.name} to {destHost.name}"
VmBeingHotMigratedEvent.formatOnDatacenter                        = "Migrating {vm.name} from {host.name} to {destHost.name}"
VmBeingHotMigratedEvent.formatOnHost                              = "Migrating {vm.name} to {destHost.name}"
VmBeingHotMigratedEvent.formatOnVm                                = "Migrating VM from {host.name} to {destHost.name}"
VmBeingHotMigratedEvent.fullFormat                                = "Migrating {vm.name} from {host.name} to {destHost.name} in {datacenter.name}"
#args
VmBeingHotMigratedEvent.destHost.label = "Destination host ID"
VmBeingHotMigratedEvent.destHost.summary = "Destination host ID"
VmBeingHotMigratedEvent.destHost.name.label = "Destination host name"
VmBeingHotMigratedEvent.destHost.name.summary = "Name of destination host"

###
VmBeingMigratedEvent.category                                     = "info"
VmBeingMigratedEvent.description                                  = "VM migrating"
VmBeingMigratedEvent.formatOnComputeResource                      = "Relocating {vm.name} from {host.name} to {destHost.name}"
VmBeingMigratedEvent.formatOnDatacenter                           = "Relocating {vm.name} from {host.name} to {destHost.name}"
VmBeingMigratedEvent.formatOnHost                                 = "Relocating {vm.name} to {destHost.name}"
VmBeingMigratedEvent.formatOnVm                                   = "Relocating VM from {host.name} to {destHost.name}"
VmBeingMigratedEvent.fullFormat                                   = "Relocating {vm.name} from {host.name} to {destHost.name} in {datacenter.name}"
#args
VmBeingMigratedEvent.destHost.label = "Destination host ID"
VmBeingMigratedEvent.destHost.summary = "Destination host ID"
VmBeingMigratedEvent.destHost.name.label = "Destination host name"
VmBeingMigratedEvent.destHost.name.summary = "Name of destination host"

###
VmClonedEvent.category                                            = "info"
VmClonedEvent.description                                         = "VM cloned"
VmClonedEvent.formatOnComputeResource                             = ""
VmClonedEvent.formatOnDatacenter                                  = ""
VmClonedEvent.formatOnHost                                        = ""
VmClonedEvent.formatOnVm                                          = ""
VmClonedEvent.fullFormat                                          = "Clone of {sourceVm.name} completed"
#args
VmMigratedEvent.sourceVm.label = "Source VM ID"
VmMigratedEvent.sourceVm.summary = "Source VM ID"
VmMigratedEvent.sourceVm.name.label = "Source VM name"
VmMigratedEvent.sourceVm.name.summary = "Name of source VM"

###
VmCloneFailedEvent.category                                       = "error"
VmCloneFailedEvent.description                                    = "Cannot complete VM clone"
VmCloneFailedEvent.formatOnComputeResource                        = ""
VmCloneFailedEvent.formatOnDatacenter                             = ""
VmCloneFailedEvent.formatOnHost                                   = ""
VmCloneFailedEvent.formatOnVm                                     = ""
VmCloneFailedEvent.fullFormat                                     = "Cannot clone {vm.name}: {reason.msg}"
#args
VmCloneFailedEvent.destFolder.label = "Destination folder ID"
VmCloneFailedEvent.destFolder.summary = "Destination folder ID"
VmCloneFailedEvent.destFolder.name.label = "Destination folder name"
VmCloneFailedEvent.destFolder.name.summary = "name of destination folder"
VmCloneFailedEvent.destHost.label = "Destination folder ID"
VmCloneFailedEvent.destHost.summary = "Destination folder ID"
VmCloneFailedEvent.destHost.name.label = "Destination folder name"
VmCloneFailedEvent.destHost.name.summary = "Name of destination host"
VmCloneFailedEvent.destName.label = "VM clone name"
VmCloneFailedEvent.destName.summary = "Name of cloned VM"

###
VmDateRolledBackEvent.category                                    = "error"
VmDateRolledBackEvent.description                                 = "VM date rolled back"
VmDateRolledBackEvent.formatOnComputeResource                     = ""
VmDateRolledBackEvent.formatOnDatacenter                          = ""
VmDateRolledBackEvent.formatOnHost                                = ""
VmDateRolledBackEvent.formatOnVm                                  = ""
VmDateRolledBackEvent.fullFormat                                  = "Disconnecting all hosts as the date of virtual machine {vm.name} has been rolled back"
###
VmDeployedEvent.category                                          = "info"
VmDeployedEvent.description                                       = "VM deployed"
VmDeployedEvent.formatOnComputeResource                           = ""
VmDeployedEvent.formatOnDatacenter                                = ""
VmDeployedEvent.formatOnHost                                      = "Template {srcTemplate.name} deployed"
VmDeployedEvent.formatOnVm                                        = ""
VmDeployedEvent.fullFormat                                        = "Template {srcTemplate.name} deployed on host {host.name}"
#args
VmDeployedEvent.srcTemplate.label = "Source template ID"
VmDeployedEvent.srcTemplate.summary = "Internal ID of source template"
VmDeployedEvent.srcTemplate.name.label = "Source template name"
VmDeployedEvent.srcTemplate.name.summary = "Name of source template"

###
VmDeployFailedEvent.category                                      = "error"
VmDeployFailedEvent.description                                   = "Cannot deploy VM"
VmDeployFailedEvent.formatOnComputeResource                       = ""
VmDeployFailedEvent.formatOnDatacenter                            = ""
VmDeployFailedEvent.formatOnHost                                  = ""
VmDeployFailedEvent.formatOnVm                                    = ""
VmDeployFailedEvent.fullFormat                                    = "Cannot deploy template: {reason.msg}"
#args
VmDeployFailedEvent.destDatastore.name.label = "Destination datastore name"
VmDeployFailedEvent.destDatastore.name.summary = "Destination datastore name"

###
VmDisconnectedEvent.category                                      = "info"
VmDisconnectedEvent.description                                   = "VM disconnected"
VmDisconnectedEvent.formatOnComputeResource                       = "{vm.name} on host {host.name} is disconnected"
VmDisconnectedEvent.formatOnDatacenter                            = "{vm.name} on host {host.name} is disconnected"
VmDisconnectedEvent.formatOnHost                                  = "{vm.name} is disconnected"
VmDisconnectedEvent.formatOnVm                                    = "{host.name} is disconnected"
VmDisconnectedEvent.fullFormat                                    = "{vm.name} on host {host.name} in {datacenter.name} is disconnected"
###
VmRemoteConsoleConnectedEvent.category                            = "info"
VmRemoteConsoleConnectedEvent.description                         = "VM remote console connected"
VmRemoteConsoleConnectedEvent.formatOnComputeResource             = "Remote console connected to {vm.name} on host {host.name}"
VmRemoteConsoleConnectedEvent.formatOnDatacenter                  = "Remote console connected to {vm.name} on host {host.name}"
VmRemoteConsoleConnectedEvent.formatOnHost                        = "Remote console connected to {vm.name}"
VmRemoteConsoleConnectedEvent.formatOnVm                          = "Remote console connected"
VmRemoteConsoleConnectedEvent.fullFormat                          = "Remote console connected to {vm.name} on host {host.name}"
###
VmRemoteConsoleDisconnectedEvent.category                         = "info"
VmRemoteConsoleDisconnectedEvent.description                      = "VM remote console disconnected"
VmRemoteConsoleDisconnectedEvent.formatOnComputeResource          = "Remote console disconnected from {vm.name} on host {host.name}"
VmRemoteConsoleDisconnectedEvent.formatOnDatacenter               = "Remote console disconnected from {vm.name} on host {host.name}"
VmRemoteConsoleDisconnectedEvent.formatOnHost                     = "Remote console disconnected from {vm.name}"
VmRemoteConsoleDisconnectedEvent.formatOnVm                       = "Remote console connected"
VmRemoteConsoleDisconnectedEvent.fullFormat                       = "Remote console disconnected from {vm.name} on host {host.name}"
###
VmDiscoveredEvent.category                                        = "info"
VmDiscoveredEvent.description                                     = "VM discovered"
VmDiscoveredEvent.formatOnComputeResource                         = "Discovered {vm.name} on {host.name}"
VmDiscoveredEvent.formatOnDatacenter                              = "Discovered {vm.name} on {host.name}"
VmDiscoveredEvent.formatOnHost                                    = "Discovered {vm.name}"
VmDiscoveredEvent.formatOnVm                                      = "Discovered on {host.name}"
VmDiscoveredEvent.fullFormat                                      = "Discovered {vm.name} on {host.name} in {datacenter.name}"
###
VmDiskFailedEvent.category                                        = "error"
VmDiskFailedEvent.description                                     = "Cannot create VM disk"
VmDiskFailedEvent.formatOnComputeResource                         = ""
VmDiskFailedEvent.formatOnDatacenter                              = ""
VmDiskFailedEvent.formatOnHost                                    = ""
VmDiskFailedEvent.formatOnVm                                      = ""
VmDiskFailedEvent.fullFormat                                      = "Cannot create virtual disk {disk}"
#args
VmDiskFailedEvent.disk.label = "Disk"
VmDiskFailedEvent.disk.summary = "Disk name"

###
VmEmigratingEvent.category                                        = "info"
VmEmigratingEvent.description                                     = "VM emigrating"
VmEmigratingEvent.formatOnComputeResource                         = "Migrating {vm.name} off host {host.name}"
VmEmigratingEvent.formatOnDatacenter                              = "Migrating {vm.name} off host {host.name}"
VmEmigratingEvent.formatOnHost                                    = "Migrating {vm.name} off host"
VmEmigratingEvent.formatOnVm                                      = "Migrating off host {host.name}"
VmEmigratingEvent.fullFormat                                      = "Migrating {vm.name} off host {host.name} in {datacenter.name}"
###
VmFailedMigrateEvent.category                                     = "error"
VmFailedMigrateEvent.description                                  = "Cannot migrate VM"
VmFailedMigrateEvent.formatOnComputeResource                      = "Cannot migrate {vm.name} from {host.name} to {destHost.name}"
VmFailedMigrateEvent.formatOnDatacenter                           = "Cannot migrate {vm.name} from {host.name} to {destHost.name}"
VmFailedMigrateEvent.formatOnHost                                 = "Cannot migrate {vm.name} to {destHost.name}"
VmFailedMigrateEvent.formatOnVm                                   = "Cannot migrate to {destHost.name}"
VmFailedMigrateEvent.fullFormat                                   = "Cannot migrate {vm.name} from {host.name} to {destHost.name} in {datacenter.name}"
#args
VmFailedMigrateEvent.destHost.label = "Destination host ID"
VmFailedMigrateEvent.destHost.summary = "Destination host ID"
VmFailedMigrateEvent.destHost.name.label = "Destination host name"
VmFailedMigrateEvent.destHost.name.summary = "Name of destination host"

###
VmMacAssignedEvent.category                                       = "info"
VmMacAssignedEvent.description                                    = "VM MAC assigned"
VmMacAssignedEvent.formatOnComputeResource                        = ""
VmMacAssignedEvent.formatOnDatacenter                             = ""
VmMacAssignedEvent.formatOnHost                                   = ""
VmMacAssignedEvent.formatOnVm                                     = "New MAC address ({mac}) assigned to adapter {adapter}"
VmMacAssignedEvent.fullFormat                                     = "New MAC address ({mac}) assigned to adapter {adapter} for {vm.name}"
#args
VmMacAssignedEvent.adapter.label = "Adapter"
VmMacAssignedEvent.adapter.summary = "Adapter name"
VmMacAssignedEvent.mac.label = "MAC address"
VmMacAssignedEvent.mac.summary = "New MAC address"

###
VmMacChangedEvent.category                                        = "warning"
VmMacChangedEvent.description                                     = "VM MAC changed"
VmMacChangedEvent.formatOnComputeResource                         = ""
VmMacChangedEvent.formatOnDatacenter                              = ""
VmMacChangedEvent.formatOnHost                                    = ""
VmMacChangedEvent.formatOnVm                                      = "Changed MAC address from {oldMac} to {newMac} for adapter {adapter}"
VmMacChangedEvent.fullFormat                                      = "Changed MAC address from {oldMac} to {newMac} for adapter {adapter} for {vm.name}"
#args
VmMacChangedEvent.adapter.label = "Adapter"
VmMacChangedEvent.adapter.summary = "Name of adapter"
VmMacChangedEvent.newMac.label = "New MAC address"
VmMacChangedEvent.newMac.summary = "New MAC address"
VmMacChangedEvent.oldMac.label = "Previous MAC address"
VmMacChangedEvent.oldMac.summary = "Previous MAC address"

###
VmMacConflictEvent.category                                       = "error"
VmMacConflictEvent.description                                    = "VM MAC conflict"
VmMacConflictEvent.formatOnComputeResource                        = ""
VmMacConflictEvent.formatOnDatacenter                             = ""
VmMacConflictEvent.formatOnHost                                   = ""
VmMacConflictEvent.formatOnVm                                     = "The MAC address ({mac}) conflicts with MAC assigned to {conflictedVm.name}"
VmMacConflictEvent.fullFormat                                     = "The MAC address ({mac}) of {vm.name} conflicts with MAC assigned to  {conflictedVm.name}"
#args
VmMacConflictEvent.conflictedVm.label = "Conflicted VM ID"
VmMacConflictEvent.conflictedVm.summary = "Conflicted VM ID"
VmMacConflictEvent.conflictedVm.name.label = "Conflicted VM name"
VmMacConflictEvent.conflictedVm.name.summary = "Name of conflicted VM"
VmMacConflictEvent.mac.label = "MAC address"
VmMacConflictEvent.mac.summary = "MAC address in conflict"

###
VmMigratedEvent.category                                          = "info"
VmMigratedEvent.description                                       = "VM migrated"
VmMigratedEvent.formatOnComputeResource                           = ""
VmMigratedEvent.formatOnDatacenter                                = ""
VmMigratedEvent.formatOnHost                                      = "Migration of virtual machine {vm.name} from host {sourceHost.name} completed"
VmMigratedEvent.formatOnVm                                        = "Migration from host {sourceHost.name} completed"
VmMigratedEvent.fullFormat                                        = "Migration of virtual machine {vm.name} from {sourceHost.name} to {host.name} completed"
#args
VmMigratedEvent.sourceHost.label = "Source host ID"
VmMigratedEvent.sourceHost.summary = "Source host ID"
VmMigratedEvent.sourceHost.name.label = "Source host name"
VmMigratedEvent.sourceHost.name.summary = "Name of source host"

###
VmNoNetworkAccessEvent.category                                   = "warning"
VmNoNetworkAccessEvent.description                                = "VM No Network Access"
VmNoNetworkAccessEvent.formatOnComputeResource                    = ""
VmNoNetworkAccessEvent.formatOnDatacenter                         = ""
VmNoNetworkAccessEvent.formatOnHost                               = ""
VmNoNetworkAccessEvent.formatOnVm                                 = "Not all networks are accessible by {destHost.name}"
VmNoNetworkAccessEvent.fullFormat                                 = "Not all networks for {vm.name} are accessible by {destHost.name}"
#args
VmNoNetworkAccessEvent.destHost.label = "Destination host ID"
VmNoNetworkAccessEvent.destHost.summary = "Destination host ID"
VmNoNetworkAccessEvent.destHost.name.label = "Destination host name"
VmNoNetworkAccessEvent.destHost.name.summary = "Name of destination host"

###
VmOrphanedEvent.category                                          = "warning"
VmOrphanedEvent.description                                       = "VM orphaned"
VmOrphanedEvent.formatOnComputeResource                           = "{vm.name} does not exist on {host.name}"
VmOrphanedEvent.formatOnDatacenter                                = "{vm.name} does not exist on {host.name}"
VmOrphanedEvent.formatOnHost                                      = "{vm.name} does not exist"
VmOrphanedEvent.formatOnVm                                        = "Virtual machine does not exist on {host.name}"
VmOrphanedEvent.fullFormat                                        = "{vm.name} does not exist on {host.name} in {datacenter.name}"
###
VmPoweredOffEvent.category                                        = "info"
VmPoweredOffEvent.description                                     = "VM powered off"
VmPoweredOffEvent.formatOnComputeResource                         = "{vm.name} on  {host.name} is powered off"
VmPoweredOffEvent.formatOnDatacenter                              = "{vm.name} on  {host.name} is powered off"
VmPoweredOffEvent.formatOnHost                                    = "{vm.name} is powered off"
VmPoweredOffEvent.formatOnVm                                      = "Virtual machine on {host.name} is powered off"
VmPoweredOffEvent.fullFormat                                      = "{vm.name} on  {host.name} in {datacenter.name} is powered off"
###
VmPoweredOnEvent.category                                         = "info"
VmPoweredOnEvent.description                                      = "VM powered on"
VmPoweredOnEvent.formatOnComputeResource                          = "{vm.name} on  {host.name} is powered on"
VmPoweredOnEvent.formatOnDatacenter                               = "{vm.name} on  {host.name} is powered on"
VmPoweredOnEvent.formatOnHost                                     = "{vm.name} is powered on"
VmPoweredOnEvent.formatOnVm                                       = "Virtual machine on {host.name} is powered on"
VmPoweredOnEvent.fullFormat                                       = "{vm.name} on  {host.name} in {datacenter.name} is powered on"
###
VmRemovedEvent.category                                           = "info"
VmRemovedEvent.description                                        = "VM removed"
VmRemovedEvent.formatOnComputeResource                            = "Removed {vm.name} on {host.name}"
VmRemovedEvent.formatOnDatacenter                                 = "Removed {vm.name} on {host.name}"
VmRemovedEvent.formatOnHost                                       = "Removed {vm.name}"
VmRemovedEvent.formatOnVm                                         = "Removed"
VmRemovedEvent.fullFormat                                         = "Removed {vm.name} on {host.name} from {datacenter.name}"
###
VmRenamedEvent.category                                           = "warning"
VmRenamedEvent.description                                        = "VM renamed"
VmRenamedEvent.formatOnComputeResource                            = "Renamed {vm.name} from {oldName} to {newName}"
VmRenamedEvent.formatOnDatacenter                                 = "Renamed {vm.name} from {oldName} to {newName}"
VmRenamedEvent.formatOnHost                                       = "Renamed {vm.name} from {oldName} to {newName}"
VmRenamedEvent.formatOnVm                                         = "Renamed from {oldName} to {newName}"
VmRenamedEvent.fullFormat                                         = "Renamed {vm.name} from {oldName} to {newName} in {datacenter.name}"
#args
VmRenamedEvent.newName.label = "New name"
VmRenamedEvent.newName.summary = "New name"
VmRenamedEvent.oldName.label = "Previous name"
VmRenamedEvent.oldName.summary = "Previous name"

###
VmResettingEvent.category                                         = "info"
VmResettingEvent.description                                      = "VM resetting"
VmResettingEvent.formatOnComputeResource                          = "{vm.name} on  {host.name} is reset"
VmResettingEvent.formatOnDatacenter                               = "{vm.name} on  {host.name} is reset"
VmResettingEvent.formatOnHost                                     = "{vm.name} is reset"
VmResettingEvent.formatOnVm                                       = "Virtual machine on {host.name} is reset"
VmResettingEvent.fullFormat                                       = "{vm.name} on  {host.name} in {datacenter.name} is reset"
###
VmResourceReallocatedEvent.category                               = "info"
VmResourceReallocatedEvent.description                            = "VM resource reallocated"
VmResourceReallocatedEvent.formatOnComputeResource                = ""
VmResourceReallocatedEvent.formatOnDatacenter                     = ""
VmResourceReallocatedEvent.formatOnHost                           = ""
VmResourceReallocatedEvent.formatOnVm                             = "Resource allocation changed"
VmResourceReallocatedEvent.fullFormat                             = "Changed resource allocation for {vm.name}"
###
VmResumingEvent.category                                          = "info"
VmResumingEvent.description                                       = "VM resuming"
VmResumingEvent.formatOnComputeResource                           = "{vm.name} on  {host.name} is resumed"
VmResumingEvent.formatOnDatacenter                                = "{vm.name} on  {host.name} is resumed"
VmResumingEvent.formatOnHost                                      = "{vm.name} is resumed"
VmResumingEvent.formatOnVm                                        = "Virtual machine on {host.name} is resumed"
VmResumingEvent.fullFormat                                        = "{vm.name} on  {host.name} in {datacenter.name} is resumed"
###
LicenseExpiredEvent.category                                      = "error"
LicenseExpiredEvent.description                                   = "License expired"
LicenseExpiredEvent.formatOnComputeResource                       = ""
LicenseExpiredEvent.formatOnDatacenter                            = ""
LicenseExpiredEvent.formatOnHost                                  = ""
LicenseExpiredEvent.formatOnVm                                    = ""
LicenseExpiredEvent.fullFormat                                    = "License {feature.featureName} has expired"
#args
LicenseExpiredEvent.feature.costUnit.label = "Cost unit"
LicenseExpiredEvent.feature.costUnit.summary = "Cost unit"
LicenseExpiredEvent.feature.edition.label = "Edition"
LicenseExpiredEvent.feature.edition.summary = "Edition"
LicenseExpiredEvent.feature.featureDescription.label = "Feature description"
LicenseExpiredEvent.feature.featureDescription.summary = "Feature description"
LicenseExpiredEvent.feature.featureName.label = "Feature name"
LicenseExpiredEvent.feature.featureName.summary = "Feature name"
LicenseExpiredEvent.feature.key.label = "Key"
LicenseExpiredEvent.feature.key.summary = "Feature key"
LicenseExpiredEvent.feature.sourceRestriction.label = "Source restriction"
LicenseExpiredEvent.feature.sourceRestriction.summary = "Source restriction"
LicenseExpiredEvent.feature.state.label = "State"
LicenseExpiredEvent.feature.state.summary = "State"

###
LicenseNonComplianceEvent.category                                = "error"
LicenseNonComplianceEvent.description                             = "Insufficient licenses."
LicenseNonComplianceEvent.formatOnComputeResource                 = ""
LicenseNonComplianceEvent.formatOnDatacenter                      = ""
LicenseNonComplianceEvent.formatOnHost                            = ""
LicenseNonComplianceEvent.formatOnVm                              = ""
LicenseNonComplianceEvent.fullFormat                              = "License inventory is not compliant. Licenses are overused"
#args
LicenseNonComplianceEvent.url.label = "URL"
LicenseNonComplianceEvent.url.summary = "URL for details"

###
LicenseRestrictedEvent.category                                   = "error"
LicenseRestrictedEvent.description                                = "Unable to acquire licenses due to a restriction on the license server"
LicenseRestrictedEvent.formatOnComputeResource                    = ""
LicenseRestrictedEvent.formatOnDatacenter                         = ""
LicenseRestrictedEvent.formatOnHost                               = ""
LicenseRestrictedEvent.formatOnVm                                 = ""
LicenseRestrictedEvent.fullFormat                                 = "Unable to acquire licenses due to a restriction in the option file on the license server."
###
VmStartingEvent.category                                          = "info"
VmStartingEvent.description                                       = "VM starting"
VmStartingEvent.formatOnComputeResource                           = "{vm.name} on host {host.name} is starting"
VmStartingEvent.formatOnDatacenter                                = "{vm.name} on host {host.name} is starting"
VmStartingEvent.formatOnHost                                      = "{vm.name} is starting"
VmStartingEvent.formatOnVm                                        = "Virtual machine is starting"
VmStartingEvent.fullFormat                                        = "{vm.name} on host {host.name} in {datacenter.name} is starting"
###
VmStaticMacConflictEvent.category                                 = "error"
VmStaticMacConflictEvent.description                              = "VM static MAC conflict"
VmStaticMacConflictEvent.formatOnComputeResource                  = ""
VmStaticMacConflictEvent.formatOnDatacenter                       = ""
VmStaticMacConflictEvent.formatOnHost                             = ""
VmStaticMacConflictEvent.formatOnVm                               = "The static MAC address ({mac}) conflicts with MAC assigned to {conflictedVm.name}"
VmStaticMacConflictEvent.fullFormat                               = "The static MAC address ({mac}) of {vm.name} conflicts with MAC assigned to  {conflictedVm.name}"
#args
VmStaticMacConflictEvent.conflictedVm.label = "Conflicted VM ID"
VmStaticMacConflictEvent.conflictedVm.summary = "Conflicted VM ID"
VmStaticMacConflictEvent.conflictedVm.name.label = "Conflicted VM name"
VmStaticMacConflictEvent.conflictedVm.name.summary = "Name of conflicted VM"
VmStaticMacConflictEvent.mac.label = "MAC address"
VmStaticMacConflictEvent.mac.summary = "MAC address in conflict"

###
VmStoppingEvent.category                                          = "info"
VmStoppingEvent.description                                       = "VM stopping"
VmStoppingEvent.formatOnComputeResource                           = "{vm.name} on  {host.name} is stopping"
VmStoppingEvent.formatOnDatacenter                                = "{vm.name} on  {host.name} is stopping"
VmStoppingEvent.formatOnHost                                      = "{vm.name} is stopping"
VmStoppingEvent.formatOnVm                                        = "Virtual machine is stopping"
VmStoppingEvent.fullFormat                                        = "{vm.name} on  {host.name} in {datacenter.name} is stopping"
###
VmSuspendedEvent.category                                         = "info"
VmSuspendedEvent.description                                      = "VM suspended"
VmSuspendedEvent.formatOnComputeResource                          = "{vm.name} on {host.name} is suspended"
VmSuspendedEvent.formatOnDatacenter                               = "{vm.name} on {host.name} is suspended"
VmSuspendedEvent.formatOnHost                                     = "{vm.name} is suspended"
VmSuspendedEvent.formatOnVm                                       = "Virtual machine is suspended"
VmSuspendedEvent.fullFormat                                       = "{vm.name} on {host.name} in {datacenter.name} is suspended"
###
VmSuspendingEvent.category                                        = "info"
VmSuspendingEvent.description                                     = "VM being suspended"
VmSuspendingEvent.formatOnComputeResource                         = "{vm.name} on {host.name} is being suspended"
VmSuspendingEvent.formatOnDatacenter                              = "{vm.name} on {host.name} is being suspended"
VmSuspendingEvent.formatOnHost                                    = "{vm.name} is being suspended"
VmSuspendingEvent.formatOnVm                                      = "Virtual machine is being suspended"
VmSuspendingEvent.fullFormat                                      = "{vm.name} on {host.name} in {datacenter.name} is being suspended"
###
VmUuidConflictEvent.category                                      = "error"
VmUuidConflictEvent.description                                   = "VM UUID Conflict"
VmUuidConflictEvent.formatOnComputeResource                       = ""
VmUuidConflictEvent.formatOnDatacenter                            = ""
VmUuidConflictEvent.formatOnHost                                  = ""
VmUuidConflictEvent.formatOnVm                                    = "BIOS ID ({uuid}) conflicts with that of {conflictedVm.name}"
VmUuidConflictEvent.fullFormat                                    = "BIOS ID ({uuid}) of {vm.name} conflicts with that of {conflictedVm.name}"
#args
VmUuidConflictEvent.conflictedVm.label = "Conflicted VM ID"
VmUuidConflictEvent.conflictedVm.summary = "Conflicted VM ID"
VmUuidConflictEvent.conflictedVm.name.label = "Conflicted VM name"
VmUuidConflictEvent.conflictedVm.name.summary = "Name of conflicted VM"
VmUuidConflictEvent.uuid.label = "UUID"
VmUuidConflictEvent.uuid.summary = "Conflicted UUID"

###
WarningUpgradeEvent.category                                      = "warning"
WarningUpgradeEvent.description                                   = "Warning upgrade"
WarningUpgradeEvent.formatOnComputeResource                       = ""
WarningUpgradeEvent.formatOnDatacenter                            = ""
WarningUpgradeEvent.formatOnHost                                  = ""
WarningUpgradeEvent.formatOnVm                                    = ""
WarningUpgradeEvent.fullFormat                                    = "{message}"
###
TaskEvent.category                                                = "info"
TaskEvent.description                                             = "Task event"
TaskEvent.formatOnComputeResource                                 = ""
TaskEvent.formatOnDatacenter                                      = ""
TaskEvent.formatOnHost                                            = ""
TaskEvent.formatOnVm                                              = ""
TaskEvent.fullFormat                                              = "Task: {info.descriptionId}"
#args
TaskEvent.info.cancelable.label = "Cancelable task"
TaskEvent.info.cancelable.summary = "Is task cancelable?"
TaskEvent.info.cancelled.label = "Canceled"
TaskEvent.info.cancelled.summary = "Is task canceled?"
TaskEvent.info.changeTag.label = "Change tag"
TaskEvent.info.changeTag.summary = "Change tag for events for this task"
TaskEvent.info.descriptionId.label = "Description ID"
TaskEvent.info.descriptionId.summary = "Description ID"
TaskEvent.info.entity.label = "Entity ID"
TaskEvent.info.entity.summary = "Task entity ID"
TaskEvent.info.entityName.label = "Entity name"
TaskEvent.info.entityName.summary = "Name of the entity of the task"
TaskEvent.info.eventChainId.label = "Event chain ID"
TaskEvent.info.eventChainId.summary = "Event chain ID"
TaskEvent.info.key.label = "Key"
TaskEvent.info.key.summary = "Task ID"
TaskEvent.info.parentTaskKey.label = "Parent key"
TaskEvent.info.parentTaskKey.summary = "Parent task ID"
TaskEvent.info.progress.label = "Progress"
TaskEvent.info.progress.summary = "Task progress"
TaskEvent.info.rootTaskKey.label = "Root task ID"
TaskEvent.info.rootTaskKey.summary = "Root task ID"
TaskEvent.info.state.label = "State"
TaskEvent.info.state.summary = "Task state"
TaskEvent.info.task.label = "Task ID"
TaskEvent.info.task.summary = "Task ID"

###
HostUpgradeFailedEvent.category                                   = "error"
HostUpgradeFailedEvent.description                                = "Host upgrade failed"
HostUpgradeFailedEvent.formatOnComputeResource                    = "Cannot install or upgrade vCenter agent service on {host.name}"
HostUpgradeFailedEvent.formatOnDatacenter                         = "Cannot install or upgrade vCenter agent service on {host.name}"
HostUpgradeFailedEvent.formatOnHost                               = "Cannot install or upgrade vCenter agent service on {host.name} in {datacenter.name}"
HostUpgradeFailedEvent.formatOnVm                                 = ""
HostUpgradeFailedEvent.fullFormat                                 = "Cannot install or upgrade vCenter agent service on {host.name} in {datacenter.name}"
###
VmUpgradingEvent.category                                         = "info"
VmUpgradingEvent.description                                      = "Upgrading VM"
VmUpgradingEvent.formatOnComputeResource                          = "Upgrading virtual hardware on {vm.name} to version {version}"
VmUpgradingEvent.formatOnDatacenter                               = "Upgrading virtual hardware on {vm.name} to version {version}"
VmUpgradingEvent.formatOnHost                                     = "Upgrading virtual hardware on {vm.name} to version {version}"
VmUpgradingEvent.formatOnVm                                       = "Upgrading virtual hardware to version {version}"
VmUpgradingEvent.fullFormat                                       = "Upgrading virtual hardware on {vm.name} in {datacenter.name} to version {version}"
#args
VmUpgradingEvent.version.label = "Version"
VmUpgradingEvent.version.summary = "Version"

###
VmUpgradeCompleteEvent.category                                   = "info"
VmUpgradeCompleteEvent.description                                = "VM upgrade complete"
VmUpgradeCompleteEvent.formatOnComputeResource                    = ""
VmUpgradeCompleteEvent.formatOnDatacenter                         = ""
VmUpgradeCompleteEvent.formatOnHost                               = ""
VmUpgradeCompleteEvent.formatOnVm                                 = ""
VmUpgradeCompleteEvent.fullFormat                                 = "Virtual hardware upgraded to version {version}"
#args
VmUpgradeCompleteEvent.version.label = "Version"
VmUpgradeCompleteEvent.version.summary = "Version"

###
VmUpgradeFailedEvent.category                                     = "error"
VmUpgradeFailedEvent.description                                  = "Cannot upgrade VM"
VmUpgradeFailedEvent.formatOnComputeResource                      = ""
VmUpgradeFailedEvent.formatOnDatacenter                           = ""
VmUpgradeFailedEvent.formatOnHost                                 = ""
VmUpgradeFailedEvent.formatOnVm                                   = ""
VmUpgradeFailedEvent.fullFormat                                   = "Cannot upgrade virtual hardware"
###
VmGuestRebootEvent.category                                       = "info"
VmGuestRebootEvent.description                                    = "Guest reboot"
VmGuestRebootEvent.formatOnComputeResource                        = "Guest OS reboot for {vm.name} on {host.name}"
VmGuestRebootEvent.formatOnDatacenter                             = "Guest OS reboot for {vm.name} on {host.name}"
VmGuestRebootEvent.formatOnHost                                   = "Guest OS reboot for {vm.name}"
VmGuestRebootEvent.formatOnVm                                     = "Guest OS reboot"
VmGuestRebootEvent.fullFormat                                     = "Guest OS reboot for {vm.name} on {host.name} in {datacenter.name}"
###
VmGuestStandbyEvent.category                                      = "info"
VmGuestStandbyEvent.description                                   = "Guest standby"
VmGuestStandbyEvent.formatOnComputeResource                       = "Guest OS standby for {vm.name} on {host.name}"
VmGuestStandbyEvent.formatOnDatacenter                            = "Guest OS standby for {vm.name} on {host.name}"
VmGuestStandbyEvent.formatOnHost                                  = "Guest OS standby for {vm.name}"
VmGuestStandbyEvent.formatOnVm                                    = "Guest OS standby"
VmGuestStandbyEvent.fullFormat                                    = "Guest OS standby for {vm.name} on {host.name} in {datacenter.name}"
###
VmGuestShutdownEvent.category                                     = "info"
VmGuestShutdownEvent.description                                  = "Guest OS shut down"
VmGuestShutdownEvent.formatOnComputeResource                      = "Guest OS shut down for {vm.name} on {host.name}"
VmGuestShutdownEvent.formatOnDatacenter                           = "Guest OS shut down for {vm.name} on {host.name}"
VmGuestShutdownEvent.formatOnHost                                 = "Guest OS shut down for {vm.name}"
VmGuestShutdownEvent.formatOnVm                                   = "Guest OS shut down"
VmGuestShutdownEvent.fullFormat                                   = "Guest OS shut down for {vm.name} on {host.name} in {datacenter.name}"
###
LicenseServerAvailableEvent.category                              = "info"
LicenseServerAvailableEvent.description                           = "License server available"
LicenseServerAvailableEvent.formatOnComputeResource               = ""
LicenseServerAvailableEvent.formatOnDatacenter                    = ""
LicenseServerAvailableEvent.formatOnHost                          = ""
LicenseServerAvailableEvent.formatOnVm                            = ""
LicenseServerAvailableEvent.fullFormat                            = "License server {licenseServer} is available"
#args
LicenseServerAvailableEvent.licenseServer.label = "License server"
LicenseServerAvailableEvent.licenseServer.summary = "License server"

###
LicenseServerUnavailableEvent.category                            = "error"
LicenseServerUnavailableEvent.description                         = "License server unavailable"
LicenseServerUnavailableEvent.formatOnComputeResource             = ""
LicenseServerUnavailableEvent.formatOnDatacenter                  = ""
LicenseServerUnavailableEvent.formatOnHost                        = ""
LicenseServerUnavailableEvent.formatOnVm                          = ""
LicenseServerUnavailableEvent.fullFormat                          = "License server {licenseServer} is unavailable"
#args
LicenseServerUnavailableEvent.licenseServer.label = "License server"
LicenseServerUnavailableEvent.licenseServer.summary = "License server"

###
NoLicenseEvent.category                                           = "error"
NoLicenseEvent.description                                        = "No license"
NoLicenseEvent.formatOnComputeResource                            = ""
NoLicenseEvent.formatOnDatacenter                                 = ""
NoLicenseEvent.formatOnHost                                       = ""
NoLicenseEvent.formatOnVm                                         = ""
NoLicenseEvent.fullFormat                                         = "A required license {feature.featureName} is not reserved"
#args
NoLicenseEvent.feature.costUnit.label = "Cost unit"
NoLicenseEvent.feature.costUnit.summary = "Cost unit"
NoLicenseEvent.feature.edition.label = "Edition"
NoLicenseEvent.feature.edition.summary = "Edition"
NoLicenseEvent.feature.featureDescription.label = "Feature description"
NoLicenseEvent.feature.featureDescription.summary = "Feature description"
NoLicenseEvent.feature.featureName.label = "Feature name"
NoLicenseEvent.feature.featureName.summary = "Feature name"
NoLicenseEvent.feature.key.label = "Key"
NoLicenseEvent.feature.key.summary = "Feature key"
NoLicenseEvent.feature.sourceRestriction.label = "Source restriction"
NoLicenseEvent.feature.sourceRestriction.summary = "Source restriction"
NoLicenseEvent.feature.state.label = "State"
NoLicenseEvent.feature.state.summary = "State"

###
UnlicensedVirtualMachinesEvent.category                           = "info"
UnlicensedVirtualMachinesEvent.description                        = "Unlicensed virtual machines"
UnlicensedVirtualMachinesEvent.formatOnComputeResource            = ""
UnlicensedVirtualMachinesEvent.formatOnDatacenter                 = ""
UnlicensedVirtualMachinesEvent.formatOnHost                       = ""
UnlicensedVirtualMachinesEvent.formatOnVm                         = ""
UnlicensedVirtualMachinesEvent.fullFormat                         = "There are {unlicensed} unlicensed virtual machines on host {host} - there are only {available} licenses available"
#args
UnlicensedVirtualMachinesEvent.available.label = "Available"
UnlicensedVirtualMachinesEvent.available.summary = "Available licenses"
UnlicensedVirtualMachinesEvent.unlicensed.label = "Unlicensed"
UnlicensedVirtualMachinesEvent.unlicensed.summary = "Unlicensed virtual machines"

###
UnlicensedVirtualMachinesFoundEvent.category                      = "info"
UnlicensedVirtualMachinesFoundEvent.description                   = "Unlicensed virtual machines found"
UnlicensedVirtualMachinesFoundEvent.formatOnComputeResource       = ""
UnlicensedVirtualMachinesFoundEvent.formatOnDatacenter            = ""
UnlicensedVirtualMachinesFoundEvent.formatOnHost                  = ""
UnlicensedVirtualMachinesFoundEvent.formatOnVm                    = ""
UnlicensedVirtualMachinesFoundEvent.fullFormat                    = "{unlicensed} unlicensed virtual machines found on host {host}"
#args
UnlicensedVirtualMachinesFoundEvent.available.label = "Available"
UnlicensedVirtualMachinesFoundEvent.available.summary = "Available licenses"

###
AllVirtualMachinesLicensedEvent.category                          = "info"
AllVirtualMachinesLicensedEvent.description                       = "All virtual machines are licensed"
AllVirtualMachinesLicensedEvent.formatOnComputeResource           = ""
AllVirtualMachinesLicensedEvent.formatOnDatacenter                = ""
AllVirtualMachinesLicensedEvent.formatOnHost                      = ""
AllVirtualMachinesLicensedEvent.formatOnVm                        = ""
AllVirtualMachinesLicensedEvent.fullFormat                        = "All running virtual machines are licensed"
###
VmRestartedOnAlternateHostEvent.category                          = "info"
VmRestartedOnAlternateHostEvent.description                       = "VM restarted on alternate host"
VmRestartedOnAlternateHostEvent.formatOnComputeResource           = ""
VmRestartedOnAlternateHostEvent.formatOnDatacenter                = ""
VmRestartedOnAlternateHostEvent.formatOnHost                      = "Virtual machine {vm.name} was restarted on this host since {sourceHost.name} failed"
VmRestartedOnAlternateHostEvent.formatOnVm                        = "Virtual machine was restarted on {host.name} since {sourceHost.name} failed"
VmRestartedOnAlternateHostEvent.fullFormat                        = "Virtual machine {vm.name} was restarted on {host.name} since {sourceHost.name} failed"
#args
VmRestartedOnAlternateHostEvent.sourceHost.label = "Source host ID"
VmRestartedOnAlternateHostEvent.sourceHost.summary = "Source host ID"
VmRestartedOnAlternateHostEvent.sourceHost.name.label = "Source host name"
VmRestartedOnAlternateHostEvent.sourceHost.name.summary = "Name of source host"

###
VmReconfiguredEvent.category                                      = "info"
VmReconfiguredEvent.description                                   = "VM reconfigured"
VmReconfiguredEvent.formatOnComputeResource                       = "Reconfigured {vm.name} on {host.name}"
VmReconfiguredEvent.formatOnDatacenter                            = "Reconfigured {vm.name} on {host.name}"
VmReconfiguredEvent.formatOnHost                                  = "Reconfigured {vm.name}"
VmReconfiguredEvent.formatOnVm                                    = "Reconfigured virtual machine"
VmReconfiguredEvent.fullFormat                                    = "Reconfigured {vm.name} on {host.name} in {datacenter.name}"
#args
VmReconfiguredEvent.configSpec.alternateGuestName.label = "Alternate guest name"
VmReconfiguredEvent.configSpec.alternateGuestName.summary = "Alternate guest name"
VmReconfiguredEvent.configSpec.annotation.label = "Annotation"
VmReconfiguredEvent.configSpec.annotation.summary = "Annotation"
VmReconfiguredEvent.configSpec.vAppConfigRemoved.label = "vApp configuration removed"
VmReconfiguredEvent.configSpec.vAppConfigRemoved.summary = "Should vApp configuration be removed?"
VmReconfiguredEvent.configSpec.changeTrackingEnabled.label = "Change tracking enabled"
VmReconfiguredEvent.configSpec.changeTrackingEnabled.summary = "Is change tracking enabled?"
VmReconfiguredEvent.configSpec.changeVersion.label = "Change version"
VmReconfiguredEvent.configSpec.changeVersion.summary = "Change version"
VmReconfiguredEvent.configSpec.cpuHotAddEnabled.label = "CPU hot add enabled"
VmReconfiguredEvent.configSpec.cpuHotAddEnabled.summary = "Is CPU hot add enabled?"
VmReconfiguredEvent.configSpec.cpuHotRemoveEnabled.label = "CPU hot remove enabled"
VmReconfiguredEvent.configSpec.cpuHotRemoveEnabled.summary = "Is CPU hot remove enabled?"
VmReconfiguredEvent.configSpec.guestId.label = "Guest ID"
VmReconfiguredEvent.configSpec.guestId.summary = "Guest ID"
VmReconfiguredEvent.configSpec.instanceUuid.label = "Instance UUID"
VmReconfiguredEvent.configSpec.instanceUuid.summary = "Instance UUID"
VmReconfiguredEvent.configSpec.locationId.label = "Location ID"
VmReconfiguredEvent.configSpec.locationId.summary = "Location ID"
VmReconfiguredEvent.configSpec.memoryHotAddEnabled.label = "Memory hot add enabled"
VmReconfiguredEvent.configSpec.memoryHotAddEnabled.summary = "Is memory hot add enabled?"
VmReconfiguredEvent.configSpec.memoryMB.label = "Memory size"
VmReconfiguredEvent.configSpec.memoryMB.summary = "Memory in megabytes"
VmReconfiguredEvent.configSpec.name.label = "Name"
VmReconfiguredEvent.configSpec.name.summary = "VM name"
VmReconfiguredEvent.configSpec.npivDesiredNodeWwns.label = "Desired NPIV node WWNs"
VmReconfiguredEvent.configSpec.npivDesiredNodeWwns.summary = "Desired NPIV node WWNs"
VmReconfiguredEvent.configSpec.npivDesiredPortWwns.label = "Desired NPIV node WWNs"
VmReconfiguredEvent.configSpec.npivDesiredPortWwns.summary = "Desired NPIV port WWNs"
VmReconfiguredEvent.configSpec.npivOnNonRdmDisks.label = "NPIV on non-RDM disks"
VmReconfiguredEvent.configSpec.npivOnNonRdmDisks.summary = "NPIV on non-RDM disks?"
VmReconfiguredEvent.configSpec.npivTemporaryDisabled.label = "NPIV temporarily disabled"
VmReconfiguredEvent.configSpec.npivTemporaryDisabled.summary = "NPIV temporarily disabled"
VmReconfiguredEvent.configSpec.npivWorldWideNameOp.label = "NPIV WorldWideName operation"
VmReconfiguredEvent.configSpec.npivWorldWideNameOp.summary = "Is NPIV WorldWideName operation?"
VmReconfiguredEvent.configSpec.npivWorldWideNameType.label = "NPIV WorldWideName type"
VmReconfiguredEvent.configSpec.npivWorldWideNameType.summary = "NPIV WorldWideName type"
VmReconfiguredEvent.configSpec.numCPUs.label = "Number of CPUs"
VmReconfiguredEvent.configSpec.numCPUs.summary = "Number of CPUs"
VmReconfiguredEvent.configSpec.preserveSwapOnPowerOff.label = "Preserve swap on power Off"
VmReconfiguredEvent.configSpec.preserveSwapOnPowerOff.summary = "Preserve swap on power Off"
VmReconfiguredEvent.configSpec.swapDirectory.label = "Swap directory"
VmReconfiguredEvent.configSpec.swapDirectory.summary = "Swap directory"
VmReconfiguredEvent.configSpec.swapPlacement.label = "Swap placement"
VmReconfiguredEvent.configSpec.swapPlacement.summary = "Swap placement"
VmReconfiguredEvent.configSpec.uuid.label = "UUID"
VmReconfiguredEvent.configSpec.uuid.summary = "UUID of VM"
VmReconfiguredEvent.configSpec.vAssertsEnabled.label = "vAsserts enabled"
VmReconfiguredEvent.configSpec.vAssertsEnabled.summary = "vAsserts enabled"
VmReconfiguredEvent.configSpec.version.label = "Version"
VmReconfiguredEvent.configSpec.version.summary = "Version"

###
VmMessageEvent.category                                           = "info"
VmMessageEvent.description                                        = "VM information message"
VmMessageEvent.formatOnComputeResource                            = "Message on {vm.name} on {host.name}: {message}"
VmMessageEvent.formatOnDatacenter                                 = "Message on {vm.name} on {host.name}: {message}"
VmMessageEvent.formatOnHost                                       = "Message on {vm.name}: {message}"
VmMessageEvent.formatOnVm                                         = "Message from {host.name}: {message}"
VmMessageEvent.fullFormat                                         = "Message on {vm.name} on {host.name} in {datacenter.name}: {message}"
#args
VmMessageEvent.message.label = "Message"
VmMessageEvent.message.summary = "Message about the VM"

###
VmMessageWarningEvent.category                                    = "warning"
VmMessageWarningEvent.description                                 = "VM warning message"
VmMessageWarningEvent.formatOnComputeResource                     = "Warning message on {vm.name} on {host.name}: {message}"
VmMessageWarningEvent.formatOnDatacenter                          = "Warning message on {vm.name} on {host.name}: {message}"
VmMessageWarningEvent.formatOnHost                                = "Warning message on {vm.name}: {message}"
VmMessageWarningEvent.formatOnVm                                  = "Warning message from {host.name}: {message}"
VmMessageWarningEvent.fullFormat                                  = "Warning message on {vm.name} on {host.name} in {datacenter.name}: {message}"
#args
VmMessageWarningEvent.message.label = "Message"
VmMessageWarningEvent.message.summary = "Message about the VM"

###
VmMessageErrorEvent.category                                      = "error"
VmMessageErrorEvent.description                                   = "VM error message"
VmMessageErrorEvent.formatOnComputeResource                       = "Error message on {vm.name} on {host.name}: {message}"
VmMessageErrorEvent.formatOnDatacenter                            = "Error message on {vm.name} on {host.name}: {message}"
VmMessageErrorEvent.formatOnHost                                  = "Error message on {vm.name}: {message}"
VmMessageErrorEvent.formatOnVm                                    = "Error message from {host.name}: {message}"
VmMessageErrorEvent.fullFormat                                    = "Error message on {vm.name} on {host.name} in {datacenter.name}: {message}"
#args
VmMessageErrorEvent.message.label = "Message"
VmMessageErrorEvent.message.summary = "Message about the VM"

###
VmConfigMissingEvent.category                                     = "info"
VmConfigMissingEvent.description                                  = "VM configuration missing"
VmConfigMissingEvent.formatOnComputeResource                      = "Configuration file for {vm.name} on {host.name} cannot be found"
VmConfigMissingEvent.formatOnDatacenter                           = "Configuration file for {vm.name} on {host.name} cannot be found"
VmConfigMissingEvent.formatOnHost                                 = "Configuration file for {vm.name} cannot be found"
VmConfigMissingEvent.formatOnVm                                   = "Configuration file cannot be found"
VmConfigMissingEvent.fullFormat                                   = "Configuration file for {vm.name} on {host.name} in {datacenter.name} cannot be found"
###
PermissionAddedEvent.category                                     = "info"
PermissionAddedEvent.description                                  = "Permission added"
PermissionAddedEvent.formatOnComputeResource                      = ""
PermissionAddedEvent.formatOnDatacenter                           = ""
PermissionAddedEvent.formatOnHost                                 = ""
PermissionAddedEvent.formatOnVm                                   = ""
PermissionAddedEvent.fullFormat                                   = "Permission created for {principal} on {entity.name}, role is {role.name}, propagation is {propagate.@enum.auth.Permission.propagate}"
#args
PermissionAddedEvent.propagate.label = "Propagate"
PermissionAddedEvent.propagate.summary = "Is permission propagated?"
PermissionAddedEvent.role.name.label = "Role name"
PermissionAddedEvent.role.name.summary = "Role name"
PermissionAddedEvent.role.roleId.label = "Role ID"
PermissionAddedEvent.role.roleId.summary = "Role ID"

###
PermissionRemovedEvent.category                                   = "info"
PermissionRemovedEvent.description                                = "Permission removed"
PermissionRemovedEvent.formatOnComputeResource                    = ""
PermissionRemovedEvent.formatOnDatacenter                         = ""
PermissionRemovedEvent.formatOnHost                               = ""
PermissionRemovedEvent.formatOnVm                                 = ""
PermissionRemovedEvent.fullFormat                                 = "Permission rule removed for {principal} on {entity.name}"
###
PermissionUpdatedEvent.category                                   = "info"
PermissionUpdatedEvent.description                                = "Permission updated"
PermissionUpdatedEvent.formatOnComputeResource                    = ""
PermissionUpdatedEvent.formatOnDatacenter                         = ""
PermissionUpdatedEvent.formatOnHost                               = ""
PermissionUpdatedEvent.formatOnVm                                 = ""
PermissionUpdatedEvent.fullFormat                                 = "Permission changed for {principal} on {entity.name}, role is {role.name}, propagation is {propagate.@enum.auth.Permission.propagate}"
#args
PermissionUpdatedEvent.propagate.label = "Propagate"
PermissionUpdatedEvent.propagate.summary = "Is permission propagated?"
PermissionUpdatedEvent.role.name.label = "Role name"
PermissionUpdatedEvent.role.name.summary = "Role name"
PermissionUpdatedEvent.role.roleId.label = "Role ID"
PermissionUpdatedEvent.role.roleId.summary = "Role ID"

###
RoleAddedEvent.category                                           = "info"
RoleAddedEvent.description                                        = "Role added"
RoleAddedEvent.formatOnComputeResource                            = ""
RoleAddedEvent.formatOnDatacenter                                 = ""
RoleAddedEvent.formatOnHost                                       = ""
RoleAddedEvent.formatOnVm                                         = ""
RoleAddedEvent.fullFormat                                         = "New role {role.name} created"
###
RoleRemovedEvent.category                                         = "info"
RoleRemovedEvent.description                                      = "Role removed"
RoleRemovedEvent.formatOnComputeResource                          = ""
RoleRemovedEvent.formatOnDatacenter                               = ""
RoleRemovedEvent.formatOnHost                                     = ""
RoleRemovedEvent.formatOnVm                                       = ""
RoleRemovedEvent.fullFormat                                       = "Role {role.name} removed"
###
RoleUpdatedEvent.category                                         = "info"
RoleUpdatedEvent.description                                      = "Role updated"
RoleUpdatedEvent.formatOnComputeResource                          = ""
RoleUpdatedEvent.formatOnDatacenter                               = ""
RoleUpdatedEvent.formatOnHost                                     = ""
RoleUpdatedEvent.formatOnVm                                       = ""
RoleUpdatedEvent.fullFormat                                       = "Modifed role {role.name}"
###
CustomFieldDefRenamedEvent.category                               = "info"
CustomFieldDefRenamedEvent.description                            = "Custom field definition renamed"
CustomFieldDefRenamedEvent.formatOnComputeResource                = ""
CustomFieldDefRenamedEvent.formatOnDatacenter                     = ""
CustomFieldDefRenamedEvent.formatOnHost                           = ""
CustomFieldDefRenamedEvent.formatOnVm                             = ""
CustomFieldDefRenamedEvent.fullFormat                             = "Renamed field definition from {name} to {newName}"
#args
CustomFieldDefRenamedEvent.newName.label = "New name"
CustomFieldDefRenamedEvent.newName.summary = "New name"

###
CustomFieldDefRemovedEvent.category                               = "info"
CustomFieldDefRemovedEvent.description                            = "Custom field definition removed"
CustomFieldDefRemovedEvent.formatOnComputeResource                = ""
CustomFieldDefRemovedEvent.formatOnDatacenter                     = ""
CustomFieldDefRemovedEvent.formatOnHost                           = ""
CustomFieldDefRemovedEvent.formatOnVm                             = ""
CustomFieldDefRemovedEvent.fullFormat                             = "Removed field definition {name}"
###
VmRelocatedEvent.category                                         = "info"
VmRelocatedEvent.description                                      = "VM relocated"
VmRelocatedEvent.formatOnComputeResource                          = ""
VmRelocatedEvent.formatOnDatacenter                               = ""
VmRelocatedEvent.formatOnHost                                     = ""
VmRelocatedEvent.formatOnVm                                       = ""
VmRelocatedEvent.fullFormat                                       = "Completed the relocation of the virtual machine"
#args
VmRelocatedEvent.sourceHost.label = "Source host ID"
VmRelocatedEvent.sourceHost.summary = "Source host ID"
VmRelocatedEvent.sourceHost.name.label = "Source host name"
VmRelocatedEvent.sourceHost.name.summary = "Source host name"

###
CustomFieldValueChangedEvent.category                             = "info"
CustomFieldValueChangedEvent.description                          = "Custom field value changed"
CustomFieldValueChangedEvent.formatOnComputeResource              = "Changed custom field {name} on {entity.name} to {value}"
CustomFieldValueChangedEvent.formatOnDatacenter                   = "Changed custom field {name} on {entity.name} to {value}"
CustomFieldValueChangedEvent.formatOnHost                         = "Changed custom field {name} on {entity.name} to {value}"
CustomFieldValueChangedEvent.formatOnVm                           = "Changed custom field {name} to {value}"
CustomFieldValueChangedEvent.fullFormat                           = "Changed custom field {name} on {entity.name} in {datacenter.name} to {value}"
#args
CustomFieldValueChangedEvent.entity.label = "Entity ID"
CustomFieldValueChangedEvent.entity.summary = "Changed entity ID"
CustomFieldValueChangedEvent.entity.name.label = "Entity name"
CustomFieldValueChangedEvent.entity.name.summary = "Name of the changed entity"
CustomFieldValueChangedEvent.fieldKey.label = "Field key"
CustomFieldValueChangedEvent.fieldKey.summary = "Field key"
CustomFieldValueChangedEvent.name.label = "Name"
CustomFieldValueChangedEvent.name.summary = "Field name"
CustomFieldValueChangedEvent.value.label = "Value"
CustomFieldValueChangedEvent.value.summary = "New field value"

###
VmRelocateSpecPoolEvent.category                                  = "info"
VmRelocateSpecPoolEvent.description                               = "VM moved to another resource pool"
VmRelocateSpecPoolEvent.formatOnComputeResource                   = "Moved {vm.name} from resource pool {srcPool.name} to {destPool.name}"
VmRelocateSpecPoolEvent.formatOnDatacenter                        = "Moved {vm.name} from resource pool {srcPool.name} to {destPool.name}"
VmRelocateSpecPoolEvent.formatOnHost                              = "Moved {vm.name} from resource pool {srcPool.name} to {destPool.name}"
VmRelocateSpecPoolEvent.formatOnVm                                = "Moved from resource pool {srcPool.name} to {destPool.name} in {datacenter.name}"
VmRelocateSpecPoolEvent.fullFormat                                = "Moved {vm.name} from resource pool {srcPool.name} to {destPool.name} in {datacenter.name}"
###
SessionTerminatedEvent.category                                   = "info"
SessionTerminatedEvent.description                                = "Session stopped"
SessionTerminatedEvent.formatOnComputeResource                    = ""
SessionTerminatedEvent.formatOnDatacenter                         = ""
SessionTerminatedEvent.formatOnHost                               = ""
SessionTerminatedEvent.formatOnVm                                 = ""
SessionTerminatedEvent.fullFormat                                 = "A session for user '{terminatedUsername}' has stopped"
#args
SessionTerminatedEvent.sessionId.label = "Session ID"
SessionTerminatedEvent.sessionId.summary = "Stopped session ID"
SessionTerminatedEvent.terminatedUsername.label = "Deleted user name"
SessionTerminatedEvent.terminatedUsername.summary = "User name for the stopped session"

### 
VmBeingRelocatedEvent.category                                    = "info"
VmBeingRelocatedEvent.description                                 = "VM relocating"
VmBeingRelocatedEvent.formatOnComputeResource                     = "Relocating {vm.name} from {host.name} to {destHost.name}"
VmBeingRelocatedEvent.formatOnDatacenter                          = "Relocating {vm.name} from {host.name} to {destHost.name}"
VmBeingRelocatedEvent.formatOnHost                                = "Relocating {vm.name} to {destHost.name}"
VmBeingRelocatedEvent.formatOnVm                                  = "Relocating from {host.name} to {destHost.name}"
VmBeingRelocatedEvent.fullFormat                                  = "Relocating {vm.name} in {datacenter.name} from {host.name} to {destHost.name}"
#args
VmBeingRelocatedEvent.destHost.label = "Destination host ID"
VmBeingRelocatedEvent.destHost.summary = "Destination host ID"
VmBeingRelocatedEvent.destHost.name.label = "Destination host name"
VmBeingRelocatedEvent.destHost.name.summary = "Destination host name"

###
CustomFieldDefAddedEvent.category                                 = "info"
CustomFieldDefAddedEvent.description                              = "Custom field definition added"
CustomFieldDefAddedEvent.formatOnComputeResource                  = ""
CustomFieldDefAddedEvent.formatOnDatacenter                       = ""
CustomFieldDefAddedEvent.formatOnHost                             = ""
CustomFieldDefAddedEvent.formatOnVm                               = ""
CustomFieldDefAddedEvent.fullFormat                               = "Created new custom field definition {name}"
###
GlobalMessageChangedEvent.category                                = "info"
GlobalMessageChangedEvent.description                             = "Message changed"
GlobalMessageChangedEvent.formatOnComputeResource                 = ""
GlobalMessageChangedEvent.formatOnDatacenter                      = ""
GlobalMessageChangedEvent.formatOnHost                            = ""
GlobalMessageChangedEvent.formatOnVm                              = ""
GlobalMessageChangedEvent.fullFormat                              = "The message changed: {message}"
#args
GlobalMessageChangedEvent.message.label = "message"
GlobalMessageChangedEvent.message.summary = "Message changed"

###
EnteringMaintenanceModeEvent.category                             = "info"
EnteringMaintenanceModeEvent.description                          = "Entering maintenance mode"
EnteringMaintenanceModeEvent.formatOnComputeResource              = "Host {host.name} has started to enter maintenance mode"
EnteringMaintenanceModeEvent.formatOnDatacenter                   = "Host {host.name} has started to enter maintenance mode"
EnteringMaintenanceModeEvent.formatOnHost                         = "Started to enter maintenance mode. Waiting for virtual machines to shut down, suspend, or migrate"
EnteringMaintenanceModeEvent.formatOnVm                           = ""
EnteringMaintenanceModeEvent.fullFormat                           = "Host {host.name} in {datacenter.name} has started to enter maintenance mode"
###
EnteredMaintenanceModeEvent.category                              = "info"
EnteredMaintenanceModeEvent.description                           = "Entered maintenance mode"
EnteredMaintenanceModeEvent.formatOnComputeResource               = "Host {host.name} in {datacenter.name} has entered maintenance mode"
EnteredMaintenanceModeEvent.formatOnDatacenter                    = "Host {host.name} in {datacenter.name} has entered maintenance mode"
EnteredMaintenanceModeEvent.formatOnHost                          = "Enter maintenance mode completed. All virtual machine operations are disabled"
EnteredMaintenanceModeEvent.formatOnVm                            = ""
EnteredMaintenanceModeEvent.fullFormat                            = "Host {host.name} in {datacenter.name} has entered maintenance mode"
###
ExitMaintenanceModeEvent.category                                 = "info"
ExitMaintenanceModeEvent.description                              = "Exit maintenance mode"
ExitMaintenanceModeEvent.formatOnComputeResource                  = "Host {host.name} has exited maintenance mode"
ExitMaintenanceModeEvent.formatOnDatacenter                       = "Host {host.name} has exited maintenance mode"
ExitMaintenanceModeEvent.formatOnHost                             = "Exited maintenance mode"
ExitMaintenanceModeEvent.formatOnVm                               = ""
ExitMaintenanceModeEvent.fullFormat                               = "Host {host.name} in {datacenter.name} has exited maintenance mode"
###
TimedOutHostOperationEvent.category                               = "warning"
TimedOutHostOperationEvent.description                            = "Host operation timed out"
TimedOutHostOperationEvent.formatOnComputeResource                = "The operation performed on host {host.name} timed out"
TimedOutHostOperationEvent.formatOnDatacenter                     = "The operation performed on host {host.name} timed out"
TimedOutHostOperationEvent.formatOnHost                           = "The operation timed out"
TimedOutHostOperationEvent.formatOnVm                             = ""
TimedOutHostOperationEvent.fullFormat                             = "The operation performed on {host.name} in {datacenter.name} timed out"
###
CanceledHostOperationEvent.category                               = "info"
CanceledHostOperationEvent.description                            = "Canceled host operation"
CanceledHostOperationEvent.formatOnComputeResource                = "The operation performed on host {host.name} was canceled"
CanceledHostOperationEvent.formatOnDatacenter                     = "The operation performed on host {host.name} was canceled"
CanceledHostOperationEvent.formatOnHost                           = "The operation was canceled"
CanceledHostOperationEvent.formatOnVm                             = ""
CanceledHostOperationEvent.fullFormat                             = "The operation performed on host {host.name} in {datacenter.name} was canceled"
###
VmRegisteredEvent.category                                        = "info"
VmRegisteredEvent.description                                     = "VM registered"
VmRegisteredEvent.formatOnComputeResource                         = "Registered {vm.name} on {host.name}"
VmRegisteredEvent.formatOnDatacenter                              = "Registered {vm.name} on {host.name}"
VmRegisteredEvent.formatOnHost                                    = "Registered {vm.name}"
VmRegisteredEvent.formatOnVm                                      = "Registered with vCenter"
VmRegisteredEvent.fullFormat                                      = "Registered {vm.name} on {host.name} in {datacenter.name}"
###
HostDasDisablingEvent.category                                    = "info"
HostDasDisablingEvent.description                                 = "Disabling HA"
HostDasDisablingEvent.formatOnComputeResource                     = "HA is being disabled on {host.name}"
HostDasDisablingEvent.formatOnDatacenter                          = "HA is being disabled on {host.name}"
HostDasDisablingEvent.formatOnHost                                = "Disabling HA"
HostDasDisablingEvent.formatOnVm                                  = ""
HostDasDisablingEvent.fullFormat                                  = "HA is being disabled on {host.name} in cluster {computeResource.name} in datacenter {datacenter.name}"
###
HostDasErrorEvent.category                                        = "error"
HostDasErrorEvent.description                                     = "HA agent error"
HostDasErrorEvent.formatOnComputeResource                         = "HA agent on host {host.name} has an error {message} : {reason.@enum.HostDasErrorEvent.HostDasErrorReason}"
HostDasErrorEvent.formatOnDatacenter                              = "HA agent on host {host.name} has an error {message} : {reason.@enum.HostDasErrorEvent.HostDasErrorReason}"
HostDasErrorEvent.formatOnHost                                    = "HA agent has an error {message} : {reason.@enum.HostDasErrorEvent.HostDasErrorReason}"
HostDasErrorEvent.formatOnVm                                      = ""
HostDasErrorEvent.fullFormat                                      = "HA agent on {host.name} in cluster {computeResource.name} in {datacenter.name} has an error {message}:  {reason.@enum.HostDasErrorEvent.HostDasErrorReason}"
#args
HostDasErrorEvent.message.label = "Message"
HostDasErrorEvent.message.summary = "Additional message"
HostDasErrorEvent.reason.label = "Reason"
HostDasErrorEvent.reason.summary = "Reason for the error"

###
DasHostFailedEvent.category                                       = "error"
DasHostFailedEvent.description                                    = "HA host failed"
DasHostFailedEvent.formatOnComputeResource                        = "A possible host failure has been detected by HA on {failedHost.name}"
DasHostFailedEvent.formatOnDatacenter                             = "A possible host failure has been detected by HA on {failedHost.name}"
DasHostFailedEvent.formatOnHost                                   = ""
DasHostFailedEvent.formatOnVm                                     = ""
DasHostFailedEvent.fullFormat                                     = "A possible host failure has been detected by HA on {failedHost.name} in cluster {computeResource.name} in {datacenter.name}"
#args
DasHostFailedEvent.failedHost.label = "Failed host ID"
DasHostFailedEvent.failedHost.summary = "Failed host ID"
DasHostFailedEvent.failedHost.name.label = "Failed host name"
DasHostFailedEvent.failedHost.name.summary = "Name of failed host"

###
HostDasOkEvent.category                                           = "info"
HostDasOkEvent.description                                        = "HA agent configured"
HostDasOkEvent.formatOnComputeResource                            = "HA agent on host {host.name} is configured correctly"
HostDasOkEvent.formatOnDatacenter                                 = "HA agent on host {host.name} is configured correctly"
HostDasOkEvent.formatOnHost                                       = "HA agent is configured correctly"
HostDasOkEvent.formatOnVm                                         = ""
HostDasOkEvent.fullFormat                                         = "HA agent on host {host.name} in cluster {computeResource.name} in {datacenter.name} is configured correctly"
###
HostDasEnabledEvent.category                                      = "info"
HostDasEnabledEvent.description                                   = "Host HA agent enabled"
HostDasEnabledEvent.formatOnComputeResource                       = "HA agent enabled on {host.name}"
HostDasEnabledEvent.formatOnDatacenter                            = "HA agent enabled on {host.name}"
HostDasEnabledEvent.formatOnHost                                  = "HA agent enabled"
HostDasEnabledEvent.formatOnVm                                    = ""
HostDasEnabledEvent.fullFormat                                    = "HA agent enabled on {host.name} in cluster {computeResource.name} in {datacenter.name}"
###
HostDasDisabledEvent.category                                     = "info"
HostDasDisabledEvent.description                                  = "Host HA agent disabled"
HostDasDisabledEvent.formatOnComputeResource                      = "HA agent disabled on {host.name}"
HostDasDisabledEvent.formatOnDatacenter                           = "HA agent disabled on {host.name}"
HostDasDisabledEvent.formatOnHost                                 = "HA agent disabled"
HostDasDisabledEvent.formatOnVm                                   = ""
HostDasDisabledEvent.fullFormat                                   = "HA agent disabled on {host.name} in cluster {computeResource.name} in {datacenter.name}"
###
HostDasEnablingEvent.category                                     = "warning"
HostDasEnablingEvent.description                                  = "Enabling host HA agent"
HostDasEnablingEvent.formatOnComputeResource                      = "Enabling HA agent on {host.name}"
HostDasEnablingEvent.formatOnDatacenter                           = "Enabling HA agent on {host.name}"
HostDasEnablingEvent.formatOnHost                                 = "Enabling HA agent"
HostDasEnablingEvent.formatOnVm                                   = ""
HostDasEnablingEvent.fullFormat                                   = "Enabling HA agent on {host.name} in cluster {computeResource.name} in {datacenter.name}"
###
DasHostIsolatedEvent.category                                     = "warning"
DasHostIsolatedEvent.description                                  = "HA host isolated"
DasHostIsolatedEvent.formatOnComputeResource                      = "Host {isolatedHost.name} has been isolated"
DasHostIsolatedEvent.formatOnDatacenter                           = "Host {isolatedHost.name} has been isolated from cluster {computeResource.name}"
DasHostIsolatedEvent.formatOnHost                                 = "Host has been isolated from cluster"
DasHostIsolatedEvent.formatOnVm                                   = ""
DasHostIsolatedEvent.fullFormat                                   = "Host {isolatedHost.name} has been isolated from cluster {computeResource.name} in {datacenter.name}"
#args
DasHostIsolatedEvent.isolatedHost.label = "Isolated host ID"
DasHostIsolatedEvent.isolatedHost.summary = "Isolated host ID"
DasHostIsolatedEvent.isolatedHost.name.label = "Isolated host name"
DasHostIsolatedEvent.isolatedHost.name.summary = "Name of isolated host"

###
DasClusterIsolatedEvent.category                                  = "error"
DasClusterIsolatedEvent.description                               = "All HA hosts isolated"
DasClusterIsolatedEvent.formatOnComputeResource                   = "All hosts in the HA cluster were isolated from the network. Check the network configuration for proper network redundancy in the management network"
DasClusterIsolatedEvent.formatOnDatacenter                        = "All hosts in the HA cluster {computeResource.name} were isolated from the network. Check the network configuration for proper network redundancy in the management network"
DasClusterIsolatedEvent.formatOnHost                              = "All hosts in the HA cluster were isolated from the network. Check the network configuration for proper network redundancy in the management network"
DasClusterIsolatedEvent.formatOnVm                                = ""
DasClusterIsolatedEvent.fullFormat                                = "All hosts in the HA cluster {computeResource.name} in {datacenter.name} were isolated from the network. Check the network configuration for proper network redundancy in the management network."
###
DasAdmissionControlEnabledEvent.category                          = "info"
DasAdmissionControlEnabledEvent.description                       = "HA admission control enabled"
DasAdmissionControlEnabledEvent.formatOnComputeResource           = "HA admission control enabled"
DasAdmissionControlEnabledEvent.formatOnDatacenter                = "HA admission control enabled on cluster {computeResource.name}"
DasAdmissionControlEnabledEvent.formatOnHost                      = ""
DasAdmissionControlEnabledEvent.formatOnVm                        = ""
DasAdmissionControlEnabledEvent.fullFormat                        = "HA admission control enabled on cluster {computeResource.name} in {datacenter.name}"
###
DasAdmissionControlDisabledEvent.category                         = "info"
DasAdmissionControlDisabledEvent.description                      = "HA admission control disabled"
DasAdmissionControlDisabledEvent.formatOnComputeResource          = "HA admission control disabled"
DasAdmissionControlDisabledEvent.formatOnDatacenter               = "HA admission control disabled on cluster {computeResource.name}"
DasAdmissionControlDisabledEvent.formatOnHost                     = ""
DasAdmissionControlDisabledEvent.formatOnVm                       = ""
DasAdmissionControlDisabledEvent.fullFormat                       = "HA admission control disabled on cluster {computeResource.name} in {datacenter.name}"
###
DasEnabledEvent.category                                          = "info"
DasEnabledEvent.description                                       = "HA enabled"
DasEnabledEvent.formatOnComputeResource                           = "HA enabled"
DasEnabledEvent.formatOnDatacenter                                = "HA enabled on cluster {computeResource.name}"
DasEnabledEvent.formatOnHost                                      = ""
DasEnabledEvent.formatOnVm                                        = ""
DasEnabledEvent.fullFormat                                        = "HA enabled on cluster {computeResource.name} in {datacenter.name}"
###
DasDisabledEvent.category                                         = "info"
DasDisabledEvent.description                                      = "HA disabled"
DasDisabledEvent.formatOnComputeResource                          = "HA disabled"
DasDisabledEvent.formatOnDatacenter                               = "HA disabled on cluster {computeResource.name}"
DasDisabledEvent.formatOnHost                                     = ""
DasDisabledEvent.formatOnVm                                       = ""
DasDisabledEvent.fullFormat                                       = "HA disabled on cluster {computeResource.name} in {datacenter.name}"
###
VmFailoverFailed.category                                         = "warning"
VmFailoverFailed.description                                      = "Failover unsuccessful"
VmFailoverFailed.formatOnComputeResource                          = "Failover unsuccessful for {vm.name} on {host.name}"
VmFailoverFailed.formatOnDatacenter                               = "Failover unsuccessful for {vm.name} on {host.name} in cluster {computeResource.name}"
VmFailoverFailed.formatOnHost                                     = "Failover unsuccessful for {vm.name}"
VmFailoverFailed.formatOnVm                                       = "Failover unsuccessful for this virtual machine"
VmFailoverFailed.fullFormat                                       = "Failover unsuccessful for {vm.name} on {host.name} in cluster {computeResource.name} in {datacenter.name}"
###
NotEnoughResourcesToStartVmEvent.category                         = "info"
NotEnoughResourcesToStartVmEvent.description                      = "Not enough resources to start VM"
NotEnoughResourcesToStartVmEvent.formatOnComputeResource          = "Not enough resources to failover {vm.name}"
NotEnoughResourcesToStartVmEvent.formatOnDatacenter               = "Not enough resources to failover {vm.name} in {computeResource.name}"
NotEnoughResourcesToStartVmEvent.formatOnHost                     = "Not enough resources to failover {vm.name}"
NotEnoughResourcesToStartVmEvent.formatOnVm                       = "Not enough resources to failover"
NotEnoughResourcesToStartVmEvent.fullFormat                       = "Not enough resources to failover {vm.name} in {computeResource.name} in {datacenter.name}"
###
VmPowerOffOnIsolationEvent.category                               = "info"
VmPowerOffOnIsolationEvent.description                            = "VM powered Off on isolated host"
VmPowerOffOnIsolationEvent.formatOnComputeResource                = "{vm.name} was powered Off on the isolated host {isolatedHost.name}"
VmPowerOffOnIsolationEvent.formatOnDatacenter                     = "{vm.name} was powered Off on the isolated host {isolatedHost.name} in cluster {computeResource.name}"
VmPowerOffOnIsolationEvent.formatOnHost                           = "{vm.name} was powered Off on the isolated host {isolatedHost.name}"
VmPowerOffOnIsolationEvent.formatOnVm                             = "Virtual machine was powered Off on the isolated host {isolatedHost.name}"
VmPowerOffOnIsolationEvent.fullFormat                             = "{vm.name} was powered Off on the isolated host {isolatedHost.name} in cluster {computeResource.name} in {datacenter.name}"
#args
VmPowerOffOnIsolationEvent.isolatedHost.label = "Isolated host ID"
VmPowerOffOnIsolationEvent.isolatedHost.summary = "Isolated host ID"
VmPowerOffOnIsolationEvent.isolatedHost.name.label = "Isolated host name"
VmPowerOffOnIsolationEvent.isolatedHost.name.summary = "Name of isolated host"

###
VmShutdownOnIsolationEvent.category                               = "info"
VmShutdownOnIsolationEvent.description                            = "VM shut down on isolated host"
VmShutdownOnIsolationEvent.formatOnComputeResource                = "{vm.name} was shut down on the isolated host {isolatedHost.name}:  {shutdownResult.@enum.VmShutdownOnIsolationEvent.Operation}"
VmShutdownOnIsolationEvent.formatOnDatacenter                     = "{vm.name} was shut down on the isolated host {isolatedHost.name} in cluster {computeResource.name}:  {shutdownResult.@enum.VmShutdownOnIsolationEvent.Operation}"
VmShutdownOnIsolationEvent.formatOnHost                           = "{vm.name} was shut down on the isolated host {isolatedHost.name}:  {shutdownResult.@enum.VmShutdownOnIsolationEvent.Operation}"
VmShutdownOnIsolationEvent.formatOnVm                             = "Virtual machine was shut down on the isolated host {isolatedHost.name}:  {shutdownResult.@enum.VmShutdownOnIsolationEvent.Operation}"
VmShutdownOnIsolationEvent.fullFormat                             = "{vm.name} was shut down on the isolated host {isolatedHost.name} in cluster {computeResource.name} in {datacenter.name}:  {shutdownResult.@enum.VmShutdownOnIsolationEvent.Operation}"
#args
VmShutdownOnIsolationEvent.isolatedHost.label = "Isolated host ID"
VmShutdownOnIsolationEvent.isolatedHost.summary = "Isolated host ID"
VmShutdownOnIsolationEvent.isolatedHost.name.label = "Isolated host name"
VmShutdownOnIsolationEvent.isolatedHost.name.summary = "Name of isolated host"
VmShutdownOnIsolationEvent.shutdownResult.label = "Shutdown result"
VmShutdownOnIsolationEvent.shutdownResult.summary = "Shutdown result"

###
AlreadyAuthenticatedSessionEvent.category                         = "info"
AlreadyAuthenticatedSessionEvent.description                      = "Already authenticated"
AlreadyAuthenticatedSessionEvent.formatOnComputeResource          = ""
AlreadyAuthenticatedSessionEvent.formatOnDatacenter               = ""
AlreadyAuthenticatedSessionEvent.formatOnHost                     = ""
AlreadyAuthenticatedSessionEvent.formatOnVm                       = ""
AlreadyAuthenticatedSessionEvent.fullFormat                       = "User cannot logon since the user is already logged on"
###
VcAgentUpgradedEvent.category                                     = "info"
VcAgentUpgradedEvent.description                                  = "vCenter agent upgraded"
VcAgentUpgradedEvent.formatOnComputeResource                      = "vCenter agent has been upgraded on {host.name}"
VcAgentUpgradedEvent.formatOnDatacenter                           = "vCenter agent has been upgraded on {host.name}"
VcAgentUpgradedEvent.formatOnHost                                 = "vCenter agent has been upgraded"
VcAgentUpgradedEvent.formatOnVm                                   = ""
VcAgentUpgradedEvent.fullFormat                                   = "vCenter agent has been upgraded on {host.name} in {datacenter.name}"
###
VcAgentUpgradeFailedEvent.category                                = "error"
VcAgentUpgradeFailedEvent.description                             = "Cannot complete vCenter agent upgrade"
VcAgentUpgradeFailedEvent.formatOnComputeResource                 = "Cannot upgrade vCenter agent on {host.name}. {reason.@enum.fault.AgentInstallFailed.Reason}"
VcAgentUpgradeFailedEvent.formatOnDatacenter                      = "Cannot upgrade vCenter agent on {host.name}. {reason.@enum.fault.AgentInstallFailed.Reason}"
VcAgentUpgradeFailedEvent.formatOnHost                            = "Cannot upgrade vCenter agent. {reason.@enum.fault.AgentInstallFailed.Reason}"
VcAgentUpgradeFailedEvent.formatOnVm                              = ""
VcAgentUpgradeFailedEvent.fullFormat                              = "Cannot upgrade vCenter agent on {host.name} in {datacenter.name}. {reason.@enum.fault.AgentInstallFailed.Reason}"
#args
VcAgentUpgradeFailedEvent.reason.label = "Reason"
VcAgentUpgradeFailedEvent.reason.summary = "Reason not completed"

###
VcAgentUninstallEvent.category                                     = "info"
VcAgentUninstallEvent.description                                  = "vCenter agent uninstalled"
VcAgentUninstallEvent.formatOnComputeResource                      = "vCenter agent has been uninstalled from {host.name}"
VcAgentUninstallEvent.formatOnDatacenter                           = "vCenter agent has been uninstalled from {host.name}"
VcAgentUninstallEvent.formatOnHost                                 = "vCenter agent has been uninstalled"
VcAgentUninstallEvent.formatOnVm                                   = ""
VcAgentUninstallEvent.fullFormat                                   = "vCenter agent has been uninstalled from {host.name} in {datacenter.name}"
#args
VcAgentUninstallFailedEvent.reason.label = "Reason"
VcAgentUninstallFailedEvent.reason.summary = "Reason for the failure"

###
VcAgentUninstallFailedEvent.category                                = "error"
VcAgentUninstallFailedEvent.description                             = "Cannot uninstall vCenter agent"
VcAgentUninstallFailedEvent.formatOnComputeResource                 = "Cannot uninstall vCenter agent from {host.name}. {reason.@enum.fault.AgentInstallFailed.Reason}"
VcAgentUninstallFailedEvent.formatOnDatacenter                      = "Cannot uninstall vCenter agent from {host.name}. {reason.@enum.fault.AgentInstallFailed.Reason}"
VcAgentUninstallFailedEvent.formatOnHost                            = "Cannot uninstall vCenter agent. {reason.@enum.fault.AgentInstallFailed.Reason}"
VcAgentUninstallFailedEvent.formatOnVm                              = ""
VcAgentUninstallFailedEvent.fullFormat                              = "Cannot uninstall vCenter agent from {host.name} in {datacenter.name}. {reason.@enum.fault.AgentInstallFailed.Reason}"
###
VmUuidAssignedEvent.category                                      = "info"
VmUuidAssignedEvent.description                                   = "VM UUID assigned"
VmUuidAssignedEvent.formatOnComputeResource                       = "Assigned new BIOS UUID ({uuid}) to {vm.name} on {host.name}"
VmUuidAssignedEvent.formatOnDatacenter                            = "Assigned new BIOS UUID ({uuid}) to {vm.name} on {host.name}"
VmUuidAssignedEvent.formatOnHost                                  = "Assigned new BIOS UUID ({uuid}) to {vm.name}"
VmUuidAssignedEvent.formatOnVm                                    = "Assigned new BIOS UUID ({uuid})"
VmUuidAssignedEvent.fullFormat                                    = "Assigned new BIOS UUID ({uuid}) to {vm.name} on {host.name} in {datacenter.name}"
#args
VmUuidAssignedEvent.uuid.label = "UUID"
VmUuidAssignedEvent.uuid.summary = "UUID"

###
VmUuidChangedEvent.category                                       = "warning"
VmUuidChangedEvent.description                                    = "VM UUID Changed"
VmUuidChangedEvent.formatOnComputeResource                        = "Changed BIOS UUID from {oldUuid} to {newUuid} for {vm.name} on {host.name}"
VmUuidChangedEvent.formatOnDatacenter                             = "Changed BIOS UUID from {oldUuid} to {newUuid} for {vm.name} on {host.name}"
VmUuidChangedEvent.formatOnHost                                   = "Changed BIOS UUID from {oldUuid} to {newUuid} for {vm.name}"
VmUuidChangedEvent.formatOnVm                                     = "BIOS UUID was changed from {oldUuid} to {newUuid}"
VmUuidChangedEvent.fullFormat                                     = "Changed BIOS UUID from {oldUuid} to {newUuid} for {vm.name} on {host.name} in {datacenter.name}"
#args
VmUuidChangedEvent.newUuid.label = "New UUID"
VmUuidChangedEvent.newUuid.summary = "New UUID"
VmUuidChangedEvent.oldUuid.label = "Previous UUID"
VmUuidChangedEvent.oldUuid.summary = "Previous UUID"

###
HostAddFailedEvent.category                                       = "error"
HostAddFailedEvent.description                                    = "Cannot add host"
HostAddFailedEvent.formatOnComputeResource                        = "Cannot add host {hostname}"
HostAddFailedEvent.formatOnDatacenter                             = "Cannot add host {hostname}"
HostAddFailedEvent.formatOnHost                                   = ""
HostAddFailedEvent.formatOnVm                                     = ""
HostAddFailedEvent.fullFormat                                     = "Cannot add host {hostname} to datacenter {datacenter.name}"
#args
HostAddFailedEvent.hostname.label = "Host name"
HostAddFailedEvent.hostname.summary = "Name of the host that cannot be added"

###
HostAddedEvent.category                                           = "info"
HostAddedEvent.description                                        = "Host Added"
HostAddedEvent.formatOnComputeResource                            = "Added host {host.name}"
HostAddedEvent.formatOnDatacenter                                 = "Added host {host.name}"
HostAddedEvent.formatOnHost                                       = ""
HostAddedEvent.formatOnVm                                         = ""
HostAddedEvent.fullFormat                                         = "Added host {host.name} to datacenter {datacenter.name}"
###
TemplateBeingUpgradedEvent.category                               = "info"
TemplateBeingUpgradedEvent.description                            = "Upgrading template"
TemplateBeingUpgradedEvent.formatOnComputeResource                = ""
TemplateBeingUpgradedEvent.formatOnDatacenter                     = ""
TemplateBeingUpgradedEvent.formatOnHost                           = ""
TemplateBeingUpgradedEvent.formatOnVm                             = ""
TemplateBeingUpgradedEvent.fullFormat                             = "Upgrading template {legacyTemplate}"
###
TemplateUpgradeFailedEvent.category                               = "info"
TemplateUpgradeFailedEvent.description                            = "Cannot upgrade template"
TemplateUpgradeFailedEvent.formatOnComputeResource                = ""
TemplateUpgradeFailedEvent.formatOnDatacenter                     = ""
TemplateUpgradeFailedEvent.formatOnHost                           = ""
TemplateUpgradeFailedEvent.formatOnVm                             = ""
TemplateUpgradeFailedEvent.fullFormat                             = "Cannot upgrade template {legacyTemplate} due to: {reason.msg}"
###
TemplateUpgradedEvent.category                                    = "info"
TemplateUpgradedEvent.description                                 = "Template upgraded"
TemplateUpgradedEvent.formatOnComputeResource                     = ""
TemplateUpgradedEvent.formatOnDatacenter                          = ""
TemplateUpgradedEvent.formatOnHost                                = ""
TemplateUpgradedEvent.formatOnVm                                  = ""
TemplateUpgradedEvent.fullFormat                                  = "Template {legacyTemplate} upgrade completed"
###
VmFailedRelayoutOnVmfs2DatastoreEvent.category                    = "error"
VmFailedRelayoutOnVmfs2DatastoreEvent.description                 = "Cannot complete VM relayout on Vmfs2 datastore"
VmFailedRelayoutOnVmfs2DatastoreEvent.formatOnComputeResource     = ""
VmFailedRelayoutOnVmfs2DatastoreEvent.formatOnDatacenter          = ""
VmFailedRelayoutOnVmfs2DatastoreEvent.formatOnHost                = ""
VmFailedRelayoutOnVmfs2DatastoreEvent.formatOnVm                  = "Cannot complete relayout due to disks on a VMFS2 volume"
VmFailedRelayoutOnVmfs2DatastoreEvent.fullFormat                  = "Cannot complete relayout for virtual machine {vm.name} which has disks on a VMFS2 volume."
###
VmFailedRelayoutEvent.category                                    = "error"
VmFailedRelayoutEvent.description                                 = "Cannot complete VM relayout."
VmFailedRelayoutEvent.formatOnComputeResource                     = "Cannot complete relayout {vm.name} on {host.name}: {reason.msg}"
VmFailedRelayoutEvent.formatOnDatacenter                          = "Cannot complete relayout {vm.name} on {host.name}: {reason.msg}"
VmFailedRelayoutEvent.formatOnHost                                = "Cannot complete relayout {vm.name}: {reason.msg}"
VmFailedRelayoutEvent.formatOnVm                                  = "Cannot complete relayout for this virtual machine on {host.name}: {reason.msg}"
VmFailedRelayoutEvent.fullFormat                                  = "Cannot complete relayout {vm.name} on {host.name} in {datacenter.name}: {reason.msg}"
###
VmRelayoutSuccessfulEvent.category                                = "info"
VmRelayoutSuccessfulEvent.description                             = "VM relayout completed"
VmRelayoutSuccessfulEvent.formatOnComputeResource                 = "Relayout of {vm.name} on {host.name} completed"
VmRelayoutSuccessfulEvent.formatOnDatacenter                      = "Relayout of {vm.name} on {host.name} completed"
VmRelayoutSuccessfulEvent.formatOnHost                            = "Relayout of {vm.name} completed"
VmRelayoutSuccessfulEvent.formatOnVm                              = "Relayout of the virtual machine completed"
VmRelayoutSuccessfulEvent.fullFormat                              = "Relayout of {vm.name} on {host.name} in {datacenter.name} completed"
###
VmRelayoutUpToDateEvent.category                                  = "info"
VmRelayoutUpToDateEvent.description                               = "VM relayout up-to-date"
VmRelayoutUpToDateEvent.formatOnComputeResource                   = "{vm.name} on {host.name} is in the correct format and relayout is not neccessary"
VmRelayoutUpToDateEvent.formatOnDatacenter                        = "{vm.name} on {host.name} is in the correct format and relayout is not neccessary"
VmRelayoutUpToDateEvent.formatOnHost                              = "{vm.name} is in the correct format and relayout is not neccessary"
VmRelayoutUpToDateEvent.formatOnVm                                = "In the correct format and relayout is not neccessary"
VmRelayoutUpToDateEvent.fullFormat                                = "{vm.name} on {host.name} in {datacenter.name} is in the correct format and relayout is not necessary"
###
VmFailedToSuspendEvent.category                                   = "error"
VmFailedToSuspendEvent.description                                = "Cannot suspend VM"
VmFailedToSuspendEvent.formatOnComputeResource                    = "Cannot suspend {vm.name} on {host.name}: {reason.msg}"
VmFailedToSuspendEvent.formatOnDatacenter                         = "Cannot suspend {vm.name} on {host.name}: {reason.msg}"
VmFailedToSuspendEvent.formatOnHost                               = "Cannot suspend {vm.name}: {reason.msg}"
VmFailedToSuspendEvent.formatOnVm                                 = "Cannot suspend {host.name}: {reason.msg}"
VmFailedToSuspendEvent.fullFormat                                 = "Cannot suspend {vm.name} on {host.name} in {datacenter.name}: {reason.msg}"
###
VmFailedToResetEvent.category                                     = "error"
VmFailedToResetEvent.description                                  = "Cannot reset VM"
VmFailedToResetEvent.formatOnComputeResource                      = "Cannot suspend {vm.name} on {host.name}: {reason.msg}"
VmFailedToResetEvent.formatOnDatacenter                           = "Cannot suspend {vm.name} on {host.name}: {reason.msg}"
VmFailedToResetEvent.formatOnHost                                 = "Cannot suspend {vm.name}: {reason.msg}"
VmFailedToResetEvent.formatOnVm                                   = "Cannot suspend {host.name}: {reason.msg}"
VmFailedToResetEvent.fullFormat                                   = "Cannot suspend {vm.name} on {host.name} in {datacenter.name}: {reason.msg}"
###
VmFailedToShutdownGuestEvent.category                             = "error"
VmFailedToShutdownGuestEvent.description                          = "Cannot shut down the guest OS. {reason.msg}"
VmFailedToShutdownGuestEvent.formatOnComputeResource              = "Cannot shut down the guest OS. {reason.msg}"
VmFailedToShutdownGuestEvent.formatOnDatacenter                   = "Cannot shut down the guest OS. {reason.msg}"
VmFailedToShutdownGuestEvent.formatOnHost                         = "Cannot shut down the guest OS. {reason.msg}"
VmFailedToShutdownGuestEvent.formatOnVm                           = "Cannot shut down the guest OS. {reason.msg}"
VmFailedToShutdownGuestEvent.fullFormat                           = "{vm.name} cannot shut down the guest OS on {host.name} in {datacenter.name}: {reason.msg}"
###
VmFailedToStandbyGuestEvent.category                              = "error"
VmFailedToStandbyGuestEvent.description                           = "VM cannot standby the guest OS"
VmFailedToStandbyGuestEvent.formatOnComputeResource               = "Cannot standby the guest OS. {reason.msg}"
VmFailedToStandbyGuestEvent.formatOnDatacenter                    = "Cannot standby the guest OS. {reason.msg}"
VmFailedToStandbyGuestEvent.formatOnHost                          = "Cannot standby the guest OS. {reason.msg}"
VmFailedToStandbyGuestEvent.formatOnVm                            = "Cannot standby the guest OS. {reason.msg}"
VmFailedToStandbyGuestEvent.fullFormat                            = "{vm.name} cannot standby the guest OS on {host.name} in {datacenter.name}: {reason.msg}"
###
VmFailedToPowerOffEvent.category                                  = "error"
VmFailedToPowerOffEvent.description                               = "Cannot power Off the VM."
VmFailedToPowerOffEvent.formatOnComputeResource                   = "Cannot power Off {vm.name} on {host.name}. {reason.msg}"
VmFailedToPowerOffEvent.formatOnDatacenter                        = "Cannot power Off {vm.name} on {host.name}. {reason.msg}"
VmFailedToPowerOffEvent.formatOnHost                              = "Cannot power Off {vm.name}. {reason.msg}"
VmFailedToPowerOffEvent.formatOnVm                                = "Cannot power Off: {reason.msg}"
VmFailedToPowerOffEvent.fullFormat                                = "Cannot power Off {vm.name} on {host.name} in {datacenter.name}: {reason.msg}"
###
VmFailedToPowerOnEvent.category                                   = "error"
VmFailedToPowerOnEvent.description                                = "Cannot power On the VM."
VmFailedToPowerOnEvent.formatOnComputeResource                    = "Cannot power On {vm.name} on {host.name}. {reason.msg}"
VmFailedToPowerOnEvent.formatOnDatacenter                         = "Cannot power On {vm.name} on {host.name}. {reason.msg}"
VmFailedToPowerOnEvent.formatOnHost                               = "Cannot power On {vm.name}. {reason.msg}"
VmFailedToPowerOnEvent.formatOnVm                                 = "Cannot power On {vm.name} on {host.name}. {reason.msg}"
VmFailedToPowerOnEvent.fullFormat                                 = "Cannot power On {vm.name} on {host.name} in {datacenter.name}. {reason.msg}"
###
VmFailedToRebootGuestEvent.category                               = "error"
VmFailedToRebootGuestEvent.description                            = "VM cannot reboot the guest OS."
VmFailedToRebootGuestEvent.formatOnComputeResource                = "Cannot reboot Guest OS. {reason.msg}"
VmFailedToRebootGuestEvent.formatOnDatacenter                     = "Cannot reboot Guest OS. {reason.msg}"
VmFailedToRebootGuestEvent.formatOnHost                           = "Cannot reboot Guest OS. {reason.msg}"
VmFailedToRebootGuestEvent.formatOnVm                             = "Cannot reboot Guest OS. {reason.msg}"
VmFailedToRebootGuestEvent.fullFormat                             = "Cannot reboot the guest OS for {vm.name} on {host.name} in {datacenter.name}. {reason.msg}"
###
VMotionLicenseExpiredEvent.category                               = "error"
VMotionLicenseExpiredEvent.description                            = "VMotion license expired"
VMotionLicenseExpiredEvent.formatOnComputeResource                = ""
VMotionLicenseExpiredEvent.formatOnDatacenter                     = ""
VMotionLicenseExpiredEvent.formatOnHost                           = ""
VMotionLicenseExpiredEvent.formatOnVm                             = ""
VMotionLicenseExpiredEvent.fullFormat                             = "A VMotion license for {host.name} has expired"
###
HostLicenseExpiredEvent.category                                  = "error"
HostLicenseExpiredEvent.description                               = "Host license expired"
HostLicenseExpiredEvent.formatOnComputeResource                   = ""
HostLicenseExpiredEvent.formatOnDatacenter                        = ""
HostLicenseExpiredEvent.formatOnHost                              = ""
HostLicenseExpiredEvent.formatOnVm                                = ""
HostLicenseExpiredEvent.fullFormat                                = "A host license for {host.name} has expired"
###
ServerLicenseExpiredEvent.category                                = "error"
ServerLicenseExpiredEvent.description                             = "Server license expired"
ServerLicenseExpiredEvent.formatOnComputeResource                 = ""
ServerLicenseExpiredEvent.formatOnDatacenter                      = ""
ServerLicenseExpiredEvent.formatOnHost                            = ""
ServerLicenseExpiredEvent.formatOnVm                              = ""
ServerLicenseExpiredEvent.fullFormat                              = "A vCenter Server license has expired"
#args
ServerLicenseExpiredEvent.product.label = "Product"
ServerLicenseExpiredEvent.product.summary = "Product name"

###
VmCreatedEvent.category                                           = "info"
VmCreatedEvent.description                                        = "VM created"
VmCreatedEvent.formatOnComputeResource                            = "New virtual machine {vm.name} created on {host.name}"
VmCreatedEvent.formatOnDatacenter                                 = "New virtual machine {vm.name} created on {host.name}"
VmCreatedEvent.formatOnHost                                       = "New virtual machine {vm.name} created"
VmCreatedEvent.formatOnVm                                         = "Virtual machine created"
VmCreatedEvent.fullFormat                                         = "Created virtual machine {vm.name} on {host.name} in {datacenter.name}"
###
DatastorePrincipalConfigured.category                             = "info"
DatastorePrincipalConfigured.description                          = "Datastore principal configured"
DatastorePrincipalConfigured.formatOnComputeResource              = "Configured datastore principal {datastorePrincipal} on host {host.name}"
DatastorePrincipalConfigured.formatOnDatacenter                   = "Configured datastore principal {datastorePrincipal} on host {host.name}"
DatastorePrincipalConfigured.formatOnHost                         = "Configured datastore principal {datastorePrincipal}"
DatastorePrincipalConfigured.formatOnVm                           = ""
DatastorePrincipalConfigured.fullFormat                           = "Configured datastore principal {datastorePrincipal} on host {host.name} in {datacenter.name}"
#args
DatastorePrincipalConfigured.datastorePrincipal.label = "Datastore principal"
DatastorePrincipalConfigured.datastorePrincipal.summary = "Datastore principal"

###
UserUnassignedFromGroup.category                                  = "info"
UserUnassignedFromGroup.description                               = "User removed from group"
UserUnassignedFromGroup.formatOnComputeResource                   = ""
UserUnassignedFromGroup.formatOnDatacenter                        = ""
UserUnassignedFromGroup.formatOnHost                              = ""
UserUnassignedFromGroup.formatOnVm                                = ""
UserUnassignedFromGroup.fullFormat                                = "User {userLogin} removed from group {group}"
#args
UserUnassignedFromGroup.group.label = "Group"
UserUnassignedFromGroup.group.summary = "Is this a group account?"
UserUnassignedFromGroup.userLogin.label = "User login"
UserUnassignedFromGroup.userLogin.summary = "User login name"

###
UserAssignedToGroup.category                                      = "info"
UserAssignedToGroup.description                                   = "User assigned to group"
UserAssignedToGroup.formatOnComputeResource                       = ""
UserAssignedToGroup.formatOnDatacenter                            = ""
UserAssignedToGroup.formatOnHost                                  = ""
UserAssignedToGroup.formatOnVm                                    = ""
UserAssignedToGroup.fullFormat                                    = "User {userLogin} was added to group {group}"
#args
UserAssignedToGroup.group.label = "Group"
UserAssignedToGroup.group.summary = "Is this a group account?"
UserAssignedToGroup.userLogin.label = "User login"
UserAssignedToGroup.userLogin.summary = "User login name"

###
AccountCreatedEvent.category                                      = "info"
AccountCreatedEvent.description                                   = "Account created"
AccountCreatedEvent.formatOnComputeResource                       = ""
AccountCreatedEvent.formatOnDatacenter                            = ""
AccountCreatedEvent.formatOnHost                                  = "An account was created"
AccountCreatedEvent.formatOnVm                                    = ""
AccountCreatedEvent.fullFormat                                    = "An account was created on host {host.name}"
#args
AccountCreatedEvent.group.label = "Group"
AccountCreatedEvent.group.summary = "Is this a group account?"
AccountCreatedEvent.spec.description.label = "Description"
AccountCreatedEvent.spec.description.summary = "Account description"
AccountCreatedEvent.spec.id.label = "Name"
AccountCreatedEvent.spec.id.summary = "Account name"
AccountCreatedEvent.spec.password.label = "Password"
AccountCreatedEvent.spec.password.summary = "Account password"

###
AccountRemovedEvent.category                                      = "info"
AccountRemovedEvent.description                                   = "Account removed"
AccountRemovedEvent.formatOnComputeResource                       = ""
AccountRemovedEvent.formatOnDatacenter                            = ""
AccountRemovedEvent.formatOnHost                                  = "Account {account} was removed"
AccountRemovedEvent.formatOnVm                                    = ""
AccountRemovedEvent.fullFormat                                    = "Account  {account} was removed on host {host.name}"
#args
AccountRemovedEvent.account.label = "Name"
AccountRemovedEvent.account.summary = "Account name"
AccountRemovedEvent.group.label = "Group"
AccountRemovedEvent.group.summary = "Was this a group account?"

###
AccountUpdatedEvent.category                                      = "info"
AccountUpdatedEvent.description                                   = "Account updated"
AccountUpdatedEvent.formatOnComputeResource                       = ""
AccountUpdatedEvent.formatOnDatacenter                            = ""
AccountUpdatedEvent.formatOnHost                                  = "An account was updated"
AccountUpdatedEvent.formatOnVm                                    = ""
AccountUpdatedEvent.fullFormat                                    = "An account was updated on host {host.name}"
#args
AccountUpdatedEvent.group.label = "Group"
AccountUpdatedEvent.group.summary = "Is this a group account?"
AccountUpdatedEvent.spec.description.label = "Description"
AccountUpdatedEvent.spec.description.summary = "Account description"
AccountUpdatedEvent.spec.id.label = "Name"
AccountUpdatedEvent.spec.id.summary = "Account name"
AccountUpdatedEvent.spec.password.label = "Password"
AccountUpdatedEvent.spec.password.summary = "Account password"

###
UserPasswordChanged.category                                      = "info"
UserPasswordChanged.description                                   = "User password changed"
UserPasswordChanged.formatOnComputeResource                       = ""
UserPasswordChanged.formatOnDatacenter                            = ""
UserPasswordChanged.formatOnHost                                  = "Password was changed for account {userLogin}"
UserPasswordChanged.formatOnVm                                    = ""
UserPasswordChanged.fullFormat                                    = "Password was changed for account {userLogin} on host {host.name}"
#args
UserPasswordChanged.userLogin.label = "User login"
UserPasswordChanged.userLogin.summary = "User name for changed password"

###
AlarmActionTriggeredEvent.category                                = "info"
AlarmActionTriggeredEvent.description                             = "Alarm action triggered"
AlarmActionTriggeredEvent.formatOnComputeResource                 = "Alarm '{alarm.name}' on {entity.name} triggered an action"
AlarmActionTriggeredEvent.formatOnDatacenter                      = "Alarm '{alarm.name}' on {entity.name} triggered an action"
AlarmActionTriggeredEvent.formatOnHost                            = ""
AlarmActionTriggeredEvent.formatOnVm                              = ""
AlarmActionTriggeredEvent.fullFormat                              = "Alarm '{alarm.name}' on {entity.name} triggered an action"
#args
AlarmActionTriggeredEvent.entity.label = "Changed entity ID"
AlarmActionTriggeredEvent.entity.summary = "Changed entity ID for the alarm"
AlarmActionTriggeredEvent.entity.name.label = "Changed entity name"
AlarmActionTriggeredEvent.entity.name.summary = "Name of the changed entity for the alarm"
AlarmActionTriggeredEvent.source.label = "Source entity ID"
AlarmActionTriggeredEvent.source.summary = "Registered entity ID for the alarm"
AlarmActionTriggeredEvent.source.name.label = "Source entity name"
AlarmActionTriggeredEvent.source.name.summary = "Name of the registered entity for the alarm"

###
VmConnectedEvent.category                                         = "info"
VmConnectedEvent.description                                      = "VM connected"
VmConnectedEvent.formatOnComputeResource                          = ""
VmConnectedEvent.formatOnDatacenter                               = ""
VmConnectedEvent.formatOnHost                                     = ""
VmConnectedEvent.formatOnVm                                       = "Host is connected"
VmConnectedEvent.fullFormat                                       = "Virtual machine {vm.name} is connected"
###
VmPoweringOnWithCustomizedDVPortEvent.category                    = "info"
VmPoweringOnWithCustomizedDVPortEvent.description                 = "Virtual machine powered On with vNICs connected to dvPorts that have a port level configuration, which might be different from the dvPort group configuration."
VmPoweringOnWithCustomizedDVPortEvent.formatOnComputeResource     = ""
VmPoweringOnWithCustomizedDVPortEvent.formatOnDatacenter          = ""
VmPoweringOnWithCustomizedDVPortEvent.formatOnHost                = "Virtual machine powered On with vNICs connected to dvPorts that have a port level configuration, which might be different from the dvPort group configuration."
VmPoweringOnWithCustomizedDVPortEvent.formatOnVm                  = ""
VmPoweringOnWithCustomizedDVPortEvent.fullFormat                  = "Virtual machine {vm.name} powered On with vNICs connected to dvPorts that have a port level configuration, which might be different from the dvPort group configuration."
###
DrsDisabledEvent.category                                         = "info"
DrsDisabledEvent.description                                      = "DRS disabled"
DrsDisabledEvent.formatOnComputeResource                          = "Disabled DRS"
DrsDisabledEvent.formatOnDatacenter                               = "Disabled DRS on cluster {computeResource.name}"
DrsDisabledEvent.formatOnHost                                     = ""
DrsDisabledEvent.formatOnVm                                       = ""
DrsDisabledEvent.fullFormat                                       = "Disabled DRS on cluster {computeResource.name} in datacenter {datacenter.name}"
###
ResourcePoolDestroyedEvent.category                               = "info"
ResourcePoolDestroyedEvent.description                            = "Resource pool deleted"
ResourcePoolDestroyedEvent.formatOnComputeResource                = "Removed resource pool {resourcePool.name}"
ResourcePoolDestroyedEvent.formatOnDatacenter                     = "Removed resource pool {resourcePool.name} on {computeResource.name}"
ResourcePoolDestroyedEvent.formatOnHost                           = ""
ResourcePoolDestroyedEvent.formatOnVm                             = ""
ResourcePoolDestroyedEvent.fullFormat                             = "Removed resource pool {resourcePool.name} on {computeResource.name} in {datacenter.name}"
###
ResourcePoolMovedEvent.category                                   = "info"
ResourcePoolMovedEvent.description                                = "Resource pool moved"
ResourcePoolMovedEvent.formatOnComputeResource                    = "Moved resource pool {resourcePool.name} from {oldParent.name} to {newParent.name}"
ResourcePoolMovedEvent.formatOnDatacenter                         = "Moved resource pool {resourcePool.name} from {oldParent.name} to {newParent.name} on {computeResource.name}"
ResourcePoolMovedEvent.formatOnHost                               = ""
ResourcePoolMovedEvent.formatOnVm                                 = ""
ResourcePoolMovedEvent.fullFormat                                 = "Moved resource pool {resourcePool.name} from {oldParent.name} to {newParent.name} on {computeResource.name} in {datacenter.name}"
#args
ResourcePoolCreatedEvent.oldParent.label = "Previous parent ID"
ResourcePoolCreatedEvent.oldParent.summary = "ID for previous parent resource pool"
ResourcePoolCreatedEvent.oldParent.name.label = "Previous parent name"
ResourcePoolCreatedEvent.oldParent.name.summary = "Name for previous parent resource pool"
ResourcePoolCreatedEvent.newParent.label = "New parent ID"
ResourcePoolCreatedEvent.newParent.summary = "New parent resource pool ID"
ResourcePoolCreatedEvent.newParent.name.label = "New parent name"
ResourcePoolCreatedEvent.newParent.name.summary = "Name for new parent resource pool"

###
ClusterCreatedEvent.category                                      = "info"
ClusterCreatedEvent.description                                   = "Cluster created"
ClusterCreatedEvent.formatOnComputeResource                       = "Created in folder {parent.name}"
ClusterCreatedEvent.formatOnDatacenter                            = "Created cluster {computeResource.name}"
ClusterCreatedEvent.formatOnHost                                  = ""
ClusterCreatedEvent.formatOnVm                                    = ""
ClusterCreatedEvent.fullFormat                                    = "Created cluster {computeResource.name} in {datacenter.name}"
#args
ClusterCreatedEvent.parent.label = "Parent ID"
ClusterCreatedEvent.parent.summary = "Parent entity ID"
ClusterCreatedEvent.parent.name.label = "Parent name"
ClusterCreatedEvent.parent.name.summary = "Name for parent entity"

###
DasAgentFoundEvent.category                                       = "info"
DasAgentFoundEvent.description                                    = "HA agent found"
DasAgentFoundEvent.formatOnComputeResource                        = ""
DasAgentFoundEvent.formatOnDatacenter                             = ""
DasAgentFoundEvent.formatOnHost                                   = ""
DasAgentFoundEvent.formatOnVm                                     = ""
DasAgentFoundEvent.fullFormat                                     = "Re-established contact with a primary host in this HA cluster"
###
VmDasUpdateOkEvent.category                                       = "info"
VmDasUpdateOkEvent.description                                    = "Completed VM DAS update"
VmDasUpdateOkEvent.formatOnComputeResource                        = ""
VmDasUpdateOkEvent.formatOnDatacenter                             = ""
VmDasUpdateOkEvent.formatOnHost                                   = ""
VmDasUpdateOkEvent.formatOnVm                                     = ""
VmDasUpdateOkEvent.fullFormat                                     = "HA agents have been updated with the current state of the virtual machine"
###
DrsEnabledEvent.category                                          = "info"
DrsEnabledEvent.description                                       = "DRS enabled"
DrsEnabledEvent.formatOnComputeResource                           = "Enabled DRS with automation level {behavior}"
DrsEnabledEvent.formatOnDatacenter                                = "Enabled DRS on cluster {computeResource.name} with automation level {behavior}"
DrsEnabledEvent.formatOnHost                                      = ""
DrsEnabledEvent.formatOnVm                                        = ""
DrsEnabledEvent.fullFormat                                        = "Enabled DRS on {computeResource.name} with automation level {behavior} in {datacenter.name}"
#args
DrsEnabledEvent.behavior.label = "Behavior"
DrsEnabledEvent.behavior.summary = "Behavior"

###
DrsVmMigratedEvent.category                                       = "info"
DrsVmMigratedEvent.description                                    = "DRS VM migrated"
DrsVmMigratedEvent.formatOnComputeResource                        = "DRS migrated {vm.name} from {sourceHost.name} to {host.name}"
DrsVmMigratedEvent.formatOnDatacenter                             = "DRS migrated {vm.name} from {sourceHost.name} to {host.name} in cluster {computeResource.name}"
DrsVmMigratedEvent.formatOnHost                                   = "DRS migrated {vm.name} from {sourceHost.name}"
DrsVmMigratedEvent.formatOnVm                                     = "Migrated from {sourceHost.name} to {host.name} by DRS"
DrsVmMigratedEvent.fullFormat                                     = "DRS migrated {vm.name} from {sourceHost.name} to {host.name} in cluster {computeResource.name} in {datacenter.name}"
###
DrsVmPoweredOnEvent.category                                      = "info"
DrsVmPoweredOnEvent.description                                   = "DRS VM powered on"
DrsVmPoweredOnEvent.formatOnComputeResource                       = "DRS powered On {vm.name} on {host.name}"
DrsVmPoweredOnEvent.formatOnDatacenter                            = "DRS powered On {vm.name} on {host.name}"
DrsVmPoweredOnEvent.formatOnHost                                  = "DRS powered On {vm.name}"
DrsVmPoweredOnEvent.formatOnVm                                    = "DRS powered On the virtual machine on {host.name}"
DrsVmPoweredOnEvent.fullFormat                                    = "DRS powered On {vm.name} on {host.name} in {datacenter.name}"
###
DrsEnteringStandbyModeEvent.category                               = "info"
DrsEnteringStandbyModeEvent.description                            = "DRS entering standby mode"
DrsEnteringStandbyModeEvent.formatOnComputeResource                = "DRS is putting {host.name} into standby mode"
DrsEnteringStandbyModeEvent.formatOnDatacenter                     = "DRS is putting {host.name} into standby mode"
DrsEnteringStandbyModeEvent.formatOnHost                           = "DRS is putting the host into standby mode"
DrsEnteringStandbyModeEvent.formatOnVm                             = ""
DrsEnteringStandbyModeEvent.fullFormat                             = "DRS is putting {host.name} into standby mode"
###
DrsEnteredStandbyModeEvent.category                               = "info"
DrsEnteredStandbyModeEvent.description                            = "DRS entered standby mode"
DrsEnteredStandbyModeEvent.formatOnComputeResource                = "DRS put {host.name} into standby mode"
DrsEnteredStandbyModeEvent.formatOnDatacenter                     = "DRS put {host.name} into standby mode"
DrsEnteredStandbyModeEvent.formatOnHost                           = "DRS put the host into standby mode"
DrsEnteredStandbyModeEvent.formatOnVm                             = ""
DrsEnteredStandbyModeEvent.fullFormat                             = "DRS put {host.name} into standby mode"
###
DrsExitingStandbyModeEvent.category                                = "info"
DrsExitingStandbyModeEvent.description                             = "DRS exiting standby mode"
DrsExitingStandbyModeEvent.formatOnComputeResource                 = "DRS is moving {host.name} out of standby mode"
DrsExitingStandbyModeEvent.formatOnDatacenter                      = "DRS is moving {host.name} out of standby mode"
DrsExitingStandbyModeEvent.formatOnHost                            = "DRS is moving the host out of standby mode"
DrsExitingStandbyModeEvent.formatOnVm                              = ""
DrsExitingStandbyModeEvent.fullFormat                              = "DRS is moving {host.name} out of standby mode"
###
DrsExitedStandbyModeEvent.category                                = "info"
DrsExitedStandbyModeEvent.description                             = "DRS exited standby mode"
DrsExitedStandbyModeEvent.formatOnComputeResource                 = "DRS moved {host.name} out of standby mode"
DrsExitedStandbyModeEvent.formatOnDatacenter                      = "DRS moved {host.name} out of standby mode"
DrsExitedStandbyModeEvent.formatOnHost                            = "DRS moved the host out of standby mode"
DrsExitedStandbyModeEvent.formatOnVm                              = ""
DrsExitedStandbyModeEvent.fullFormat                              = "DRS moved {host.name} out of standby mode"
###
DrsExitStandbyModeFailedEvent.category                            = "error"
DrsExitStandbyModeFailedEvent.description                         = "DRS cannot exit the host out of standby mode"
DrsExitStandbyModeFailedEvent.formatOnComputeResource             = "DRS cannot move {host.name} out of standby mode"
DrsExitStandbyModeFailedEvent.formatOnDatacenter                  = "DRS cannot move {host.name} out of standby mode"
DrsExitStandbyModeFailedEvent.formatOnHost                        = "DRS cannot move the host out of standby mode"
DrsExitStandbyModeFailedEvent.formatOnVm                          = ""
DrsExitStandbyModeFailedEvent.fullFormat                          = "DRS cannot move {host.name} out of standby mode"
###
ResourcePoolReconfiguredEvent.category                            = "info"
ResourcePoolReconfiguredEvent.description                         = "Resource pool reconfigured"
ResourcePoolReconfiguredEvent.formatOnComputeResource             = "Updated configuration on {resourcePool.name}"
ResourcePoolReconfiguredEvent.formatOnDatacenter                  = "Updated configuration for {resourcePool.name} in compute-resource {computeResource.name}"
ResourcePoolReconfiguredEvent.formatOnHost                        = ""
ResourcePoolReconfiguredEvent.formatOnVm                          = ""
ResourcePoolReconfiguredEvent.fullFormat                          = "Updated configuration for {resourcePool.name} in compute-resource {computeResource.name} in {datacenter.name}"
###
NoMaintenanceModeDrsRecommendationForVM.category                  = "info"
NoMaintenanceModeDrsRecommendationForVM.description               = "No maintenance mode DRS recommendation for the VM"
NoMaintenanceModeDrsRecommendationForVM.formatOnComputeResource   = ""
NoMaintenanceModeDrsRecommendationForVM.formatOnDatacenter        = ""
NoMaintenanceModeDrsRecommendationForVM.formatOnHost              = "Unable to automatically migrate {vm.name}"
NoMaintenanceModeDrsRecommendationForVM.formatOnVm                = "Unable to automatically migrate from {host.name}"
NoMaintenanceModeDrsRecommendationForVM.fullFormat                = "Unable to automatically migrate {vm.name} from {host.name}"
###
VmDasUpdateErrorEvent.category                                    = "error"
VmDasUpdateErrorEvent.description                                 = "VM HA update error"
VmDasUpdateErrorEvent.formatOnComputeResource                     = ""
VmDasUpdateErrorEvent.formatOnDatacenter                          = ""
VmDasUpdateErrorEvent.formatOnHost                                = ""
VmDasUpdateErrorEvent.formatOnVm                                  = ""
VmDasUpdateErrorEvent.fullFormat                                  = "Unable to update HA agents given the state of {vm.name}"
###
VmResourcePoolMovedEvent.category                                 = "info"
VmResourcePoolMovedEvent.description                              = "VM resource pool moved"
VmResourcePoolMovedEvent.formatOnComputeResource                  = "Moved {vm.name} from resource pool {oldParent.name}"
VmResourcePoolMovedEvent.formatOnDatacenter                       = "Moved {vm.name} from resource pool {oldParent.name} to {newParent.name}"
VmResourcePoolMovedEvent.formatOnHost                             = "Moved {vm.name} from resource pool {oldParent.name} to {newParent.name}"
VmResourcePoolMovedEvent.formatOnVm                               = "Moved from resource pool {oldParent.name} to {newParent.name}"
VmResourcePoolMovedEvent.fullFormat                               = "Moved {vm.name} from resource pool {oldParent.name} to {newParent.name} in {datacenter.name}"
#args
VmResourcePoolMovedEvent.oldParent.label = "Previous parent ID"
VmResourcePoolMovedEvent.oldParent.summary = "ID for previous parent resource pool"
VmResourcePoolMovedEvent.oldParent.name.label = "Previous parent name"
VmResourcePoolMovedEvent.oldParent.name.summary = "Name for previous parent resource pool"
VmResourcePoolMovedEvent.newParent.label = "New parent ID"
VmResourcePoolMovedEvent.newParent.summary = "ID for new parent resource pool"
VmResourcePoolMovedEvent.newParent.name.label = "New parent name"
VmResourcePoolMovedEvent.newParent.name.summary = "Name for new parent resource pool"

###
ResourceViolatedEvent.category                                    = "error"
ResourceViolatedEvent.description                                 = "Resource usage exceeds configuration"
ResourceViolatedEvent.formatOnComputeResource                     = "Resource usage exceeds configuration on resource pool {resourcePool.name}"
ResourceViolatedEvent.formatOnDatacenter                          = "Resource usage exceeds configuration for resource pool {resourcePool.name} in compute-resource {computeResource.name}'"
ResourceViolatedEvent.formatOnHost                                = ""
ResourceViolatedEvent.formatOnVm                                  = ""
ResourceViolatedEvent.fullFormat                                  = "Resource usage exceeds configuration for resource pool {resourcePool.name} in compute-resource {computeResource.name} in {datacenter.name}"
###
ClusterStatusChangedEvent.category                                = "info"
ClusterStatusChangedEvent.description                             = "Cluster status changed"
ClusterStatusChangedEvent.formatOnComputeResource                 = "Configuration status changed from {oldStatus.@enum.ManagedEntity.Status} to {newStatus.@enum.ManagedEntity.Status}"
ClusterStatusChangedEvent.formatOnDatacenter                      = "Configuration status on cluster {computeResource.name} changed from {oldStatus.@enum.ManagedEntity.Status} to {newStatus.@enum.ManagedEntity.Status}"
ClusterStatusChangedEvent.formatOnHost                            = ""
ClusterStatusChangedEvent.formatOnVm                              = ""
ClusterStatusChangedEvent.fullFormat                              = "Configuration status on cluster {computeResource.name} changed from {oldStatus.@enum.ManagedEntity.Status} to {newStatus.@enum.ManagedEntity.Status} in {datacenter.name}"
#args
ClusterStatusChangedEvent.newStatus.label = "New status"
ClusterStatusChangedEvent.newStatus.summary = "New status"
ClusterStatusChangedEvent.oldStatus.label = "Previous status"
ClusterStatusChangedEvent.oldStatus.summary = "Previous status"

###
HostStatusChangedEvent.category                                = "info"
HostStatusChangedEvent.description                             = "Host status changed"
HostStatusChangedEvent.formatOnComputeResource                 = "Configuration status changed from {oldStatus.@enum.ManagedEntity.Status} to {newStatus.@enum.ManagedEntity.Status}"
HostStatusChangedEvent.formatOnDatacenter                      = "Configuration status on host {computeResource.name} changed from {oldStatus.@enum.ManagedEntity.Status} to {newStatus.@enum.ManagedEntity.Status}"
HostStatusChangedEvent.formatOnHost                            = ""
HostStatusChangedEvent.formatOnVm                              = ""
HostStatusChangedEvent.fullFormat                              = "Configuration status on host {computeResource.name} changed from {oldStatus.@enum.ManagedEntity.Status} to {newStatus.@enum.ManagedEntity.Status} in {datacenter.name}"

###
ClusterOvercommittedEvent.category                                = "error"
ClusterOvercommittedEvent.description                             = "Cluster overcommitted"
ClusterOvercommittedEvent.formatOnComputeResource                 = "Insufficient capacity to satisfy resource configuration"
ClusterOvercommittedEvent.formatOnDatacenter                      = "Insufficient capacity in cluster {computeResource.name} to satisfy resource configuration"
ClusterOvercommittedEvent.formatOnHost                            = ""
ClusterOvercommittedEvent.formatOnVm                              = ""
ClusterOvercommittedEvent.fullFormat                              = "Insufficient capacity in cluster {computeResource.name} to satisfy resource configuration in {datacenter.name}"

###
HostOvercommittedEvent.category                                = "error"
HostOvercommittedEvent.description                             = "Host resource overcommitted"
HostOvercommittedEvent.formatOnComputeResource                 = "Insufficient capacity to satisfy resource configuration"
HostOvercommittedEvent.formatOnDatacenter                      = "Insufficient capacity in host {computeResource.name} to satisfy resource configuration"
HostOvercommittedEvent.formatOnHost                            = ""
HostOvercommittedEvent.formatOnVm                              = ""
HostOvercommittedEvent.fullFormat                              = "Insufficient capacity in host {computeResource.name} to satisfy resource configuration in {datacenter.name}"

###
ClusterDestroyedEvent.category                                    = "info"
ClusterDestroyedEvent.description                                 = "Cluster deleted"
ClusterDestroyedEvent.formatOnComputeResource                     = "Removed cluster"
ClusterDestroyedEvent.formatOnDatacenter                          = "Removed cluster {computeResource.name}"
ClusterDestroyedEvent.formatOnHost                                = ""
ClusterDestroyedEvent.formatOnVm                                  = ""
ClusterDestroyedEvent.fullFormat                                  = "Removed cluster {computeResource.name} in datacenter {datacenter.name}"
###
ResourcePoolCreatedEvent.category                                 = "info"
ResourcePoolCreatedEvent.description                              = "Resource pool created"
ResourcePoolCreatedEvent.formatOnComputeResource                  = "Created resource pool {resourcePool.name}"
ResourcePoolCreatedEvent.formatOnDatacenter                       = "Created resource pool {resourcePool.name} in compute-resource {computeResource.name}"
ResourcePoolCreatedEvent.formatOnHost                             = ""
ResourcePoolCreatedEvent.formatOnVm                               = ""
ResourcePoolCreatedEvent.fullFormat                               = "Created resource pool {resourcePool.name} in compute-resource {computeResource.name} in {datacenter.name}"
#args
ResourcePoolCreatedEvent.parent.label = "Parent ID"
ResourcePoolCreatedEvent.parent.summary = "Parent resource pool ID"
ResourcePoolCreatedEvent.parent.name.label = "Parent name"
ResourcePoolCreatedEvent.parent.name.summary = "Name for parent resource pool"

###
ClusterReconfiguredEvent.category                                 = "info"
ClusterReconfiguredEvent.description                              = "Cluster reconfigured"
ClusterReconfiguredEvent.formatOnComputeResource                  = "Cluster reconfigured"
ClusterReconfiguredEvent.formatOnDatacenter                       = "Reconfigured cluster {computeResource.name}"
ClusterReconfiguredEvent.formatOnHost                             = ""
ClusterReconfiguredEvent.formatOnVm                               = ""
ClusterReconfiguredEvent.fullFormat                               = "Reconfigured cluster {computeResource.name} in datacenter {datacenter.name}"
###
DasAgentUnavailableEvent.category                                 = "error"
DasAgentUnavailableEvent.description                              = "HA agent unavailable"
DasAgentUnavailableEvent.formatOnComputeResource                  = "Unable to contact a primary HA agent"
DasAgentUnavailableEvent.formatOnDatacenter                       = "Unable to contact a primary HA agent in cluster {computeResource.name}"
DasAgentUnavailableEvent.formatOnHost                             = ""
DasAgentUnavailableEvent.formatOnVm                               = ""
DasAgentUnavailableEvent.fullFormat                               = "Unable to contact a primary HA agent in cluster {computeResource.name} in {datacenter.name}"
###
InsufficientFailoverResourcesEvent.category                       = "error"
InsufficientFailoverResourcesEvent.description                    = "Insufficient failover resources"
InsufficientFailoverResourcesEvent.formatOnComputeResource        = "Insufficient resources to satisfy HA failover level"
InsufficientFailoverResourcesEvent.formatOnDatacenter             = "Insufficient resources to satisfy HA failover level on cluster {computeResource.name}"
InsufficientFailoverResourcesEvent.formatOnHost                   = ""
InsufficientFailoverResourcesEvent.formatOnVm                     = ""
InsufficientFailoverResourcesEvent.fullFormat                     = "Insufficient resources to satisfy HA failover level on cluster {computeResource.name} in {datacenter.name}"
###
VmUnsupportedStartingEvent.category                               = "warning"
VmUnsupportedStartingEvent.description                            = "VM unsupported guest OS is starting"
VmUnsupportedStartingEvent.formatOnComputeResource                = "Unsupported guest OS {guestId} for {vm.name} on {host.name}"
VmUnsupportedStartingEvent.formatOnDatacenter                     = "Unsupported guest OS {guestId} for {vm.name}"
VmUnsupportedStartingEvent.formatOnHost                           = "Unsupported guest OS {guestId} for {vm.name} on {host.name} in {datacenter.name}"
VmUnsupportedStartingEvent.formatOnVm                             = "Unsupported guest OS {guestId}"
VmUnsupportedStartingEvent.fullFormat                             = "Unsupported guest OS {guestId} for {vm.name} on {host.name} in {datacenter.name}"
#args
VmUnsupportedStartingEvent.guestId.label = "Guest ID"
VmUnsupportedStartingEvent.guestId.summary = " ID for unsupported guest OS"

###
FailoverLevelRestored.category                                    = "info"
FailoverLevelRestored.description                                 = "Failover level restored"
FailoverLevelRestored.formatOnComputeResource                     = "Sufficient resources are available to satisfy HA failover level"
FailoverLevelRestored.formatOnDatacenter                          = "Sufficient resources are available to satisfy HA failover level in cluster {computeResource.name}"
FailoverLevelRestored.formatOnHost                                = ""
FailoverLevelRestored.formatOnVm                                  = ""
FailoverLevelRestored.fullFormat                                  = "Sufficient resources are available to satisfy HA failover level in cluster {computeResource.name} in {datacenter.name}"
###
VMFSDatastoreCreatedEvent.category                                = "info"
VMFSDatastoreCreatedEvent.description                             = "VMFS datastore created"
VMFSDatastoreCreatedEvent.formatOnComputeResource                 = "Created VMFS datastore {datastore.name} on {host.name}"
VMFSDatastoreCreatedEvent.formatOnDatacenter                      = "Created VMFS datastore {datastore.name} on {host.name}"
VMFSDatastoreCreatedEvent.formatOnHost                            = "Created VMFS datastore {datastore.name}"
VMFSDatastoreCreatedEvent.formatOnVm                              = ""
VMFSDatastoreCreatedEvent.fullFormat                              = "Created VMFS datastore {datastore.name} on {host.name} in {datacenter.name}"
#args
# (this duplicates the ".ds" argument of Event)
VMFSDatastoreCreatedEvent.datastore.label = "Datastore ID"
VMFSDatastoreCreatedEvent.datastore.summary = "Datastore ID for the event"
VMFSDatastoreCreatedEvent.datastore.name.label = "Datastore name"
VMFSDatastoreCreatedEvent.datastore.name.summary = "Datastore name for the event"

###
NASDatastoreCreatedEvent.category                                 = "info"
NASDatastoreCreatedEvent.description                              = "NAS datastore created"
NASDatastoreCreatedEvent.formatOnComputeResource                  = "Created NAS datastore {datastore.name} on {host.name}"
NASDatastoreCreatedEvent.formatOnDatacenter                       = "Created NAS datastore {datastore.name} on {host.name}"
NASDatastoreCreatedEvent.formatOnHost                             = "Created NAS datastore {datastore.name}"
NASDatastoreCreatedEvent.formatOnVm                               = ""
NASDatastoreCreatedEvent.fullFormat                               = "Created NAS datastore {datastore.name} on {host.name} in {datacenter.name}"
#args
# (this duplicates the ".ds" argument of Event)
NASDatastoreCreatedEvent.datastore.label = "Datastore ID"
NASDatastoreCreatedEvent.datastore.summary = "Datastore ID for the event"
NASDatastoreCreatedEvent.datastore.name.label = "Datastore name"
NASDatastoreCreatedEvent.datastore.name.summary = "Datastore name for the event"

###
LocalDatastoreCreatedEvent.category                               = "info"
LocalDatastoreCreatedEvent.description                            = "Local datastore created"
LocalDatastoreCreatedEvent.formatOnComputeResource                = "Created local datastore {datastore.name} on {host.name}"
LocalDatastoreCreatedEvent.formatOnDatacenter                     = "Created local datastore {datastore.name} on {host.name}"
LocalDatastoreCreatedEvent.formatOnHost                           = "Created local datastore {datastore.name}"
LocalDatastoreCreatedEvent.formatOnVm                             = ""
LocalDatastoreCreatedEvent.fullFormat                             = "Created local datastore {datastore.name} on {host.name} in {datacenter.name}"
#args
# (this duplicates the ".ds" argument of Event)
LocalDatastoreCreatedEvent.datastore.label = "Datastore ID"
LocalDatastoreCreatedEvent.datastore.summary = "Datastore ID for the event"
LocalDatastoreCreatedEvent.datastore.name.label = "Datastore name"
LocalDatastoreCreatedEvent.datastore.name.summary = "Datastore name for the event"

###
VMFSDatastoreExtendedEvent.category                                = "info"
VMFSDatastoreExtendedEvent.description                             = "VMFS datastore extended"
VMFSDatastoreExtendedEvent.formatOnComputeResource                 = "Extended VMFS datastore {datastore.name} on {host.name}"
VMFSDatastoreExtendedEvent.formatOnDatacenter                      = "Extended VMFS datastore {datastore.name} on {host.name}"
VMFSDatastoreExtendedEvent.formatOnHost                            = "Extended VMFS datastore {datastore.name}"
VMFSDatastoreExtendedEvent.formatOnVm                              = ""
VMFSDatastoreExtendedEvent.fullFormat                              = "Extended VMFS datastore {datastore.name} on {host.name} in {datacenter.name}"
#args
# (this duplicates the ".ds" argument of Event)
VMFSDatastoreExtendedEvent.datastore.label = "Datastore ID"
VMFSDatastoreExtendedEvent.datastore.summary = "Datastore ID for the event"
VMFSDatastoreExtendedEvent.datastore.name.label = "Datastore name"
VMFSDatastoreExtendedEvent.datastore.name.summary = "Datastore name for the event"

###
VMFSDatastoreExpandedEvent.category                                = "info"
VMFSDatastoreExpandedEvent.description                             = "VMFS datastore expanded"
VMFSDatastoreExpandedEvent.formatOnComputeResource                 = "Expanded VMFS datastore {datastore.name} on {host.name}"
VMFSDatastoreExpandedEvent.formatOnDatacenter                      = "Expanded VMFS datastore {datastore.name} on {host.name}"
VMFSDatastoreExpandedEvent.formatOnHost                            = "Expanded VMFS datastore {datastore.name}"
VMFSDatastoreExpandedEvent.formatOnVm                              = ""
VMFSDatastoreExpandedEvent.fullFormat                              = "Expanded VMFS datastore {datastore.name} on {host.name} in {datacenter.name}"
#args
# (this duplicates the ".ds" argument of Event)
VMFSDatastoreExpandedEvent.datastore.label = "Datastore ID"
VMFSDatastoreExpandedEvent.datastore.summary = "Datastore ID for the event"
VMFSDatastoreExpandedEvent.datastore.name.label = "Datastore name"
VMFSDatastoreExpandedEvent.datastore.name.summary = "Datastore name for the event"

###
DatastoreDiscoveredEvent.category                                 = "info"
DatastoreDiscoveredEvent.description                              = "Datastore discovered"
DatastoreDiscoveredEvent.formatOnComputeResource                  = "Discovered datastore {datastore.name} on {host.name}"
DatastoreDiscoveredEvent.formatOnDatacenter                       = "Discovered datastore {datastore.name} on {host.name}"
DatastoreDiscoveredEvent.formatOnHost                             = "Discovered datastore {datastore.name}"
DatastoreDiscoveredEvent.formatOnVm                               = ""
DatastoreDiscoveredEvent.fullFormat                               = "Discovered datastore {datastore.name} on {host.name} in {datacenter.name}"
#args
# (this duplicates the ".ds" argument of Event)
DatastoreDiscoveredEvent.datastore.label = "Datastore ID"
DatastoreDiscoveredEvent.datastore.summary = "Datastore ID for the event"
DatastoreDiscoveredEvent.datastore.name.label = "Datastore name"
DatastoreDiscoveredEvent.datastore.name.summary = "Datastore name for the event"

###
DatastoreDestroyedEvent.category                                  = "info"
DatastoreDestroyedEvent.description                               = "Datastore deleted"
DatastoreDestroyedEvent.formatOnComputeResource                   = ""
DatastoreDestroyedEvent.formatOnDatacenter                        = "Removed unconfigured datastore {datastore.name}"
DatastoreDestroyedEvent.formatOnHost                              = ""
DatastoreDestroyedEvent.formatOnVm                                = ""
DatastoreDestroyedEvent.fullFormat                                = "Removed unconfigured datastore {datastore.name}"
###
DatastoreRenamedEvent.category                                    = "info"
DatastoreRenamedEvent.description                                 = "Datastore renamed"
DatastoreRenamedEvent.formatOnComputeResource                     = ""
DatastoreRenamedEvent.formatOnDatacenter                          = "Renamed datastore from {oldName} to {newName}"
DatastoreRenamedEvent.formatOnHost                                = ""
DatastoreRenamedEvent.formatOnVm                                  = ""
DatastoreRenamedEvent.fullFormat                                  = "Renamed datastore from {oldName} to {newName} in {datacenter.name}"
#args
DatastoreRenamedEvent.newName.label = "New name"
DatastoreRenamedEvent.newName.summary = "New name"
DatastoreRenamedEvent.oldName.label = "Previous name"
DatastoreRenamedEvent.oldName.summary = "Previous name"

###
DatastoreCapacityIncreasedEvent.category                          = "info"
DatastoreCapacityIncreasedEvent.description                       = "Datastore capacity increased"
DatastoreCapacityIncreasedEvent.formatOnComputeResource           = ""
DatastoreCapacityIncreasedEvent.formatOnDatacenter                = "Datastore {datastore.name} increased in capacity from {oldCapacity} bytes to {newCapacity} bytes"
DatastoreCapacityIncreasedEvent.formatOnHost                      = ""
DatastoreCapacityIncreasedEvent.formatOnVm                        = ""
DatastoreCapacityIncreasedEvent.fullFormat                        = "Datastore {datastore.name} increased in capacity from {oldCapacity} bytes to {oldCapacity} bytes in {datacenter.name}"
#args
DatastoreCapacityIncreasedEvent.newCapacity.label = "New capacity"
DatastoreCapacityIncreasedEvent.newCapacity.summary = "New capacity"
DatastoreCapacityIncreasedEvent.oldCapacity.label = "Previous capacity"
DatastoreCapacityIncreasedEvent.oldCapacity.summary = "Previous capacity"

###   
DatastoreRenamedOnHostEvent.category                              = "info"
DatastoreRenamedOnHostEvent.description                           = "Datastore renamed from host"
DatastoreRenamedOnHostEvent.formatOnComputeResource               = ""
DatastoreRenamedOnHostEvent.formatOnDatacenter                    = "Renamed datastore from {oldName} to {newName}"
DatastoreRenamedOnHostEvent.formatOnHost                          = ""
DatastoreRenamedOnHostEvent.formatOnVm                            = ""
DatastoreRenamedOnHostEvent.fullFormat                            = "Renamed datastore from {oldName} to {newName} in {datacenter.name}"
#args
DatastoreRenamedOnHostEvent.newName.label = "New name"
DatastoreRenamedOnHostEvent.newName.summary = "New datastore name"
DatastoreRenamedOnHostEvent.oldName.label = "Previous name"
DatastoreRenamedOnHostEvent.oldName.summary = "Previous datastore name"

###   
DatastoreRemovedOnHostEvent.category                              = "info"
DatastoreRemovedOnHostEvent.description                           = "Datastore removed from host"
DatastoreRemovedOnHostEvent.formatOnComputeResource               = ""
DatastoreRemovedOnHostEvent.formatOnDatacenter                    = "Removed datastore {datastore.name} from {host.name}"
DatastoreRemovedOnHostEvent.formatOnHost                          = "Removed datastore {datastore.name}"
DatastoreRemovedOnHostEvent.formatOnVm                            = ""
DatastoreRemovedOnHostEvent.fullFormat                            = "Removed datastore {datastore.name} from {host.name} in {datacenter.name}"
#args
# (this duplicates the ".ds" argument of Event)
DatastoreRemovedOnHostEvent.datastore.label = ""
DatastoreRemovedOnHostEvent.datastore.name.label = ""
DatastoreRemovedOnHostEvent.datastore.name.summary = ""
DatastoreRemovedOnHostEvent.datastore.summary = ""

###
DatastoreFileEvent.category                                       = "info"
DatastoreFileEvent.description                                    = "<Datastore File Event>"
DatastoreFileEvent.formatOnComputeResource                        = ""
DatastoreFileEvent.formatOnDatacenter                             = ""
DatastoreFileEvent.formatOnHost                                   = ""
DatastoreFileEvent.formatOnVm                                     = ""
DatastoreFileEvent.fullFormat                                     = "<internal>"
#args
DatastoreFileEvent.targetFile.label = "target file or directory"
DatastoreFileEvent.targetFile.summary = "Datastore path of the target file or directory"

###
DatastoreFileCopiedEvent.category                                 = "info"
DatastoreFileCopiedEvent.description                              = "File or directory copied to datastore"
DatastoreFileCopiedEvent.formatOnComputeResource                  = ""
DatastoreFileCopiedEvent.formatOnDatacenter                       = "File or directory {sourceFile} copied from {sourceDatastore.name} to {datastore.name} as {targetFile}"
DatastoreFileCopiedEvent.formatOnHost                             = ""
DatastoreFileCopiedEvent.formatOnVm                               = ""
DatastoreFileCopiedEvent.fullFormat                               = "File or directory {sourceFile} copied from {sourceDatastore.name} to {datastore.name} as {targetFile}"
#args
DatastoreFileCopiedEvent.sourceFile.label = "source file or directory"
DatastoreFileCopiedEvent.sourceFile.summary = "Datastore path of the source file or directory"
DatastoreFileCopiedEvent.sourceDatastore.label = "source data store ID"
DatastoreFileCopiedEvent.sourceDatastore.summary = "Datastore ID of the source datastore"
DatastoreFileCopiedEvent.sourceDatastore.name.label = "source data store name"
DatastoreFileCopiedEvent.sourceDatastore.name.summary = "Datastore name of the source datastore"

###
DatastoreFileMovedEvent.category                                  = "info"
DatastoreFileMovedEvent.description                               = "File or directory moved to datastore"
DatastoreFileMovedEvent.formatOnComputeResource                   = ""
DatastoreFileMovedEvent.formatOnDatacenter                        = "File or directory {sourceFile} moved from {sourceDatastore.name} to {datastore.name} as {targetFile}"
DatastoreFileMovedEvent.formatOnHost                              = ""
DatastoreFileMovedEvent.formatOnVm                                = ""
DatastoreFileMovedEvent.fullFormat                                = "File or directory {sourceFile} moved from {sourceDatastore.name} to {datastore.name} as {targetFile}"
#args
DatastoreFileMovedEvent.sourceFile.label = "source file or directory"
DatastoreFileMovedEvent.sourceFile.summary = "Datastore path of the source file or directory"
DatastoreFileMovedEvent.sourceDatastore.label = "source data store ID"
DatastoreFileMovedEvent.sourceDatastore.summary = "Datastore ID of the source datastore"
DatastoreFileMovedEvent.sourceDatastore.name.label = "source data store name"
DatastoreFileMovedEvent.sourceDatastore.name.summary = "Datastore name of the source datastore"

###
DatastoreFileDeletedEvent.category                                = "info"
DatastoreFileDeletedEvent.description                             = "File or directory deleted"
DatastoreFileDeletedEvent.formatOnComputeResource                 = ""
DatastoreFileDeletedEvent.formatOnDatacenter                      = "File or directory {targetFile} deleted from {datastore.name}"
DatastoreFileDeletedEvent.formatOnHost                            = ""
DatastoreFileDeletedEvent.formatOnVm                              = ""
DatastoreFileDeletedEvent.fullFormat                              = "File or directory {targetFile} deleted from {datastore.name}"
#args
## None

###
VmRelocateFailedEvent.category                                    = "error"
VmRelocateFailedEvent.description                                 = "Cannot relocate VM"
VmRelocateFailedEvent.formatOnComputeResource                     = ""
VmRelocateFailedEvent.formatOnDatacenter                          = ""
VmRelocateFailedEvent.formatOnHost                                = ""
VmRelocateFailedEvent.formatOnVm                                  = "Cannot relocate virtual machine"
VmRelocateFailedEvent.fullFormat                                  = "Cannot relocate virtual machine '{vm.name}' in {datacenter.name}"
#args
VmRelocateFailedEvent.destHost.label = "Destination host ID"
VmRelocateFailedEvent.destHost.summary = "Destination host ID"
VmRelocateFailedEvent.destHost.name.label = "Destination host name"
VmRelocateFailedEvent.destHost.name.summary = "Name for destination host"

###
DrsResourceConfigureFailedEvent.category                          = "error"
DrsResourceConfigureFailedEvent.description                       = "Cannot complete DRS resource configuration"
DrsResourceConfigureFailedEvent.formatOnComputeResource           = ""
DrsResourceConfigureFailedEvent.formatOnDatacenter                = ""
DrsResourceConfigureFailedEvent.formatOnHost                      = "Unable to apply DRS resource settings on host. {reason.msg}. This can significantly reduce the effectiveness of DRS."
DrsResourceConfigureFailedEvent.formatOnVm                        = ""
DrsResourceConfigureFailedEvent.fullFormat                        = "Unable to apply DRS resource settings on host {host.name} in {datacenter.name}. {reason.msg}. This can significantly reduce the effectiveness of DRS."
###
DrsResourceConfigureSyncedEvent.category                          = "info"
DrsResourceConfigureSyncedEvent.description                       = "DRS resource configuration synchronized"
DrsResourceConfigureSyncedEvent.formatOnComputeResource           = ""
DrsResourceConfigureSyncedEvent.formatOnDatacenter                = ""
DrsResourceConfigureSyncedEvent.formatOnHost                      = "Resource configuration specification returns to synchronization from previous failure"
DrsResourceConfigureSyncedEvent.formatOnVm                        = ""
DrsResourceConfigureSyncedEvent.fullFormat                        = "Resource configuration specification returns to synchronization from previous failure on host '{host.name}' in {datacenter.name}"
###
VmWwnConflictEvent.category                                       = "error"
VmWwnConflictEvent.description                                    = "VM WWN conflict"
VmWwnConflictEvent.formatOnComputeResource                        = ""
VmWwnConflictEvent.formatOnDatacenter                             = ""
VmWwnConflictEvent.formatOnHost                                   = ""
VmWwnConflictEvent.formatOnVm                                     = "The WWN ({wwn}) conflicts with the currently registered WWN"
VmWwnConflictEvent.fullFormat                                     = "The WWN ({wwn}) of {vm.name} conflicts with the currently registered WWN"
#args
VmWwnConflictEvent.wwn.label = "WWN"
VmWwnConflictEvent.wwn.summary = "Conflicted WWN"

###
HostWwnConflictEvent.category                                     = "error"
HostWwnConflictEvent.description                                  = "Host WWN conflict"
HostWwnConflictEvent.formatOnComputeResource                      = ""
HostWwnConflictEvent.formatOnDatacenter                           = ""
HostWwnConflictEvent.formatOnHost                                 = "The WWN ({wwn}) conflicts with the currently registered WWN"
HostWwnConflictEvent.formatOnVm                                   = ""
HostWwnConflictEvent.fullFormat                                   = "The WWN ({wwn}) of {host.name} conflicts with the currently registered WWN"
#args
HostWwnConflictEvent.wwn.label = "WWN"
HostWwnConflictEvent.wwn.summary = "Conflicted WWN"

###
VmWwnAssignedEvent.category                                       = "info"
VmWwnAssignedEvent.description                                    = "VM WWN assigned"
VmWwnAssignedEvent.formatOnComputeResource                        = ""
VmWwnAssignedEvent.formatOnDatacenter                             = ""
VmWwnAssignedEvent.formatOnHost                                   = ""
VmWwnAssignedEvent.formatOnVm                                     = "New WWNs assigned"
VmWwnAssignedEvent.fullFormat                                     = "New WWNs assigned to {vm.name}"
###
VmWwnChangedEvent.category                                        = "warning"
VmWwnChangedEvent.description                                     = "VM WWN changed"
VmWwnChangedEvent.formatOnComputeResource                         = ""
VmWwnChangedEvent.formatOnDatacenter                              = ""
VmWwnChangedEvent.formatOnHost                                    = ""
VmWwnChangedEvent.formatOnVm                                      = "WWNs are changed"
VmWwnChangedEvent.fullFormat                                      = "WWNs are changed for {vm.name}"
###
VmSecondaryAddedEvent.category                                    = "info"
VmSecondaryAddedEvent.description                                 = "Secondary VM added"
VmSecondaryAddedEvent.formatOnComputeResource                     = "A Secondary VM has been added for {vm.name}"
VmSecondaryAddedEvent.formatOnDatacenter                          = "A Secondary VM has been added for {vm.name}"
VmSecondaryAddedEvent.formatOnHost                                = "A Secondary VM has been added for {vm.name}"
VmSecondaryAddedEvent.formatOnVm                                  = "A Secondary VM has been added"
VmSecondaryAddedEvent.fullFormat                                  = "A Secondary VM has been added for {vm.name}"
###
VmFaultToleranceTurnedOffEvent.category                           = "info"
VmFaultToleranceTurnedOffEvent.description                        = "VM Fault Tolerance turned off"
VmFaultToleranceTurnedOffEvent.formatOnComputeResource            = "Fault Tolerance protection has been turned off for {vm.name}"
VmFaultToleranceTurnedOffEvent.formatOnDatacenter                 = "Fault Tolerance protection has been turned off for {vm.name}"
VmFaultToleranceTurnedOffEvent.formatOnHost                       = "Fault Tolerance protection has been turned off for {vm.name}"
VmFaultToleranceTurnedOffEvent.formatOnVm                         = "Fault Tolerance protection has been turned off"
VmFaultToleranceTurnedOffEvent.fullFormat                         = "Fault Tolerance protection has been turned off for {vm.name}"
###
VmFaultToleranceStateChangedEvent.category                        = "info"
VmFaultToleranceStateChangedEvent.description                     = "VM Fault Tolerance state changed"
VmFaultToleranceStateChangedEvent.formatOnComputeResource         = "Fault Tolerance state on {vm.name} changed from {oldState.@enum.VirtualMachine.FaultToleranceState} to {newState.@enum.VirtualMachine.FaultToleranceState}"
VmFaultToleranceStateChangedEvent.formatOnDatacenter              = "Fault Tolerance state on {vm.name} changed from {oldState.@enum.VirtualMachine.FaultToleranceState} to {newState.@enum.VirtualMachine.FaultToleranceState}"
VmFaultToleranceStateChangedEvent.formatOnHost                    = "Fault Tolerance state on {vm.name} changed from {oldState.@enum.VirtualMachine.FaultToleranceState} to {newState.@enum.VirtualMachine.FaultToleranceState}"
VmFaultToleranceStateChangedEvent.formatOnVm                      = "Fault Tolerance state changed from {oldState.@enum.VirtualMachine.FaultToleranceState} to {newState.@enum.VirtualMachine.FaultToleranceState}"
VmFaultToleranceStateChangedEvent.fullFormat                      = "Fault Tolerance state on {vm.name} changed from {oldState.@enum.VirtualMachine.FaultToleranceState} to {newState.@enum.VirtualMachine.FaultToleranceState}"
#args
VmFaultToleranceStateChangedEvent.oldState.label                  = "Previous state"
VmFaultToleranceStateChangedEvent.oldState.summary                = "Previous state"
VmFaultToleranceStateChangedEvent.newState.label                  = "New state"
VmFaultToleranceStateChangedEvent.newState.summary                = "New state"

###
VmSecondaryDisabledEvent.category                                 = "info"
VmSecondaryDisabledEvent.description                              = "Disabled Secondary VM"
VmSecondaryDisabledEvent.formatOnComputeResource                  = "Disabled Secondary VM for {vm.name}"
VmSecondaryDisabledEvent.formatOnDatacenter                       = "Disabled Secondary VM for {vm.name}"
VmSecondaryDisabledEvent.formatOnHost                             = "Disabled Secondary VM for {vm.name}"
VmSecondaryDisabledEvent.formatOnVm                               = "Disabled Secondary VM"
VmSecondaryDisabledEvent.fullFormat                               = "Disabled Secondary VM for {vm.name}"
###
VmSecondaryDisabledBySystemEvent.category                         = "error"
VmSecondaryDisabledBySystemEvent.description                      = "vCenter disabled Fault Tolerance"
VmSecondaryDisabledBySystemEvent.formatOnComputeResource          = "vCenter disabled Fault Tolerance on VM '{vm.name}' because the Secondary VM could not be powered On."
VmSecondaryDisabledBySystemEvent.formatOnDatacenter               = "vCenter disabled Fault Tolerance on VM '{vm.name}' because the Secondary VM could not be powered On."
VmSecondaryDisabledBySystemEvent.formatOnHost                     = "vCenter disabled Fault Tolerance on VM '{vm.name}' because the Secondary VM could not be powered On."
VmSecondaryDisabledBySystemEvent.formatOnVm                       = "vCenter disabled Fault Tolerance because the Secondary VM could not be powered On."
VmSecondaryDisabledBySystemEvent.fullFormat                       = "vCenter disabled Fault Tolerance on VM '{vm.name}' because the Secondary VM could not be powered On."
###
VmSecondaryEnabledEvent.category                                  = "info"
VmSecondaryEnabledEvent.description                               = "Enabled Secondary VM"
VmSecondaryEnabledEvent.formatOnComputeResource                   = "Enabled Secondary VM for {vm.name}"
VmSecondaryEnabledEvent.formatOnDatacenter                        = "Enabled Secondary VM for {vm.name}"
VmSecondaryEnabledEvent.formatOnHost                              = "Enabled Secondary VM for {vm.name}"
VmSecondaryEnabledEvent.formatOnVm                                = "Enabled Secondary VM"
VmSecondaryEnabledEvent.fullFormat                                = "Enabled Secondary VM for {vm.name}"
###
VmStartingSecondaryEvent.category                                 = "info"
VmStartingSecondaryEvent.description                              = "Starting Secondary VM"
VmStartingSecondaryEvent.formatOnComputeResource                  = "Starting Secondary VM for {vm.name}"
VmStartingSecondaryEvent.formatOnDatacenter                       = "Starting Secondary VM for {vm.name}"
VmStartingSecondaryEvent.formatOnHost                             = "Starting Secondary VM for {vm.name}"
VmStartingSecondaryEvent.formatOnVm                               = "Starting Secondary VM"
VmStartingSecondaryEvent.fullFormat                               = "Starting Secondary VM for {vm.name}"
###
VmSecondaryStartedEvent.category                                  = "info"
VmSecondaryStartedEvent.description                               = "Started Secondary VM"
VmSecondaryStartedEvent.formatOnComputeResource                   = "Started Secondary VM for {vm.name}"
VmSecondaryStartedEvent.formatOnDatacenter                        = "Started Secondary VM for {vm.name}"
VmSecondaryStartedEvent.formatOnHost                              = "Started Secondary VM for {vm.name}"
VmSecondaryStartedEvent.formatOnVm                                = "Started Secondary VM"
VmSecondaryStartedEvent.fullFormat                                = "Started Secondary VM for {vm.name}"
###
VmFailedUpdatingSecondaryConfig.category                          = "error"
VmFailedUpdatingSecondaryConfig.description                       = "vCenter cannot update the Secondary VM configuration"
VmFailedUpdatingSecondaryConfig.formatOnComputeResource           = "vCenter cannot update the Secondary VM {vm.name} configuration"
VmFailedUpdatingSecondaryConfig.formatOnDatacenter                = "vCenter cannot update the Secondary VM {vm.name} configuration"
VmFailedUpdatingSecondaryConfig.formatOnHost                      = "vCenter cannot update the Secondary VM {vm.name} configuration"
VmFailedUpdatingSecondaryConfig.formatOnVm                        = "vCenter cannot update the Secondary VM configuration"
VmFailedUpdatingSecondaryConfig.fullFormat                        = "vCenter cannot update the Secondary VM {vm.name} configuration"
###
VmFailedStartingSecondaryEvent.category                           = "error"
VmFailedStartingSecondaryEvent.description                        = "vCenter cannot start the Secondary VM"
VmFailedStartingSecondaryEvent.formatOnComputeResource            = "vCenter cannot start the Secondary VM {vm.name}. Reason: {reason.@enum.VmFailedStartingSecondaryEvent.FailureReason}"
VmFailedStartingSecondaryEvent.formatOnDatacenter                 = "vCenter cannot start the Secondary VM {vm.name}. Reason: {reason.@enum.VmFailedStartingSecondaryEvent.FailureReason}"
VmFailedStartingSecondaryEvent.formatOnHost                       = "vCenter cannot start the Secondary VM {vm.name}. Reason: {reason.@enum.VmFailedStartingSecondaryEvent.FailureReason}"
VmFailedStartingSecondaryEvent.formatOnVm                         = "vCenter cannot start the Secondary VM. Reason: {reason.@enum.VmFailedStartingSecondaryEvent.FailureReason}"
VmFailedStartingSecondaryEvent.fullFormat                         = "vCenter cannot start the Secondary VM {vm.name}. Reason: {reason.@enum.VmFailedStartingSecondaryEvent.FailureReason}"
#args
VmFailedStartingSecondaryEvent.reason.label = "Reason"
VmFailedStartingSecondaryEvent.reason.summary = "Reason"

###
VmTimedoutStartingSecondaryEvent.category                         = "error"
VmTimedoutStartingSecondaryEvent.description                      = "Starting the Secondary VM timed out"
VmTimedoutStartingSecondaryEvent.formatOnComputeResource          = "Starting the Secondary VM {vm.name} timed out within {timeout} ms"
VmTimedoutStartingSecondaryEvent.formatOnDatacenter               = "Starting the Secondary VM {vm.name} timed out within {timeout} ms"
VmTimedoutStartingSecondaryEvent.formatOnHost                     = "Starting the Secondary VM {vm.name} timed out within {timeout} ms"
VmTimedoutStartingSecondaryEvent.formatOnVm                       = "Starting the Secondary VM timed out within {timeout} ms"
VmTimedoutStartingSecondaryEvent.fullFormat                       = "Starting the Secondary VM {vm.name} timed out within {timeout} ms"
#args
VmTimedoutStartingSecondaryEvent.timeout.label = "Time-out"
VmTimedoutStartingSecondaryEvent.timeout.summary = "Time-out in milliseconds"

###
VmNoCompatibleHostForSecondaryEvent.category                      = "error"
VmNoCompatibleHostForSecondaryEvent.description                   = "No compatible host for the Secondary VM"
VmNoCompatibleHostForSecondaryEvent.formatOnComputeResource       = "No compatible host for the Secondary VM {vm.name}"
VmNoCompatibleHostForSecondaryEvent.formatOnDatacenter            = "No compatible host for the Secondary VM {vm.name}"
VmNoCompatibleHostForSecondaryEvent.formatOnHost                  = "No compatible host for the Secondary VM {vm.name}"
VmNoCompatibleHostForSecondaryEvent.formatOnVm                    = "No compatible host for the Secondary VM"
VmNoCompatibleHostForSecondaryEvent.fullFormat                    = "No compatible host for the Secondary VM {vm.name}"
###
VmPrimaryFailoverEvent.category                                   = "error"
VmPrimaryFailoverEvent.description                                = "VM failover"
VmPrimaryFailoverEvent.formatOnComputeResource                    = "VM ({vm.name}) failed over to {host.name}. {reason.@enum.VirtualMachine.NeedSecondaryReason}"
VmPrimaryFailoverEvent.formatOnDatacenter                         = "VM ({vm.name}) failed over to {host.name}. {reason.@enum.VirtualMachine.NeedSecondaryReason}"
VmPrimaryFailoverEvent.formatOnHost                               = "VM ({vm.name}) failed over to {host.name}. {reason.@enum.VirtualMachine.NeedSecondaryReason}"
VmPrimaryFailoverEvent.formatOnVm                                 = "VM failed over to {host.name}. {reason.@enum.VirtualMachine.NeedSecondaryReason}"
VmPrimaryFailoverEvent.fullFormat                                 = "VM ({vm.name}) failed over to {host.name}. {reason.@enum.VirtualMachine.NeedSecondaryReason}"
#args
VmPrimaryFailoverEvent.dstHost.label = "Destination host ID"
VmPrimaryFailoverEvent.dstHost.summary = "Destination host ID"
VmPrimaryFailoverEvent.dstHost.name.label = "Destination host name"
VmPrimaryFailoverEvent.dstHost.name.summary = "Name of destination host"
VmPrimaryFailoverEvent.reason.label = "Reason"
VmPrimaryFailoverEvent.reason.summary = "Reason"

###
VmFaultToleranceVmTerminatedEvent.category                        = "info"
VmFaultToleranceVmTerminatedEvent.description                     = "Fault Tolerance VM terminated"
VmFaultToleranceVmTerminatedEvent.formatOnComputeResource         = "The Fault Tolerance VM ({vm.name}) has been terminated. {reason.@enum.VmFaultToleranceVmTerminatedEvent.TerminateReason}"
VmFaultToleranceVmTerminatedEvent.formatOnDatacenter              = "The Fault Tolerance VM ({vm.name}) has been terminated. {reason.@enum.VmFaultToleranceVmTerminatedEvent.TerminateReason}"
VmFaultToleranceVmTerminatedEvent.formatOnHost                    = "The Fault Tolerance VM ({vm.name}) has been terminated. {reason.@enum.VmFaultToleranceVmTerminatedEvent.TerminateReason}"
VmFaultToleranceVmTerminatedEvent.formatOnVm                      = "The Fault Tolerance VM has been terminated. {reason.@enum.VmFaultToleranceVmTerminatedEvent.TerminateReason}"
VmFaultToleranceVmTerminatedEvent.fullFormat                      = "The Fault Tolerance VM ({vm.name}) has been terminated. {reason.@enum.VmFaultToleranceVmTerminatedEvent.TerminateReason}"
#args
VmFaultToleranceVmTerminatedEvent.reason.label = "Reason"
VmFaultToleranceVmTerminatedEvent.reason.summary = "Reason"

###
VmEndRecordingEvent.category = "info"
VmEndRecordingEvent.description = "End a recording session"
VmEndRecordingEvent.formatOnComputeResource = ""
VmEndRecordingEvent.formatOnDatacenter = ""
VmEndRecordingEvent.formatOnHost = ""
VmEndRecordingEvent.formatOnVm = "End a recording session"
VmEndRecordingEvent.fullFormat = "End a recording session on {vm.name}"
###
VmEndReplayingEvent.category = "info"
VmEndReplayingEvent.description = "End a replay session"
VmEndReplayingEvent.formatOnComputeResource = ""
VmEndReplayingEvent.formatOnDatacenter = ""
VmEndReplayingEvent.formatOnHost = ""
VmEndReplayingEvent.formatOnVm = "End a replay session"
VmEndReplayingEvent.fullFormat = "End a replay session on {vm.name}"
###
VmInstanceUuidAssignedEvent.category = "info"
VmInstanceUuidAssignedEvent.description = "Assign a new instance UUID"
VmInstanceUuidAssignedEvent.formatOnComputeResource = ""
VmInstanceUuidAssignedEvent.formatOnDatacenter = ""
VmInstanceUuidAssignedEvent.formatOnHost = ""
VmInstanceUuidAssignedEvent.formatOnVm = "Assign a new instance UUID ({instanceUuid})"
VmInstanceUuidAssignedEvent.fullFormat = "Assign a new instance UUID ({instanceUuid}) to {vm.name}"
#args
VmInstanceUuidAssignedEvent.instanceUuid.label = "Instance UUID"
VmInstanceUuidAssignedEvent.instanceUuid.summary = "Instance UUID"

###
VmInstanceUuidChangedEvent.category = "info"
VmInstanceUuidChangedEvent.description = "Instance UUID Changed"
VmInstanceUuidChangedEvent.formatOnComputeResource = ""
VmInstanceUuidChangedEvent.formatOnDatacenter = ""
VmInstanceUuidChangedEvent.formatOnHost = ""
VmInstanceUuidChangedEvent.formatOnVm = "The instance UUID has been changed from ({oldInstanceUuid}) to ({newInstanceUuid})"
VmInstanceUuidChangedEvent.fullFormat = "The instance UUID of {vm.name} has been changed from ({oldInstanceUuid}) to ({newInstanceUuid})"
#args
VmInstanceUuidChangedEvent.newInstanceUuid.label = "New instance UUID"
VmInstanceUuidChangedEvent.newInstanceUuid.summary = "New instance UUID"
VmInstanceUuidChangedEvent.oldInstanceUuid.label = "Previous instance UUID"
VmInstanceUuidChangedEvent.oldInstanceUuid.summary = "Previous instance UUID"

###
VmInstanceUuidConflictEvent.category = "error"
VmInstanceUuidConflictEvent.description = "Instance UUIDs conflict"
VmInstanceUuidConflictEvent.formatOnComputeResource = ""
VmInstanceUuidConflictEvent.formatOnDatacenter = ""
VmInstanceUuidConflictEvent.formatOnHost = ""
VmInstanceUuidConflictEvent.formatOnVm = "The instance UUID ({instanceUuid}) conflicts with the instance UUID assigned to {conflictedVm.name}"
VmInstanceUuidConflictEvent.fullFormat = "The instance UUID ({instanceUuid}) of {vm.name} conflicts with the instance UUID assigned to {conflictedVm.name}"
#args
VmInstanceUuidConflictEvent.conflictedVm.label = "Conflicted VM ID"
VmInstanceUuidConflictEvent.conflictedVm.summary = "ID of conflicted VM"
VmInstanceUuidConflictEvent.conflictedVm.name.label = "Conflicted VM name"
VmInstanceUuidConflictEvent.conflictedVm.name.summary = "Name of conflicted VM"
VmInstanceUuidConflictEvent.instanceUuid.label = "UUID"
VmInstanceUuidConflictEvent.instanceUuid.summary = "Conflicted UUID"

###
VmStartRecordingEvent.category = "info"
VmStartRecordingEvent.description = "Start a recording session"
VmStartRecordingEvent.formatOnComputeResource = ""
VmStartRecordingEvent.formatOnDatacenter = ""
VmStartRecordingEvent.formatOnHost = ""
VmStartRecordingEvent.formatOnVm = "Start a recording session"
VmStartRecordingEvent.fullFormat = "Start a recording session on {vm.name}"
###
VmStartReplayingEvent.category = "info"
VmStartReplayingEvent.description = "Start a replay session"
VmStartReplayingEvent.formatOnComputeResource = ""
VmStartReplayingEvent.formatOnDatacenter = ""
VmStartReplayingEvent.formatOnHost = ""
VmStartReplayingEvent.formatOnVm = "Start a replay session"
VmStartReplayingEvent.fullFormat = "Start a replay session on {vm.name}"
###
HostWwnChangedEvent.category                                      = "warning"
HostWwnChangedEvent.description                                   = "Host WWN changed"
HostWwnChangedEvent.formatOnComputeResource                       = ""
HostWwnChangedEvent.formatOnDatacenter                            = ""
HostWwnChangedEvent.formatOnHost                                  = "WWNs are changed"
HostWwnChangedEvent.formatOnVm                                    = ""
HostWwnChangedEvent.fullFormat                                    = "WWNs are changed for {host.name}"
###
HostAdminDisableEvent.category                                    = "warning"
HostAdminDisableEvent.description                                 = "Host administrator access disabled"
HostAdminDisableEvent.formatOnComputeResource                     = ""
HostAdminDisableEvent.formatOnDatacenter                          = ""
HostAdminDisableEvent.formatOnHost                                = "Administrator access to the host is disabled"
HostAdminDisableEvent.formatOnVm                                  = ""
HostAdminDisableEvent.fullFormat                                  = "Administrator access to the host {host.name} is disabled"
###
HostAdminEnableEvent.category                                     = "warning"
HostAdminEnableEvent.description                                  = "Host administrator access enabled"
HostAdminEnableEvent.formatOnComputeResource                      = ""
HostAdminEnableEvent.formatOnDatacenter                           = ""
HostAdminEnableEvent.formatOnHost                                 = "Administrator access to the host has been restored"
HostAdminEnableEvent.formatOnVm                                   = ""
HostAdminEnableEvent.fullFormat                                   = "Administrator access to the host {host.name} has been restored"
###
HostEnableAdminFailedEvent.category                               = "error"
HostEnableAdminFailedEvent.description                            = "Cannot restore administrator permissions to host"
HostEnableAdminFailedEvent.formatOnComputeResource                = ""
HostEnableAdminFailedEvent.formatOnDatacenter                     = ""
HostEnableAdminFailedEvent.formatOnHost                           = "Cannot restore some administrator permissions to the host"
HostEnableAdminFailedEvent.formatOnVm                             = ""
HostEnableAdminFailedEvent.fullFormat                             = "Cannot restore some administrator permissions to the host {host.name}"
###
CustomizationStartedEvent.category                                = "info"
CustomizationStartedEvent.description                             = "Started customization"
CustomizationStartedEvent.formatOnComputeResource                 = ""
CustomizationStartedEvent.formatOnDatacenter                      = ""
CustomizationStartedEvent.formatOnHost                            = ""
CustomizationStartedEvent.formatOnVm                              = ""
CustomizationStartedEvent.fullFormat                              = "Started customization of VM {vm.name}. Customization log located at {logLocation} in the guest OS."
###
CustomizationSucceeded.category                                   = "info"
CustomizationSucceeded.description                                = "Customization succeeded"
CustomizationSucceeded.formatOnComputeResource                    = ""
CustomizationSucceeded.formatOnDatacenter                         = ""
CustomizationSucceeded.formatOnHost                               = ""
CustomizationSucceeded.formatOnVm                                 = ""
CustomizationSucceeded.fullFormat                                 = "Customization of VM {vm.name} succeeded. Customization log located at {logLocation} in the guest OS."
###
CustomizationUnknownFailure.category                              = "error"
CustomizationUnknownFailure.description                           = "Unknown customization error"
CustomizationUnknownFailure.formatOnComputeResource               = ""
CustomizationUnknownFailure.formatOnDatacenter                    = ""
CustomizationUnknownFailure.formatOnHost                          = ""
CustomizationUnknownFailure.formatOnVm                            = ""
CustomizationUnknownFailure.fullFormat                            = "An error occurred while customizing VM {vm.name}. For details reference the log file {logLocation} in the guest OS."
###
CustomizationSysprepFailed.category                               = "error"
CustomizationSysprepFailed.description                            = "Cannot complete customization Sysprep"
CustomizationSysprepFailed.formatOnComputeResource                = ""
CustomizationSysprepFailed.formatOnDatacenter                     = ""
CustomizationSysprepFailed.formatOnHost                           = ""
CustomizationSysprepFailed.formatOnVm                             = ""
CustomizationSysprepFailed.fullFormat                             = "The version of Sysprep {sysprepVersion} provided for customizing VM {vm.name} does not match the version of guest OS {systemVersion}. See the log file {logLocation} in the guest OS for more information."
#args
CustomizationSysprepFailed.sysprepVersion.label = "Sysprep version"
CustomizationSysprepFailed.sysprepVersion.summary = "Sysprep version"
CustomizationSysprepFailed.systemVersion.label = "Sysprep version"
CustomizationSysprepFailed.systemVersion.summary = "Sysprep version"

###
CustomizationNetworkSetupFailed.category                          = "error"
CustomizationNetworkSetupFailed.description                       = "Cannot complete customization network setup"
CustomizationNetworkSetupFailed.formatOnComputeResource           = ""
CustomizationNetworkSetupFailed.formatOnDatacenter                = ""
CustomizationNetworkSetupFailed.formatOnHost                      = ""
CustomizationNetworkSetupFailed.formatOnVm                        = ""
CustomizationNetworkSetupFailed.fullFormat                        = "An error occurred while setting up network properties of the guest OS. See the log file {logLocation} in the guest OS for details."
###
HostGetShortNameFailedEvent.category                              = "error"
HostGetShortNameFailedEvent.description                           = "Cannot get short host name"
HostGetShortNameFailedEvent.formatOnComputeResource               = ""
HostGetShortNameFailedEvent.formatOnDatacenter                    = ""
HostGetShortNameFailedEvent.formatOnHost                          = "Cannot complete command 'hostname -s' or returned incorrect name format"
HostGetShortNameFailedEvent.formatOnVm                            = ""
HostGetShortNameFailedEvent.fullFormat                            = "Cannot complete command 'hostname -s' on host {host.name} or returned incorrect name format"
###
HostShortNameToIpFailedEvent.category                             = "error"
HostShortNameToIpFailedEvent.description                          = "Host short name to IP not completed"
HostShortNameToIpFailedEvent.formatOnComputeResource              = ""
HostShortNameToIpFailedEvent.formatOnDatacenter                   = ""
HostShortNameToIpFailedEvent.formatOnHost                         = "Cannot resolve short name {shortName} to IP address"
HostShortNameToIpFailedEvent.formatOnVm                           = ""
HostShortNameToIpFailedEvent.fullFormat                           = "Cannot resolve short name {shortName} to IP address on host {host.name}"
#args
HostShortNameToIpFailedEvent.shortName.label = "Short name"
HostShortNameToIpFailedEvent.shortName.summary = "Short host name"

###
HostIpToShortNameFailedEvent.category                             = "error"
HostIpToShortNameFailedEvent.description                          = "Host IP to short name not completed"
HostIpToShortNameFailedEvent.formatOnComputeResource              = ""
HostIpToShortNameFailedEvent.formatOnDatacenter                   = ""
HostIpToShortNameFailedEvent.formatOnHost                         = "Cannot resolve IP address to short name"
HostIpToShortNameFailedEvent.formatOnVm                           = ""
HostIpToShortNameFailedEvent.fullFormat                           = "Cannot resolve IP address to short name on host {host.name}"
###
HostPrimaryAgentNotShortNameEvent.category                        = "error"
HostPrimaryAgentNotShortNameEvent.description                     = "Host primary agent not specified as short name"
HostPrimaryAgentNotShortNameEvent.formatOnComputeResource         = ""
HostPrimaryAgentNotShortNameEvent.formatOnDatacenter              = ""
HostPrimaryAgentNotShortNameEvent.formatOnHost                    = "Primary agent {primaryAgent} was not specified as a short name"
HostPrimaryAgentNotShortNameEvent.formatOnVm                      = ""
HostPrimaryAgentNotShortNameEvent.fullFormat                      = "Primary agent {primaryAgent} was not specified as a short name to host {host.name}"
#args
HostPrimaryAgentNotShortNameEvent.primaryAgent.label = "Primary agent"
HostPrimaryAgentNotShortNameEvent.primaryAgent.summary = "Primary agent name"

###
HostNotInClusterEvent.category                                    = "error"
HostNotInClusterEvent.description                                 = "Host not in cluster"
HostNotInClusterEvent.formatOnComputeResource                     = ""
HostNotInClusterEvent.formatOnDatacenter                          = ""
HostNotInClusterEvent.formatOnHost                                = "Not a cluster member in {datacenter.name}"
HostNotInClusterEvent.formatOnVm                                  = ""
HostNotInClusterEvent.fullFormat                                  = "Host {host.name} is not a cluster member in {datacenter.name}"
###
HostIsolationIpPingFailedEvent.category                           = "error"
HostIsolationIpPingFailedEvent.description                        = "Host could not reach isolation address"
HostIsolationIpPingFailedEvent.formatOnComputeResource            = ""
HostIsolationIpPingFailedEvent.formatOnDatacenter                 = ""
HostIsolationIpPingFailedEvent.formatOnHost                       = "Could not reach isolation address: {isolationIp}"
HostIsolationIpPingFailedEvent.formatOnVm                         = ""
HostIsolationIpPingFailedEvent.fullFormat                         = "Host {host.name} could not reach isolation address: {isolationIp}"
#args
HostIsolationIpPingFailedEvent.isolationIp.label = "Isolation IP address"
HostIsolationIpPingFailedEvent.isolationIp.summary = "Isolation IP address"

###
HostIpInconsistentEvent.category                                  = "error"
HostIpInconsistentEvent.description                               = "Host IP inconsistent"
HostIpInconsistentEvent.formatOnComputeResource                   = ""
HostIpInconsistentEvent.formatOnDatacenter                        = ""
HostIpInconsistentEvent.formatOnHost                              = "Configuration of host IP address is inconsistent: address resolved to {ipAddress} and {ipAddress2}"
HostIpInconsistentEvent.formatOnVm                                = ""
HostIpInconsistentEvent.fullFormat                                = "Configuration of host IP address is inconsistent on host {host.name}: address resolved to {ipAddress} and {ipAddress2}"
#args
HostIpInconsistentEvent.ipAddress.label = "IP address"
HostIpInconsistentEvent.ipAddress.summary = "First IP address"
HostIpInconsistentEvent.ipAddress2.label = "Second IP address"
HostIpInconsistentEvent.ipAddress2.summary = "Second IP address"

###
HostShortNameInconsistentEvent.category                           = "error"
HostShortNameInconsistentEvent.description                        = "Host short name inconsistent"
HostShortNameInconsistentEvent.formatOnComputeResource            = ""
HostShortNameInconsistentEvent.formatOnDatacenter                 = ""
HostShortNameInconsistentEvent.formatOnHost                       = ""
HostShortNameInconsistentEvent.formatOnVm                         = ""
HostShortNameInconsistentEvent.fullFormat                         = "Host names {shortName} and {shortName2} both resolved to the same IP address. Check the host's network configuration and DNS entries"
#args
HostShortNameInconsistentEvent.shortName.label = "Short name"
HostShortNameInconsistentEvent.shortName.summary = "First short name"
HostShortNameInconsistentEvent.shortName2.label = "Second short name"
HostShortNameInconsistentEvent.shortName2.summary = "Second short name"

###
HostNoRedundantManagementNetworkEvent.category                    = "error"
HostNoRedundantManagementNetworkEvent.description                 = "No redundant management network for host"
HostNoRedundantManagementNetworkEvent.formatOnComputeResource     = ""
HostNoRedundantManagementNetworkEvent.formatOnDatacenter          = ""
HostNoRedundantManagementNetworkEvent.formatOnHost                = "Host {host.name} currently has no management network redundancy"
HostNoRedundantManagementNetworkEvent.formatOnVm                  = ""
HostNoRedundantManagementNetworkEvent.fullFormat                  = "Host {host.name} currently has no management network redundancy"
###
HostNoAvailableNetworksEvent.category                    = "error"
HostNoAvailableNetworksEvent.description                 = "Host has no available networks for HA communication"
HostNoAvailableNetworksEvent.formatOnComputeResource     = ""
HostNoAvailableNetworksEvent.formatOnDatacenter          = ""
HostNoAvailableNetworksEvent.formatOnHost                = "Host {host.name} currently has no available networks for HA Communication. The following networks are currently used by HA: {ips}"
HostNoAvailableNetworksEvent.formatOnVm                  = ""
HostNoAvailableNetworksEvent.fullFormat                  = "Host {host.name} currently has no available networks for HA Communication. The following networks are currently used by HA: {ips}"
#args
HostNoAvailableNetworksEvent.ips.label = "IP addresses"
HostNoAvailableNetworksEvent.ips.summary = "comma-separated list of IP addresses"

###
HostNoHAEnabledPortGroupsEvent.category                    = "error"
HostNoHAEnabledPortGroupsEvent.description                 = "Host has no port groups enabled for HA"
HostNoHAEnabledPortGroupsEvent.formatOnComputeResource     = ""
HostNoHAEnabledPortGroupsEvent.formatOnDatacenter          = ""
HostNoHAEnabledPortGroupsEvent.formatOnHost                = "Host has no port groups enabled for HA communication."
HostNoHAEnabledPortGroupsEvent.formatOnVm                  = ""
HostNoHAEnabledPortGroupsEvent.fullFormat                  = "Host {host.name} has no port groups enabled for HA communication."

###
HostExtraNetworksEvent.category                    = "error"
HostExtraNetworksEvent.description                 = "Host has extra HA networks"
HostExtraNetworksEvent.formatOnComputeResource     = ""
HostExtraNetworksEvent.formatOnDatacenter          = ""
HostExtraNetworksEvent.formatOnHost                = "Host {host.name} has the following extra networks not used by other hosts for HA communication:{ips}. Consider using HA advanced option das.allowNetwork to control network usage"
HostExtraNetworksEvent.formatOnVm                  = ""
HostExtraNetworksEvent.fullFormat                  = "Host {host.name} has the following extra networks not used by other hosts for HA communication:{ips}. Consider using HA advanced option das.allowNetwork to control network usage"
#args
HostExtraNetworksEvent.ips.label = "IP addresses"
HostExtraNetworksEvent.ips.summary = "comma-separated list of IP addresses"

###
HostMissingNetworksEvent.category                    = "error"
HostMissingNetworksEvent.description                 = "Host is missing HA networks"
HostMissingNetworksEvent.formatOnComputeResource     = ""
HostMissingNetworksEvent.formatOnDatacenter          = ""
HostMissingNetworksEvent.formatOnHost                = "Host {host.name} does not have the following networks used by other hosts for HA communication:{ips}. Consider using HA advanced option das.allowNetwork to control network usage"
HostMissingNetworksEvent.formatOnVm                  = ""
HostMissingNetworksEvent.fullFormat                  = "Host {host.name} does not have the following networks used by other hosts for HA communication:{ips}. Consider using HA advanced option das.allowNetwork to control network usage"
#args
HostMissingNetworksEvent.ips.label = "IP addresses"
HostMissingNetworksEvent.ips.summary = "comma-separated list of IP addresses"

###
HostVnicConnectedToCustomizedDVPortEvent.category                    = "info"
HostVnicConnectedToCustomizedDVPortEvent.description                 = "Some host vNICs were reconfigured to use dvPorts with port level configuration, which might be different from the dvPort group."
HostVnicConnectedToCustomizedDVPortEvent.formatOnComputeResource     = ""
HostVnicConnectedToCustomizedDVPortEvent.formatOnDatacenter          = ""
HostVnicConnectedToCustomizedDVPortEvent.formatOnHost                = "Host vNIC {vnic.vnic} was reconfigured to use dvPort {vnic.port.portKey} with port level configuration, which might be different from the dvPort group."
HostVnicConnectedToCustomizedDVPortEvent.formatOnVm                  = ""
HostVnicConnectedToCustomizedDVPortEvent.fullFormat                  = "Host {host.name} vNIC {vnic.vnic} was reconfigured to use dvPort {vnic.port.portKey} with port level configuration, which might be different from the dvPort group."
###
GhostDvsProxySwitchDetectedEvent.category                    = "info"
GhostDvsProxySwitchDetectedEvent.description                 = "The Distributed Virtual Switch corresponding to the proxy switches on the host does not exist in vCenter or does not contain this host."
GhostDvsProxySwitchDetectedEvent.formatOnComputeResource     = ""
GhostDvsProxySwitchDetectedEvent.formatOnDatacenter          = ""
GhostDvsProxySwitchDetectedEvent.formatOnHost                = "The Distributed Virtual Switch corresponding to the proxy switches {switchUuid} on the host does not exist in vCenter or does not contain this host."
GhostDvsProxySwitchDetectedEvent.formatOnVm                  = ""
GhostDvsProxySwitchDetectedEvent.fullFormat                  = "The Distributed Virtual Switch corresponding to the proxy switches {switchUuid} on the host {host.name} does not exist in vCenter or does not contain this host."
###
GhostDvsProxySwitchRemovedEvent.category                    = "info"
GhostDvsProxySwitchRemovedEvent.description                 = "A ghost proxy switch on the host was resolved."
GhostDvsProxySwitchRemovedEvent.formatOnComputeResource     = ""
GhostDvsProxySwitchRemovedEvent.formatOnDatacenter          = ""
GhostDvsProxySwitchRemovedEvent.formatOnHost                = "A ghost proxy switch {switchUuid} on the host was resolved."
GhostDvsProxySwitchRemovedEvent.formatOnVm                  = ""
GhostDvsProxySwitchRemovedEvent.fullFormat                  = "A ghost proxy switch {switchUuid} on the host {host.name} was resolved."
###
CustomizationLinuxIdentityFailed.category                         = "error"
CustomizationLinuxIdentityFailed.description                      = "Customization Linux Identity Failed"
CustomizationLinuxIdentityFailed.formatOnComputeResource          = ""
CustomizationLinuxIdentityFailed.formatOnDatacenter               = ""
CustomizationLinuxIdentityFailed.formatOnHost                     = ""
CustomizationLinuxIdentityFailed.formatOnVm                       = ""
CustomizationLinuxIdentityFailed.fullFormat                       = "An error occurred while setting up Linux identity. See log file '{logLocation}' on guest OS for details."
###
TaskTimeoutEvent.category                                         = "info"
TaskTimeoutEvent.description                                      = "Task time-out"
TaskTimeoutEvent.formatOnComputeResource                          = ""
TaskTimeoutEvent.formatOnDatacenter                               = ""
TaskTimeoutEvent.formatOnHost                                     = ""
TaskTimeoutEvent.formatOnVm                                       = ""
TaskTimeoutEvent.fullFormat                                       = "Task: {info.descriptionId} time-out"
###
ExitingStandbyModeEvent.category                                  = "info"
ExitingStandbyModeEvent.description                               = "Exiting standby mode"
ExitingStandbyModeEvent.formatOnComputeResource                   = ""
ExitingStandbyModeEvent.formatOnDatacenter                        = ""
ExitingStandbyModeEvent.formatOnHost                              = "Exiting standby mode"
ExitingStandbyModeEvent.formatOnVm                                = ""
ExitingStandbyModeEvent.fullFormat                                = "The host {host.name} is exiting standby mode"
###
ExitedStandbyModeEvent.category                                   = "info"
ExitedStandbyModeEvent.description                                = "Exited standby mode"
ExitedStandbyModeEvent.formatOnComputeResource                    = ""
ExitedStandbyModeEvent.formatOnDatacenter                         = ""
ExitedStandbyModeEvent.formatOnHost                               = "Exited standby mode"
ExitedStandbyModeEvent.formatOnVm                                 = ""
ExitedStandbyModeEvent.fullFormat                                 = "The host {host.name} is no longer in standby mode"
###
ExitStandbyModeFailedEvent.category                               = "error"
ExitStandbyModeFailedEvent.description                            = "Cannot exit standby mode"
ExitStandbyModeFailedEvent.formatOnComputeResource                = ""
ExitStandbyModeFailedEvent.formatOnDatacenter                     = ""
ExitStandbyModeFailedEvent.formatOnHost                           = "Could not exit standby mode"
ExitStandbyModeFailedEvent.formatOnVm                             = ""
ExitStandbyModeFailedEvent.fullFormat                             = "The host {host.name} could not exit standby mode"
###
UpdatedAgentBeingRestartedEvent.category                          = "info"
UpdatedAgentBeingRestartedEvent.description                       = "Restarting updated agent"
UpdatedAgentBeingRestartedEvent.formatOnComputeResource           = ""
UpdatedAgentBeingRestartedEvent.formatOnDatacenter                = ""
UpdatedAgentBeingRestartedEvent.formatOnHost                      = "The agent is updated and will soon restart"
UpdatedAgentBeingRestartedEvent.formatOnVm                        = ""
UpdatedAgentBeingRestartedEvent.fullFormat                        = "The agent on host {host.name} is updated and will soon restart"
###
CustomizationFailed.category                                      = "info"
CustomizationFailed.description                                   = "<Customization failed>"
CustomizationFailed.formatOnComputeResource                       = ""
CustomizationFailed.formatOnDatacenter                            = ""
CustomizationFailed.formatOnHost                                  = "Cannot complete customization"
CustomizationFailed.formatOnVm                                    = ""
CustomizationFailed.fullFormat                                    = "Cannot complete customization of VM {vm.name}. See customization log at {logLocation} on the guest OS for details."
###
EnteredStandbyModeEvent.category                                  = "info"
EnteredStandbyModeEvent.description                               = "Entered standby mode"
EnteredStandbyModeEvent.formatOnComputeResource                   = ""
EnteredStandbyModeEvent.formatOnDatacenter                        = ""
EnteredStandbyModeEvent.formatOnHost                              = "Entered standby mode"
EnteredStandbyModeEvent.formatOnVm                                = ""
EnteredStandbyModeEvent.fullFormat                                = "The host {host.name} is in standby mode"
###
EnteringStandbyModeEvent.category                                 = "info"
EnteringStandbyModeEvent.description                              = "Entering standby mode"
EnteringStandbyModeEvent.formatOnComputeResource                  = ""
EnteringStandbyModeEvent.formatOnDatacenter                       = ""
EnteringStandbyModeEvent.formatOnHost                             = "Entering standby mode"
EnteringStandbyModeEvent.formatOnVm                               = ""
EnteringStandbyModeEvent.fullFormat                               = "The host {host.name} is entering standby mode"
###
DuplicateIpDetectedEvent.category                                 = "info"
DuplicateIpDetectedEvent.description                              = "Duplicate IP detected"
DuplicateIpDetectedEvent.formatOnComputeResource                  = ""
DuplicateIpDetectedEvent.formatOnDatacenter                       = ""
DuplicateIpDetectedEvent.formatOnHost                             = "Virtual machine {macAddress} has a duplicate IP {duplicateIP}"
DuplicateIpDetectedEvent.formatOnVm                               = ""
DuplicateIpDetectedEvent.fullFormat                               = "Virtual machine {macAddress} on host {host.name} has a duplicate IP {duplicateIP}"
#args
DuplicateIpDetectedEvent.duplicateIP.label = "Duplicate IP address"
DuplicateIpDetectedEvent.duplicateIP.summary = "Duplicate IP address"
DuplicateIpDetectedEvent.macAddress.label = "MAC address"
DuplicateIpDetectedEvent.macAddress.summary = "MAC address of the other interface"

###
IncorrectHostInformationEvent.category                            = "error"
IncorrectHostInformationEvent.description                         = "Incorrect host information"
IncorrectHostInformationEvent.formatOnComputeResource             = ""
IncorrectHostInformationEvent.formatOnDatacenter                  = ""
IncorrectHostInformationEvent.formatOnHost                        = "Information needed to acquire the correct set of licenses not provided"
IncorrectHostInformationEvent.formatOnVm                          = ""
IncorrectHostInformationEvent.fullFormat                          = "Host {host.name} did not provide the information needed to acquire the correct set of licenses"
###
HostInventoryFullEvent.category                              = "error"
HostInventoryFullEvent.description                           = "Host inventory full"
HostInventoryFullEvent.formatOnComputeResource               = ""
HostInventoryFullEvent.formatOnDatacenter                    = ""
HostInventoryFullEvent.formatOnHost                          = ""
HostInventoryFullEvent.formatOnVm                            = ""
HostInventoryFullEvent.fullFormat                            = "Maximum ({capacity}) number of hosts allowed for this edition of vCenter Server has been reached"
#args
HostInventoryFullEvent.capacity.label = "Capacity"
HostInventoryFullEvent.capacity.summary = "Capacity"

###
OptionFileRestrictionEvent.category                              = "error"
OptionFileRestrictionEvent.description                           = "Option file restriction"
OptionFileRestrictionEvent.formatOnComputeResource               = ""
OptionFileRestrictionEvent.formatOnDatacenter                    = ""
OptionFileRestrictionEvent.formatOnHost                          = ""
OptionFileRestrictionEvent.formatOnVm                            = ""
OptionFileRestrictionEvent.fullFormat                            = "License check out was restricted by the license server's option file"
###
InvalidEditionEvent.category                                      = "error"
InvalidEditionEvent.description                                   = "Invalid edition"
InvalidEditionEvent.formatOnComputeResource                       = ""
InvalidEditionEvent.formatOnDatacenter                            = ""
InvalidEditionEvent.formatOnHost                                  = ""
InvalidEditionEvent.formatOnVm                                    = ""
InvalidEditionEvent.fullFormat                                    = "The license edition '{feature}' is invalid"
#args
InvalidEditionEvent.feature.label = "Feature"
InvalidEditionEvent.feature.summary = "Feature"

###
DatacenterCreatedEvent.category                                   = "info"
DatacenterCreatedEvent.description                                = "Datacenter created"
DatacenterCreatedEvent.formatOnComputeResource                    = "Created in folder {parent.name}"
DatacenterCreatedEvent.formatOnDatacenter                         = ""
DatacenterCreatedEvent.formatOnHost                               = "Created datacenter {datacenter.name}"
DatacenterCreatedEvent.formatOnVm                                 = ""
DatacenterCreatedEvent.fullFormat                                 = "Created datacenter {datacenter.name} in folder {parent.name}"
#args
DatacenterCreatedEvent.parent.label = "Parent ID"
DatacenterCreatedEvent.parent.summary = "Parent object ID for the new datacenter"
DatacenterCreatedEvent.parent.name.label = "Parent name"
DatacenterCreatedEvent.parent.name.summary = "Name of the parent object of the datacenter"

###
DatacenterRenamedEvent.category                                   = "info"
DatacenterRenamedEvent.description                                = "Datacenter renamed"
DatacenterRenamedEvent.formatOnComputeResource                    = "Renamed datacenter"
DatacenterRenamedEvent.formatOnDatacenter                         = ""
DatacenterRenamedEvent.formatOnHost                               = "Renamed datacenter from {oldName} to {newName}"
DatacenterRenamedEvent.formatOnVm                                 = ""
DatacenterRenamedEvent.fullFormat                                 = "Renamed datacenter from {oldName} to {newName}"
#args
DatacenterRenamedEvent.newName.label = "New name"
DatacenterRenamedEvent.newName.summary = "New name of the datacenter"
DatacenterRenamedEvent.oldName.label = "Previous name"
DatacenterRenamedEvent.oldName.summary = "Previous name for the datacenter"

###
HostIpChangedEvent.category                                       = "info"
HostIpChangedEvent.description                                    = "Host IP changed"
HostIpChangedEvent.formatOnComputeResource                        = ""
HostIpChangedEvent.formatOnDatacenter                             = ""
HostIpChangedEvent.formatOnHost                                   = "IP address changed from {oldIP} to {newIP}"
HostIpChangedEvent.formatOnVm                                     = ""
HostIpChangedEvent.fullFormat                                     = "IP address of the host {host.name} changed from {oldIP} to {newIP}"
#args
HostIpChangedEvent.newIP.label = "New IP address"
HostIpChangedEvent.newIP.summary = "New IP address"
HostIpChangedEvent.oldIP.label = "Previous IP address"
HostIpChangedEvent.oldIP.summary = "Previous IP address"

###
NoDatastoresConfiguredEvent.category                              = "info"
NoDatastoresConfiguredEvent.description                           = "No datastores configured"
NoDatastoresConfiguredEvent.formatOnComputeResource               = ""
NoDatastoresConfiguredEvent.formatOnDatacenter                    = ""
NoDatastoresConfiguredEvent.formatOnHost                          = "No datastores have been configured"
NoDatastoresConfiguredEvent.formatOnVm                            = ""
NoDatastoresConfiguredEvent.fullFormat                            = "No datastores have been configured on the host {host.name}"
###
AdminPasswordNotChangedEvent.category                        = "info"
AdminPasswordNotChangedEvent.description                     = "Administrator password not changed"
AdminPasswordNotChangedEvent.formatOnComputeResource         = ""
AdminPasswordNotChangedEvent.formatOnDatacenter              = ""
AdminPasswordNotChangedEvent.formatOnHost                    = "The default password for the root user has not been changed"
AdminPasswordNotChangedEvent.formatOnVm                      = ""
AdminPasswordNotChangedEvent.fullFormat                      = "The default password for the root user on the host {host.name} has not been changed"
###
LockerMisconfiguredEvent.category                                 = "warning"
LockerMisconfiguredEvent.description                              = "Locker misconfigured"
LockerMisconfiguredEvent.formatOnComputeResource                  = ""
LockerMisconfiguredEvent.formatOnDatacenter                       = ""
LockerMisconfiguredEvent.formatOnHost                             = ""
LockerMisconfiguredEvent.formatOnVm                               = ""
LockerMisconfiguredEvent.fullFormat                               = "Datastore {datastore} which is configured to back the locker does not exist"
#args
# (this duplicates the ".ds" argument of Event)
LockerMisconfiguredEvent.datastore.label = "Datastore ID"
LockerMisconfiguredEvent.datastore.summary = "Datastore ID for the event"
LockerMisconfiguredEvent.datastore.name.label = "Datastore name"
LockerMisconfiguredEvent.datastore.name.summary = "Name of the datastore for the event"

###
LockerReconfiguredEvent.category                                  = "info"
LockerReconfiguredEvent.description                               = "Locker reconfigured"
LockerReconfiguredEvent.formatOnComputeResource                   = ""
LockerReconfiguredEvent.formatOnDatacenter                        = ""
LockerReconfiguredEvent.formatOnHost                              = ""
LockerReconfiguredEvent.formatOnVm                                = ""
LockerReconfiguredEvent.fullFormat                                = "Locker was reconfigured from {oldDatastore} to {newDatastore} datastore"
#args
LockerMisconfiguredEvent.oldDatastore.label = "Previous datastore ID"
LockerMisconfiguredEvent.oldDatastore.summary = "Previous datastore ID"
LockerMisconfiguredEvent.oldDatastore.name.label = "Previous datastore name"
LockerMisconfiguredEvent.oldDatastore.name.summary = "Name for the previous datastore"
LockerMisconfiguredEvent.newDatastore.label = "New datastore ID"
LockerMisconfiguredEvent.newDatastore.summary = "New datastore ID"
LockerMisconfiguredEvent.newDatastore.name.label = "New datastore name"
LockerMisconfiguredEvent.newDatastore.name.summary = "Name for the new datastore"

###
VimAccountPasswordChangedEvent.category                    = "info"
VimAccountPasswordChangedEvent.description                 = "VIM account password changed"
VimAccountPasswordChangedEvent.formatOnComputeResource     = ""
VimAccountPasswordChangedEvent.formatOnDatacenter          = ""
VimAccountPasswordChangedEvent.formatOnHost                = "VIM account password changed"
VimAccountPasswordChangedEvent.formatOnVm                  = ""
VimAccountPasswordChangedEvent.fullFormat                  = "VIM account password was changed on host {host.name}"
###
HostNonCompliantEvent.category                             = "error"
HostNonCompliantEvent.description                          = "Host non-compliant with profile"
HostNonCompliantEvent.formatOnComputeResource              = ""
HostNonCompliantEvent.formatOnDatacenter                   = ""
HostNonCompliantEvent.formatOnHost                         = "Host is not in compliance with the attached profile."
HostNonCompliantEvent.formatOnVm                           = ""
HostNonCompliantEvent.fullFormat                           = "Host {host.name} is not in compliance with the attached profile"
###
HostCompliantEvent.category                                = "info"
HostCompliantEvent.description                             = "Host compliant with profile"
HostCompliantEvent.formatOnComputeResource                 = ""
HostCompliantEvent.formatOnDatacenter                      = ""
HostCompliantEvent.formatOnHost                            = "Host is in compliance with the attached profile."
HostCompliantEvent.formatOnVm                              = ""
HostCompliantEvent.fullFormat                              = "Host {host.name} is in compliance with the attached profile"
###
HostComplianceCheckedEvent.category                        = "info"
HostComplianceCheckedEvent.description                     = "Checked host for compliance"
HostComplianceCheckedEvent.formatOnComputeResource         = "Host {host.name} checked for compliance with profile {profile.name}"
HostComplianceCheckedEvent.formatOnDatacenter              = "Host {host.name} checked for compliance with profile {profile.name}"
HostComplianceCheckedEvent.formatOnHost                    = "Checked host for compliance with profile {profile.name}"
HostComplianceCheckedEvent.formatOnVm                      = ""
HostComplianceCheckedEvent.fullFormat                      = "Host {host.name} checked for compliance."
###
ClusterComplianceCheckedEvent.category                     = "info"
ClusterComplianceCheckedEvent.description                  = "Checked cluster for compliance"
ClusterComplianceCheckedEvent.formatOnComputeResource      = "Cluster was checked for compliance with profile {profile.name}"
ClusterComplianceCheckedEvent.formatOnDatacenter           = "Checked cluster {computeResource.name} for compliance"
ClusterComplianceCheckedEvent.formatOnHost                 = ""
ClusterComplianceCheckedEvent.formatOnVm                   = ""
ClusterComplianceCheckedEvent.fullFormat                   = "Checked cluster for compliance"
###
ProfileEvent.category = "info"
ProfileEvent.description = ""
ProfileEvent.formatOnComputeResource = ""
ProfileEvent.formatOnDatacenter = ""
ProfileEvent.formatOnHost = ""
ProfileEvent.formatOnVm = ""
ProfileEvent.fullFormat = "<internal>"
#args
ProfileEvent.profile.profile.label = "Profile"
ProfileEvent.profile.profile.summary = "Profile name"

###
ProfileCreatedEvent.category                               = "info"
ProfileCreatedEvent.description                            = "Profile created"
ProfileCreatedEvent.formatOnComputeResource                = ""
ProfileCreatedEvent.formatOnDatacenter                     = ""
ProfileCreatedEvent.formatOnHost                           = ""
ProfileCreatedEvent.formatOnVm                             = ""
ProfileCreatedEvent.fullFormat                             = "Profile is created."
###
ProfileRemovedEvent.category                               = "info"
ProfileRemovedEvent.description                            = "Profile removed"
ProfileRemovedEvent.formatOnComputeResource                = "Profile {profile.name} was removed."
ProfileRemovedEvent.formatOnDatacenter                     = "Profile {profile.name} was removed."
ProfileRemovedEvent.formatOnHost                           = ""
ProfileRemovedEvent.formatOnVm                             = ""
ProfileRemovedEvent.fullFormat                             = "Profile was removed."
###
ProfileAssociatedEvent.category                            = "info"
ProfileAssociatedEvent.description                         = "Profile {profile.name} attached."
ProfileAssociatedEvent.formatOnComputeResource             = "Profile {profile.name} has been attached."
ProfileAssociatedEvent.formatOnDatacenter                  = "Profile {profile.name} has been attached."
ProfileAssociatedEvent.formatOnHost                        = "Profile {profile.name} has been attached with the host."
ProfileAssociatedEvent.formatOnVm                          = ""
ProfileAssociatedEvent.fullFormat                          = "Profile {profile.name} attached."
###
ProfileDissociatedEvent.category                           = "info"
ProfileDissociatedEvent.description                        = "Profile {profile.name} detached."
ProfileDissociatedEvent.formatOnComputeResource            = "Profile {profile.name} has been detached. "
ProfileDissociatedEvent.formatOnDatacenter                 = "Profile {profile.name} has been detached."
ProfileDissociatedEvent.formatOnHost                       = "Profile {profile.name} has been detached from the host."
ProfileDissociatedEvent.formatOnVm                         = ""
ProfileDissociatedEvent.fullFormat                         = "Profile {profile.name} detached."
###
ProfileReferenceHostChangedEvent.category                  = "info"
ProfileReferenceHostChangedEvent.description               = "The profile {profile.name} reference host was changed to {referenceHost.name}."
ProfileReferenceHostChangedEvent.formatOnComputeResource   = "The profile {profile.name} reference host was changed to {referenceHost.name}."
ProfileReferenceHostChangedEvent.formatOnDatacenter        = "The profile {profile.name} reference host was changed to {referenceHost.name}."
ProfileReferenceHostChangedEvent.formatOnHost              = "The profile {profile.name} reference host was changed to {referenceHost.name}."
ProfileReferenceHostChangedEvent.formatOnVm                = ""
ProfileReferenceHostChangedEvent.fullFormat                = "Profile {profile.name} reference host changed."
###
ProfileChangedEvent.category                               = "info"
ProfileChangedEvent.description                            = "Profile {profile.name} was changed."
ProfileChangedEvent.formatOnComputeResource                = "Profile {profile.name} was changed."
ProfileChangedEvent.formatOnDatacenter                     = "Profile {profile.name} was changed."
ProfileChangedEvent.formatOnHost                           = "Profile {profile.name} was changed."
ProfileChangedEvent.formatOnVm                             = ""
ProfileChangedEvent.fullFormat                             = "Profile {profile.name} was changed."
###
HostConfigAppliedEvent.category                            = "info"
HostConfigAppliedEvent.description                         = "Host configuration changes applied to {host.name}"
HostConfigAppliedEvent.formatOnComputeResource             = "Host configuration changes applied to {host.name}"
HostConfigAppliedEvent.formatOnDatacenter                  = "Host configuration changes applied to {host.name}"
HostConfigAppliedEvent.formatOnHost                        = "Host configuration changes applied."
HostConfigAppliedEvent.formatOnVm                          = ""
HostConfigAppliedEvent.fullFormat                          = "Host configuration changes applied."
###
HostProfileAppliedEvent.category                           = "info"
HostProfileAppliedEvent.description                        = "Host profile applied"
HostProfileAppliedEvent.formatOnComputeResource            = ""
HostProfileAppliedEvent.formatOnDatacenter                 = ""
HostProfileAppliedEvent.formatOnHost                       = "Profile configuration applied to the host"
HostProfileAppliedEvent.formatOnVm                         = ""
HostProfileAppliedEvent.fullFormat                         = "Profile is applied on the host {host.name}"
#args
HostProfileAppliedEvent.profile.profile.label = "Profile"
HostProfileAppliedEvent.profile.profile.summary = "Profile name"

###
VmDasBeingResetEvent.category                              = "info"
VmDasBeingResetEvent.description                           = "HA enabled VM was reset"
VmDasBeingResetEvent.formatOnComputeResource               = "{vm.name} on {host.name} reset due to a guest OS error."
VmDasBeingResetEvent.formatOnDatacenter                    = "{vm.name} on {host.name} in cluster {computeResource.name} reset due to a guest OS error"
VmDasBeingResetEvent.formatOnHost                          = "{vm.name} reset due to a guest OS error."
VmDasBeingResetEvent.formatOnVm                            = "This virtual machine reset due to a guest OS error. "
VmDasBeingResetEvent.fullFormat                            = "{vm.name} on {host.name} in cluster {computeResource.name} in {datacenter.name} reset due to a guest OS error"
###
VmDasResetFailedEvent.category                             = "warning"
VmDasResetFailedEvent.description                          = "Cannot reset HA enabled VM"
VmDasResetFailedEvent.formatOnComputeResource              = "Cannot reset {vm.name} on {host.name} due to a guest OS error"
VmDasResetFailedEvent.formatOnDatacenter                   = "Cannot reset {vm.name} on {host.name} in cluster {computeResource.name} due to a guest OS error"
VmDasResetFailedEvent.formatOnHost                         = "Cannot reset {vm.name}"
VmDasResetFailedEvent.formatOnVm                           = "Cannot reset this virtual machine"
VmDasResetFailedEvent.fullFormat                           = "Cannot reset {vm.name} on {host.name} in cluster {computeResource.name} in {datacenter.name} due to a guest OS error"
###
VmMaxRestartCountReached.category                          = "warning"
VmMaxRestartCountReached.description                       = "Reached maximum VM restart count"
VmMaxRestartCountReached.formatOnComputeResource           = "Reached maximum VM restart count for {vm.name} on {host.name}."
VmMaxRestartCountReached.formatOnDatacenter                = "Reached maximum VM restart count for {vm.name} on {host.name} in cluster {computeResource.name}."
VmMaxRestartCountReached.formatOnHost                      = "Reached maximum VM restart count for {vm.name}."
VmMaxRestartCountReached.formatOnVm                        = "Reached maximum VM restart count for this VM."
VmMaxRestartCountReached.fullFormat                        = "Reached maximum VM restart count for {vm.name} on {host.name} in cluster {computeResource.name} in {datacenter.name}."
###
VmMaxFTRestartCountReached.category                          = "warning"
VmMaxFTRestartCountReached.description                       = "Reached maximum Secondary VM (with FT turned On) restart count."
VmMaxFTRestartCountReached.formatOnComputeResource           = "Reached maximum Secondary VM (with FT turned On) restart count for {vm.name} on {host.name}."
VmMaxFTRestartCountReached.formatOnDatacenter                = "Reached maximum Secondary VM (with FT turned On) restart count for {vm.name} on {host.name} in cluster {computeResource.name}."
VmMaxFTRestartCountReached.formatOnHost                      = "Reached maximum Secondary VM (with FT turned On) restart count for {vm.name}."
VmMaxFTRestartCountReached.formatOnVm                        = "Reached maximum Secondary VM (with FT turned On) restart count for this VM."
VmMaxFTRestartCountReached.fullFormat                        = "Reached maximum Secondary VM (with FT turned On) restart count for {vm.name} on {host.name} in cluster {computeResource.name} in {datacenter.name}."
###
VmDasBeingResetWithScreenshotEvent.category                = "info"
VmDasBeingResetWithScreenshotEvent.description             = "HA enabled VM reset with screenshot"
VmDasBeingResetWithScreenshotEvent.formatOnComputeResource = "{vm.name} on {host.name} reset due to a guest OS error. Screenshot is saved at {screenshotFilePath}."
VmDasBeingResetWithScreenshotEvent.formatOnDatacenter      = "{vm.name} on {host.name} in cluster {computeResource.name} reset due to a guest OS error. Screenshot is saved at {screenshotFilePath}."
VmDasBeingResetWithScreenshotEvent.formatOnHost            = "{vm.name} reset due to a guest OS error. Screenshot is saved at {screenshotFilePath}"
VmDasBeingResetWithScreenshotEvent.formatOnVm              = "This virtual machine reset due to a guest OS error. Screenshot is saved at {screenshotFilePath}"
VmDasBeingResetWithScreenshotEvent.fullFormat              = "{vm.name} on {host.name} in cluster {computeResource.name} in {datacenter.name} reset due to a guest OS error. Screenshot is saved at {screenshotFilePath}."
#args
VmDasBeingResetWithScreenshotEvent.screenshotFilePath.label = "Screenshot file path"
VmDasBeingResetWithScreenshotEvent.screenshotFilePath.summary = "Screenshot file path"

###
HostMonitoringStateChangedEvent.category                   = "info"
HostMonitoringStateChangedEvent.description                = "Host monitoring state changed"
HostMonitoringStateChangedEvent.formatOnComputeResource    = "Host monitoring state changed to {state}"
HostMonitoringStateChangedEvent.formatOnDatacenter         = "Host monitoring state in {computeResource.name} changed to {state}"
HostMonitoringStateChangedEvent.formatOnHost               = ""
HostMonitoringStateChangedEvent.formatOnVm                 = ""
HostMonitoringStateChangedEvent.fullFormat                 = "Host monitoring state in {computeResource.name} in {datacenter.name} changed to {state}"
#args
HostMonitoringStateChangedEvent.state.label = "State"
HostMonitoringStateChangedEvent.state.summary = "State"

###
VmHealthMonitoringStateChangedEvent.category               = "info"
VmHealthMonitoringStateChangedEvent.description            = "VM monitoring state changed"
VmHealthMonitoringStateChangedEvent.formatOnComputeResource= "VM monitoring state changed to {state}"
VmHealthMonitoringStateChangedEvent.formatOnDatacenter     = "VM monitoring state in {computeResource.name} changed to {state}"
VmHealthMonitoringStateChangedEvent.formatOnHost           = ""
VmHealthMonitoringStateChangedEvent.formatOnVm             = ""
VmHealthMonitoringStateChangedEvent.fullFormat             = "VM monitoring state in {computeResource.name} in {datacenter.name} changed to {state}"
#args
VmHealthMonitoringStateChangedEvent.state.label = "State"
VmHealthMonitoringStateChangedEvent.state.summary = "State"

###
ChangeOwnerOfFileFailedEvent.category                      = "error"
ChangeOwnerOfFileFailedEvent.description                   = "Cannot change owner of file name"
ChangeOwnerOfFileFailedEvent.formatOnComputeResource       = "Cannot change ownership of file name {filename} from {owner} to {attemptedOwner} on {host.name}."
ChangeOwnerOfFileFailedEvent.formatOnDatacenter            = "Cannot change ownership of file name {filename} from {owner} to {attemptedOwner} on {host.name} in  cluster {computeResource.name}."
ChangeOwnerOfFileFailedEvent.formatOnHost                  = "Cannot change ownership of file name {filename} from {owner} to {attemptedOwner}."
ChangeOwnerOfFileFailedEvent.formatOnVm                    = ""
ChangeOwnerOfFileFailedEvent.fullFormat                    = "Cannot change ownership of file name {filename} from {owner} to {attemptedOwner} on {host.name} in {datacenter.name}."
#args
ChangeOwnerOfFileFailedEvent.attemptedOwner.label = "Attempted owner"
ChangeOwnerOfFileFailedEvent.attemptedOwner.summary = "Attempted owner"
ChangeOwnerOfFileFailedEvent.filename.label = "File name"
ChangeOwnerOfFileFailedEvent.filename.summary = "File name"
ChangeOwnerOfFileFailedEvent.owner.label = "Owner"
ChangeOwnerOfFileFailedEvent.owner.summary = "Owner"

###
ChangeOwnerOfFileEvent.category                            = "info"
ChangeOwnerOfFileEvent.description                         = "Change owner of file"
ChangeOwnerOfFileEvent.formatOnComputeResource             = "Changed ownership of file name {filename} from {oldOwner} to {newOwner} on {host.name}."
ChangeOwnerOfFileEvent.formatOnDatacenter                  = "Changed ownership of file name {filename} from {oldOwner} to {newOwner} on {host.name} in cluster {computeResource.name}."
ChangeOwnerOfFileEvent.formatOnHost                        = "Changed ownership of file name {filename} from {oldOwner} to {newOwner}."
ChangeOwnerOfFileEvent.formatOnVm                          = ""
ChangeOwnerOfFileEvent.fullFormat                          = "Changed ownership of file name {filename} from {oldOwner} to {newOwner} on {host.name} in {datacenter.name}."
#args
ChangeOwnerOfFileEvent.filename.label = "File name"
ChangeOwnerOfFileEvent.filename.summary = "File name"
ChangeOwnerOfFileEvent.newOwner.label = "New owner"
ChangeOwnerOfFileEvent.newOwner.summary = "New owner"
ChangeOwnerOfFileEvent.oldOwner.label = "Previous owner"
ChangeOwnerOfFileEvent.oldOwner.summary = "Previous owner"

###
DvsEvent.category                                          = "info"
DvsEvent.description                                       = "Distributed Virtual Switch event"
DvsEvent.formatOnComputeResource                           = ""
DvsEvent.formatOnDatacenter                                = "Distributed Virtual Switch event"
DvsEvent.formatOnHost                                      = ""
DvsEvent.formatOnVm                                        = ""
DvsEvent.fullFormat                                        = "Distributed Virtual Switch event"
###
DvsCreatedEvent.category                                   = "info"
DvsCreatedEvent.description                                = "Distributed Virtual Switch created"
DvsCreatedEvent.formatOnComputeResource                    = ""
DvsCreatedEvent.formatOnDatacenter                         = "A Distributed Virtual Switch {dvs.name} was created"
DvsCreatedEvent.formatOnHost                               = ""
DvsCreatedEvent.formatOnVm                                 = ""
DvsCreatedEvent.fullFormat                                 = "A Distributed Virtual Switch {dvs.name} was created in {datacenter.name}."
#args
DvsCreatedEvent.parent.label = "Parent ID"
DvsCreatedEvent.parent.summary = "Parent folder ID"
DvsCreatedEvent.parent.name.label = "Parent name"
DvsCreatedEvent.parent.name.summary = "Name of parent folder"

###
DvsRenamedEvent.category                                   = "info"
DvsRenamedEvent.description                                = "Distributed Virtual Switch renamed"
DvsRenamedEvent.formatOnComputeResource                    = ""
DvsRenamedEvent.formatOnDatacenter                         = "The Distributed Virtual Switch {oldName} was renamed to {newName}."
DvsRenamedEvent.formatOnHost                               = ""
DvsRenamedEvent.formatOnVm                                 = ""
DvsRenamedEvent.fullFormat                                 = "The Distributed Virtual Switch {oldName} in {datacenter.name} was renamed to {newName}."
#args
DvsRenamedEvent.newName.label = "New name"
DvsRenamedEvent.newName.summary = "New name"
DvsRenamedEvent.oldName.label = "Previous name"
DvsRenamedEvent.oldName.summary = "Previous name"

###
DvsReconfiguredEvent.category                              = "info"
DvsReconfiguredEvent.description                           = "Distributed Virtual Switch reconfigured"
DvsReconfiguredEvent.formatOnComputeResource               = ""
DvsReconfiguredEvent.formatOnDatacenter                    = "The Distributed Virtual Switch {dvs.name} was reconfigured."
DvsReconfiguredEvent.formatOnHost                          = ""
DvsReconfiguredEvent.formatOnVm                            = ""
DvsReconfiguredEvent.fullFormat                            = "The Distributed Virtual Switch {dvs.name} in {datacenter.name} was reconfigured."
#args
DvsReconfiguredEvent.configSpec.configVersion.label = "Configured version"
DvsReconfiguredEvent.configSpec.configVersion.summary = "Configured version"
DvsReconfiguredEvent.configSpec.description.label = "Description"
DvsReconfiguredEvent.configSpec.description.summary = "Description"
DvsReconfiguredEvent.configSpec.extensionKey.label = "extensionKey"
DvsReconfiguredEvent.configSpec.extensionKey.summary = "extensionKey"
DvsReconfiguredEvent.configSpec.maxPorts.label = "maxPorts"
DvsReconfiguredEvent.configSpec.maxPorts.summary = "maxPorts"
DvsReconfiguredEvent.configSpec.name.label = "Name"
DvsReconfiguredEvent.configSpec.name.summary = "Name"
DvsReconfiguredEvent.configSpec.numStandalonePorts.label = "Number stand-alone ports"
DvsReconfiguredEvent.configSpec.numStandalonePorts.summary = "Number of stand-alone ports"
DvsReconfiguredEvent.configSpec.switchIpAddress.label = "Switch IP address"
DvsReconfiguredEvent.configSpec.switchIpAddress.summary = "Switch IP address"

###
DvsUpgradeAvailableEvent.category                          = "info"
DvsUpgradeAvailableEvent.description                       = "An upgrade for the Distributed Virtual Switch is available."
DvsUpgradeAvailableEvent.formatOnComputeResource           = ""
DvsUpgradeAvailableEvent.formatOnDatacenter                = "An upgrade for distributed virtual switch {dvs.name} is available."
DvsUpgradeAvailableEvent.formatOnHost                      = ""
DvsUpgradeAvailableEvent.formatOnVm                        = ""
DvsUpgradeAvailableEvent.fullFormat                        = " An upgrade for the Distributed Virtual Switch {dvs.name} in datacenter {datacenter.name} is available."
###
DvsUpgradeInProgressEvent.category                         = "info"
DvsUpgradeInProgressEvent.description                      = "An upgrade for the Distributed Virtual Switch is in progress."
DvsUpgradeInProgressEvent.formatOnComputeResource          = ""
DvsUpgradeInProgressEvent.formatOnDatacenter               = "An upgrade for distributed virtual switch {dvs.name} is in progress."
DvsUpgradeInProgressEvent.formatOnHost                     = ""
DvsUpgradeInProgressEvent.formatOnVm                       = ""
DvsUpgradeInProgressEvent.fullFormat                       = "An upgrade for the Distributed Virtual Switch {dvs.name} in datacenter {datacenter.name} is in progress."
###
DvsUpgradeRejectedEvent.category                           = "info"
DvsUpgradeRejectedEvent.description                        = "Cannot complete the upgrade for the Distributed Virtual Switch "
DvsUpgradeRejectedEvent.formatOnComputeResource            = ""
DvsUpgradeRejectedEvent.formatOnDatacenter                 = "An upgrade for distributed virtual switch {dvs.name} was rejected."
DvsUpgradeRejectedEvent.formatOnHost                       = ""
DvsUpgradeRejectedEvent.formatOnVm                         = ""
DvsUpgradeRejectedEvent.fullFormat                         = "Cannot complete an upgrade for the Distributed Virtual Switch {dvs.name} in datacenter {datacenter.name} "
###
DvsUpgradedEvent.category                                  = "info"
DvsUpgradedEvent.description                               = "The Distributed Virtual Switch was upgraded."
DvsUpgradedEvent.formatOnComputeResource                   = ""
DvsUpgradedEvent.formatOnDatacenter                        = "Distributed Virtual Switch {dvs.name} was upgraded."
DvsUpgradedEvent.formatOnHost                              = ""
DvsUpgradedEvent.formatOnVm                                = ""
DvsUpgradedEvent.fullFormat                                = "Distributed Virtual Switch {dvs.name} in datacenter {datacenter.name} was upgraded."
###
DvsHostJoinedEvent.category                                = "info"
DvsHostJoinedEvent.description                             = "Host joined the Distributed Virtual Switch"
DvsHostJoinedEvent.formatOnComputeResource                 = ""
DvsHostJoinedEvent.formatOnDatacenter                      = "The host {hostJoined.name} joined the Distributed Virtual Switch {dvs.name}."
DvsHostJoinedEvent.formatOnHost                            = ""
DvsHostJoinedEvent.formatOnVm                              = ""
DvsHostJoinedEvent.fullFormat                              = "The host {hostJoined.name} joined the Distributed Virtual Switch {dvs.name} in {datacenter.name}."
#args
DvsHostJoinedEvent.hostJoined.label = "Host ID"
DvsHostJoinedEvent.hostJoined.summary = "Host ID"
DvsHostJoinedEvent.hostJoined.name.label = "Host name"
DvsHostJoinedEvent.hostJoined.name.summary = "Host name"

###
DvsHostLeftEvent.category                                  = "info"
DvsHostLeftEvent.description                               = " Host left Distributed Virtual Switch"
DvsHostLeftEvent.formatOnComputeResource                   = ""
DvsHostLeftEvent.formatOnDatacenter                        = "The host {hostLeft.name} left the Distributed Virtual Switch {dvs.name}."
DvsHostLeftEvent.formatOnHost                              = ""
DvsHostLeftEvent.formatOnVm                                = ""
DvsHostLeftEvent.fullFormat                                = "The host {hostLeft.name} left the Distributed Virtual Switch {dvs.name} in {datacenter.name}."
#args
DvsHostJoinedEvent.hostLeft.label = "Host ID"
DvsHostJoinedEvent.hostLeft.summary = "Host ID"
DvsHostJoinedEvent.hostLeft.name.label = "Host name"
DvsHostJoinedEvent.hostLeft.name.summary = "Host name"

###
OutOfSyncDvsHost.category                                  = "warning"
OutOfSyncDvsHost.description                               = "The Distributed Virtual Switch configuration on some hosts differed from that of the vCenter Server."
OutOfSyncDvsHost.formatOnDatacenter                        = "The Distributed Virtual Switch configuration on some hosts differed from that of the vCenter Server."
OutOfSyncDvsHost.formatOnHost                              = ""
OutOfSyncDvsHost.formatOnVm                                = ""
OutOfSyncDvsHost.fullFormat                                = "The Distributed Virtual Switch configuration on some hosts differed from that of the vCenter Server."
OutOfSyncDvsHost.formatOnComputeResource                   = ""

###
DvsHostWentOutOfSyncEvent.category                         = "warning"
DvsHostWentOutOfSyncEvent.description                      = "The Distributed Virtual Switch configuration on the host differed from that of the vCenter Server."
DvsHostWentOutOfSyncEvent.formatOnComputeResource          = ""
DvsHostWentOutOfSyncEvent.formatOnDatacenter               = "The Distributed Virtual Switch {dvs.name} configuration on the host differed from that of the vCenter Server."
DvsHostWentOutOfSyncEvent.formatOnHost                     = ""
DvsHostWentOutOfSyncEvent.formatOnVm                       = ""
DvsHostWentOutOfSyncEvent.fullFormat                       = "The Distributed Virtual Switch {dvs.name} configuration on the host differed from that of the vCenter Server."
#args
DvsHostWentOutOfSyncEvent.outOfSyncHost.label = "Host ID"
DvsHostWentOutOfSyncEvent.outOfSyncHost.summary = "Host ID"
DvsHostWentOutOfSyncEvent.outOfSyncHost.name.label = "Host name"
DvsHostWentOutOfSyncEvent.outOfSyncHost.name.summary = "Host name"
###
DvsHostBackInSyncEvent.category                            = "info"
DvsHostBackInSyncEvent.description                         = "The Distributed Virtual Switch configuration on the host was synchronized with that of the vCenter Server."
DvsHostBackInSyncEvent.formatOnComputeResource             = ""
DvsHostBackInSyncEvent.formatOnDatacenter                  = "The Distributed Virtual Switch {dvs.name} configuration on the host was synchronized with that of the vCenter Server."
DvsHostBackInSyncEvent.formatOnHost                        = ""
DvsHostBackInSyncEvent.formatOnVm                          = ""
DvsHostBackInSyncEvent.fullFormat                          = "The Distributed Virtual Switch {dvs.name} configuration on the host was synchronized with that of the vCenter Server."
#args
DvsHostBackInSyncEvent.hostBackInSync.label = "Host ID"
DvsHostBackInSyncEvent.hostBackInSync.summary = "Host ID"
DvsHostBackInSyncEvent.hostBackInSync.name.label = "Host name"
DvsHostBackInSyncEvent.hostBackInSync.name.summary = "Host name"
###
DvsPortCreatedEvent.category                               = "info"
DvsPortCreatedEvent.description                            = "Distributed Virtual Switch port created"
DvsPortCreatedEvent.formatOnComputeResource                = ""
DvsPortCreatedEvent.formatOnDatacenter                     = "New ports were created in the Distributed Virtual Switch {dvs.name}."
DvsPortCreatedEvent.formatOnHost                           = ""
DvsPortCreatedEvent.formatOnVm                             = ""
DvsPortCreatedEvent.fullFormat                             = "New ports were created in the Distributed Virtual Switch {dvs.name} in {datacenter.name}."
###
DvsPortDeletedEvent.category                               = "info"
DvsPortDeletedEvent.description                            = "Distributed Virtual Switch port deleted"
DvsPortDeletedEvent.formatOnComputeResource                = ""
DvsPortDeletedEvent.formatOnDatacenter                     = "Ports were deleted in the Distributed Virtual Switch {dvs.name}."
DvsPortDeletedEvent.formatOnHost                           = ""
DvsPortDeletedEvent.formatOnVm                             = ""
DvsPortDeletedEvent.fullFormat                             = "Deleted ports in the Distributed Virtual Switch {dvs.name} in {datacenter.name}."
###
DvsPortReconfiguredEvent.category                          = "info"
DvsPortReconfiguredEvent.description                       = "Distributed Virtual Switch port reconfigured"
DvsPortReconfiguredEvent.formatOnComputeResource           = ""
DvsPortReconfiguredEvent.formatOnDatacenter                = "Ports were reconfigured in the Distributed Virtual Switch {dvs.name}."
DvsPortReconfiguredEvent.formatOnHost                      = ""
DvsPortReconfiguredEvent.formatOnVm                        = ""
DvsPortReconfiguredEvent.fullFormat                        = "Reconfigured ports in the Distributed Virtual Switch {dvs.name} in {datacenter.name}."
###
DvsPortConnectedEvent.category                             = "info"
DvsPortConnectedEvent.description                          = "Distributed Virtual Switch port connected"
DvsPortConnectedEvent.formatOnComputeResource              = ""
DvsPortConnectedEvent.formatOnDatacenter                   = "The port {portKey} was connected in the Distributed Virtual Switch {dvs.name}."
DvsPortConnectedEvent.formatOnHost                         = ""
DvsPortConnectedEvent.formatOnVm                           = ""
DvsPortConnectedEvent.fullFormat                           = "The port {portKey} was connected in the Distributed Virtual Switch {dvs.name} in {datacenter.name}"
#args
DvsPortConnectedEvent.connectee.addressHint.label = "Address hint"
DvsPortConnectedEvent.connectee.addressHint.summary = "Address hint"
DvsPortConnectedEvent.connectee.connectedEntity.label = "Connected entity"
DvsPortConnectedEvent.connectee.connectedEntity.summary = "Connected entity"
DvsPortConnectedEvent.connectee.nicKey.label = "NIC key"
DvsPortConnectedEvent.connectee.nicKey.summary = "NIC key"
DvsPortConnectedEvent.connectee.type.label = "Type"
DvsPortConnectedEvent.connectee.type.summary = "Connectee type"
DvsPortConnectedEvent.portKey.label = "Port key"
DvsPortConnectedEvent.portKey.summary = "Port key"

###
DvsPortDisconnectedEvent.category                          = "info"
DvsPortDisconnectedEvent.description                       = "Distributed Virtual Switch port disconnected"
DvsPortDisconnectedEvent.formatOnComputeResource           = ""
DvsPortDisconnectedEvent.formatOnDatacenter                = "The port {portKey} was disconnected in the Distributed Virtual Switch {dvs.name}."
DvsPortDisconnectedEvent.formatOnHost                      = ""
DvsPortDisconnectedEvent.formatOnVm                        = ""
DvsPortDisconnectedEvent.fullFormat                        = "The port {portKey} was disconnected in the Distributed Virtual Switch {dvs.name} in {datacenter.name}."
#args
DvsPortDisconnectedEvent.connectee.addressHint.label = "Address hint"
DvsPortDisconnectedEvent.connectee.addressHint.summary = "Address hint"
DvsPortDisconnectedEvent.connectee.connectedEntity.label = "Connected entity"
DvsPortDisconnectedEvent.connectee.connectedEntity.summary = "Connected entity"
DvsPortDisconnectedEvent.connectee.nicKey.label = "NIC key"
DvsPortDisconnectedEvent.connectee.nicKey.summary = "NIC key"
DvsPortDisconnectedEvent.connectee.type.label = "Type"
DvsPortDisconnectedEvent.connectee.type.summary = "Connectee type"
DvsPortDisconnectedEvent.portKey.label = "Port key"
DvsPortDisconnectedEvent.portKey.summary = "Port key"

###
DvsPortLinkUpEvent.category                                = "info"
DvsPortLinkUpEvent.description                             = "Distributed Virtual Switch port link was up"
DvsPortLinkUpEvent.formatOnComputeResource                 = ""
DvsPortLinkUpEvent.formatOnDatacenter                      = "The port {portKey} link was up in the Distributed Virtual Switch {dvs.name}."
DvsPortLinkUpEvent.formatOnHost                            = ""
DvsPortLinkUpEvent.formatOnVm                              = ""
DvsPortLinkUpEvent.fullFormat                              = "The port {portKey} link was up in the Distributed Virtual Switch {dvs.name} in {datacenter.name}"
#args
DvsPortLinkUpEvent.portKey.label = "Port key"
DvsPortLinkUpEvent.portKey.summary = "Port key"

###
DvsPortLinkDownEvent.category                              = "info"
DvsPortLinkDownEvent.description                           = "Distributed Virtual Switch port link was down"
DvsPortLinkDownEvent.formatOnComputeResource               = ""
DvsPortLinkDownEvent.formatOnDatacenter                    = "The port {portKey} link was down in the Distributed Virtual Switch {dvs.name}."
DvsPortLinkDownEvent.formatOnHost                          = ""
DvsPortLinkDownEvent.formatOnVm                            = ""
DvsPortLinkDownEvent.fullFormat                            = "The port {portKey} link was down in the Distributed Virtual Switch {dvs.name} in {datacenter.name}"
#args
DvsPortLinkDownEvent.portKey.label = "Port key"
DvsPortLinkDownEvent.portKey.summary = "Port key"

###
DvsPortJoinPortgroupEvent.category                         = "info"
DvsPortJoinPortgroupEvent.description                      = "A Distributed Virtual Switch port was moved into the distributed virtual port group."
DvsPortJoinPortgroupEvent.formatOnComputeResource          = ""
DvsPortJoinPortgroupEvent.formatOnDatacenter               = "Port {portKey} was moved into the distributed virtual port group {portgroupName}."
DvsPortJoinPortgroupEvent.formatOnHost                     = ""
DvsPortJoinPortgroupEvent.formatOnVm                       = ""
DvsPortJoinPortgroupEvent.fullFormat                       = "Port {portKey} was moved into the distributed virtual port group {portgroupName} in {datacenter.name}."
#args
DvsPortJoinPortgroupEvent.portKey.label = "Port key"
DvsPortJoinPortgroupEvent.portKey.summary = "Port key"
DvsPortJoinPortgroupEvent.portgroupKey.label = "Port group key"
DvsPortJoinPortgroupEvent.portgroupKey.summary = "Port group key"
DvsPortJoinPortgroupEvent.portgroupName.label = "Port group name"
DvsPortJoinPortgroupEvent.portgroupName.summary = "Port group name"

###
DvsPortLeavePortgroupEvent.category                        = "info"
DvsPortLeavePortgroupEvent.description                     = "A Distributed Virtual Switch port was moved out of the distributed virtual port group."
DvsPortLeavePortgroupEvent.formatOnComputeResource         = ""
DvsPortLeavePortgroupEvent.formatOnDatacenter              = "Port {portKey} was moved out of the distributed virtual port group {portgroupName}."
DvsPortLeavePortgroupEvent.formatOnHost                    = ""
DvsPortLeavePortgroupEvent.formatOnVm                      = ""
DvsPortLeavePortgroupEvent.fullFormat                      = "Port {portKey} was moved out of the distributed virtual port group {portgroupName} in {datacenter.name}."
#args
DvsPortLeavePortgroupEvent.portKey.label = "Port key"
DvsPortLeavePortgroupEvent.portKey.summary = "Port key"
DvsPortLeavePortgroupEvent.portgroupKey.label = "Port group key"
DvsPortLeavePortgroupEvent.portgroupKey.summary = "Port group key"
DvsPortLeavePortgroupEvent.portgroupName.label = "Port group name"
DvsPortLeavePortgroupEvent.portgroupName.summary = "Port group name"

###
DvsPortBlockedEvent.category                               = "info"
DvsPortBlockedEvent.description                            = "Distributed Virtual Switch port blocked"
DvsPortBlockedEvent.formatOnComputeResource                = ""
DvsPortBlockedEvent.formatOnDatacenter                     = "Port {portKey} was blocked in the Distributed Virtual Switch {dvs.name}."
DvsPortBlockedEvent.formatOnHost                           = ""
DvsPortBlockedEvent.formatOnVm                             = ""
DvsPortBlockedEvent.fullFormat                             = "Port {portKey} was blocked in the Distributed Virtual Switch {dvs.name} in {datacenter.name}."
#args
DvsPortBlockedEvent.portKey.label = "Port key"
DvsPortBlockedEvent.portKey.summary = "Port key"

###
DvsPortUnblockedEvent.category                             = "info"
DvsPortUnblockedEvent.description                          = "Distributed Virtual Switch port unblocked"
DvsPortUnblockedEvent.formatOnComputeResource              = ""
DvsPortUnblockedEvent.formatOnDatacenter                   = "Port {portKey} was unblocked in the Distributed Virtual Switch {dvs.name}."
DvsPortUnblockedEvent.formatOnHost                         = ""
DvsPortUnblockedEvent.formatOnVm                           = ""
DvsPortUnblockedEvent.fullFormat                           = "Port {portKey} was unblocked in the Distributed Virtual Switch {dvs.name} in {datacenter.name}."

#args
DvsPortUnblockedEvent.portKey.label = "Port key"
DvsPortUnblockedEvent.portKey.summary = "Port key"

###
DvsDestroyedEvent.category                                 = "info"
DvsDestroyedEvent.description                              = "Distributed Virtual Switch deleted"
DvsDestroyedEvent.formatOnComputeResource                  = ""
DvsDestroyedEvent.formatOnDatacenter                       = "Distributed Virtual Switch {dvs.name} was deleted."
DvsDestroyedEvent.formatOnHost                             = ""
DvsDestroyedEvent.formatOnVm                               = ""
DvsDestroyedEvent.fullFormat                               = "Distributed Virtual Switch {dvs.name} in {datacenter.name} was deleted."
###
DvsMergedEvent.category                                    = "info"
DvsMergedEvent.description                                 = "Distributed Virtual Switch merged"
DvsMergedEvent.formatOnComputeResource                     = ""
DvsMergedEvent.formatOnDatacenter                          = "Distributed Virtual Switch {srcDvs.name} was merged into {dstDvs.name}."
DvsMergedEvent.formatOnHost                                = ""
DvsMergedEvent.formatOnVm                                  = ""
DvsMergedEvent.fullFormat                                  = "Distributed Virtual Switch {srcDvs.name} was merged into {dstDvs.name} in {datacenter.name}."
#args
DvsMergedEvent.destinationDvs.label = "Destination DVS ID"
DvsMergedEvent.destinationDvs.summary = "Destination DVS ID"
DvsMergedEvent.destinationDvs.name.label = "Destination DVS name"
DvsMergedEvent.destinationDvs.name.summary = "Destination DVS name"
DvsMergedEvent.sourceDvs.label = "Source DVS ID"
DvsMergedEvent.sourceDvs.summary = "Source Distributed Virtual Switch ID"
DvsMergedEvent.sourceDvs.name.label = "Source DVS name"
DvsMergedEvent.sourceDvs.name.summary = "Source Distributed Virtual Switch name"

###
DVPortgroupEvent.category                                  = "info"
DVPortgroupEvent.description                               = "Distributed virtual port group event"
DVPortgroupEvent.formatOnComputeResource                   = ""
DVPortgroupEvent.formatOnDatacenter                        = "Distributed virtual port group event"
DVPortgroupEvent.formatOnHost                              = ""
DVPortgroupEvent.formatOnVm                                = "Distributed virtual port group event"
DVPortgroupEvent.fullFormat                                = ""
###
DVPortgroupCreatedEvent.category                           = "info"
DVPortgroupCreatedEvent.description                        = "Distributed virtual port group created"
DVPortgroupCreatedEvent.formatOnComputeResource            = ""
DVPortgroupCreatedEvent.formatOnDatacenter                 = "Distributed virtual port group {net.name} was added to switch {dvs}."
DVPortgroupCreatedEvent.formatOnHost                       = ""
DVPortgroupCreatedEvent.formatOnVm                         = ""
DVPortgroupCreatedEvent.fullFormat                         = "Distributed virtual port group {net.name} in {datacenter.name} was added to switch {dvs.name}."
###
DVPortgroupRenamedEvent.category                           = "info"
DVPortgroupRenamedEvent.description                        = "Distributed virtual port group renamed"
DVPortgroupRenamedEvent.formatOnComputeResource            = ""
DVPortgroupRenamedEvent.formatOnDatacenter                 = "Distributed virtual port group {oldName} was renamed to {newName}."
DVPortgroupRenamedEvent.formatOnHost                       = ""
DVPortgroupRenamedEvent.formatOnVm                         = ""
DVPortgroupRenamedEvent.fullFormat                         = "Distributed virtual port group {oldName} in {datacenter.name} was renamed to {newName}"
#args
DVPortgroupRenamedEvent.newName.label = "New name"
DVPortgroupRenamedEvent.newName.summary = "New name"
DVPortgroupRenamedEvent.oldName.label = "Previous name"
DVPortgroupRenamedEvent.oldName.summary = "Previous name"

###
DVPortgroupReconfiguredEvent.category                      = "info"
DVPortgroupReconfiguredEvent.description                   = "Distributed virtual port group reconfigured"
DVPortgroupReconfiguredEvent.formatOnComputeResource       = ""
DVPortgroupReconfiguredEvent.formatOnDatacenter            = "Distributed virtual port group {net.name} was reconfigured."
DVPortgroupReconfiguredEvent.formatOnHost                  = ""
DVPortgroupReconfiguredEvent.formatOnVm                    = ""
DVPortgroupReconfiguredEvent.fullFormat                    = "Distributed virtual port group {net.name} in {datacenter.name} was reconfigured."
#args
DVPortgroupReconfiguredEvent.configSpec.configVersion.label = "Configured version"
DVPortgroupReconfiguredEvent.configSpec.configVersion.summary = "Configured version"
DVPortgroupReconfiguredEvent.configSpec.description.label = "Description"
DVPortgroupReconfiguredEvent.configSpec.description.summary = "Description"
DVPortgroupReconfiguredEvent.configSpec.name.label = "Name"
DVPortgroupReconfiguredEvent.configSpec.name.summary = "Name"
DVPortgroupReconfiguredEvent.configSpec.numPorts.label = "Number of ports"
DVPortgroupReconfiguredEvent.configSpec.numPorts.summary = "Number of ports"
DVPortgroupReconfiguredEvent.configSpec.portNameFormat.label = "Port name format"
DVPortgroupReconfiguredEvent.configSpec.portNameFormat.summary = "Port name format"
DVPortgroupReconfiguredEvent.configSpec.type.label = "Type"
DVPortgroupReconfiguredEvent.configSpec.type.summary = "Type"

###
DVPortgroupDestroyedEvent.category                         = "info"
DVPortgroupDestroyedEvent.description                      = "Distributed virtual port group deleted"
DVPortgroupDestroyedEvent.formatOnComputeResource          = ""
DVPortgroupDestroyedEvent.formatOnDatacenter               = "Distributed virtual port group {net.name} was deleted."
DVPortgroupDestroyedEvent.formatOnHost                     = ""
DVPortgroupDestroyedEvent.formatOnVm                       = ""
DVPortgroupDestroyedEvent.fullFormat                       = "Distributed virtual port group {net.name} in {datacenter.name} was deleted."
###
DrsInvocationFailedEvent.category                          = "error"
DrsInvocationFailedEvent.description                       = "DRS invocation not completed"
DrsInvocationFailedEvent.formatOnComputeResource           = "DRS invocation not completed"
DrsInvocationFailedEvent.formatOnDatacenter                = "DRS invocation not completed"
DrsInvocationFailedEvent.formatOnHost                      = ""
DrsInvocationFailedEvent.formatOnVm                        = ""
DrsInvocationFailedEvent.fullFormat                        = "DRS invocation not completed"
###
DrsRecoveredFromFailureEvent.category                      = "info"
DrsRecoveredFromFailureEvent.description                   = "DRS has recovered from the failure"
DrsRecoveredFromFailureEvent.formatOnComputeResource       = "DRS has recovered from the failure"
DrsRecoveredFromFailureEvent.formatOnDatacenter            = "DRS has recovered from the failure"
DrsRecoveredFromFailureEvent.formatOnHost                  = ""
DrsRecoveredFromFailureEvent.formatOnVm                    = ""
DrsRecoveredFromFailureEvent.fullFormat                    = "DRS has recovered from the failure"
###
### FIXME missing localizations
###
